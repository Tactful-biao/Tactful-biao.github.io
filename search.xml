<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[爬取QQ空间]]></title>
      <url>/2017/11/23/%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>垂涎QQ空间已经很久了，空间里有大量的数据。如果能把它爬取下来肯定是十分有趣的。网上各大网站的爬虫都有，但是关于QQ空间的爬虫却十分的少，只要是腾讯的请求都是加了密的，腾讯光加密算法的js就写了6000行，想要构造它的请求链接比较困难。不过只要功夫深 铁杵磨成针。</p>
<blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></blockquote>
<p>博主每次写和程序相关的文章都会把思路写出来，因为这一步是关键部分，只有思路清晰才能够把程序写好。</p>
<ul>
<li>构造请求链接</li>
<li>先获取所有的好友</li>
<li>获取说说</li>
<li>获取留言</li>
<li>获取个人信息</li>
<li>把数据存到数据库</li>
</ul>
<p>以上就是整个过程中的大思路，然后在逐步把大思路化解成小的具体的问题去解决。</p>
<blockquote>
<h2 id="逐步实现"><a href="#逐步实现" class="headerlink" title="逐步实现"></a>逐步实现</h2></blockquote>
<p>首先介绍一下所用到的环境已经一些相关的库：</p>
<blockquote>
<h3 id="环境与第三方库函数"><a href="#环境与第三方库函数" class="headerlink" title="环境与第三方库函数"></a>环境与第三方库函数</h3></blockquote>
<p>环境：Ubuntu 16.04<br>IDE： PyCharm<br>python 3.5</p>
<ul>
<li>selenium : 用于模拟登录获取cookies</li>
<li>requests : 用于保存会话</li>
<li>json     : 用于把数据进行清理，整合</li>
<li>urllib   : 用于对链接的构造</li>
<li>pymongo  : 用于对mongodb数据库的调用</li>
</ul>
<blockquote>
<h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3></blockquote>
<p>首先QQ空间是需要登录的，我们利用selenium进行模拟登录，关于什么是selenium，以及它的具体怎么去使用它，在这里我就不再介绍了，这里直接开始使用。首先先分析QQ空间的登录界面(<a href="http://user.qzone.qq.com/" target="_blank" rel="external">http://user.qzone.qq.com/</a>):<br><img src="http://oxwgzg29g.bkt.clouddn.com/21.png" alt="1"></p>
<p>我们使用账号密码登录，通过如下代码可以进行模拟登录：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">    <span class="keyword">self</span>.driver.switch_to.frame(<span class="string">'login_frame'</span>)</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'switcher_plogin'</span>).click()</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'u'</span>).clear()</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'u'</span>).send_keys(<span class="keyword">self</span>.__username)</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'p'</span>).clear()</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'p'</span>).send_keys(<span class="keyword">self</span>.__password)</div><div class="line">    <span class="keyword">self</span>.driver.find_element_by_id(<span class="string">'login_button'</span>).click()</div><div class="line">    time.sleep(<span class="number">3</span>)</div><div class="line">    <span class="keyword">self</span>.driver.implicitly_wait(<span class="number">3</span>)</div><div class="line">    <span class="keyword">self</span>.driver.get(<span class="string">'http://user.qzone.qq.com/&#123;&#125;'</span>.format(<span class="keyword">self</span>.__username))</div><div class="line">    cookie = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.driver.get_cookies()<span class="symbol">:</span></div><div class="line">        cookie += item[<span class="string">"name"</span>] + <span class="string">'='</span> + item[<span class="string">'value'</span>] + <span class="string">';'</span></div><div class="line">    <span class="keyword">self</span>.cookies = cookie</div><div class="line">    <span class="keyword">self</span>.headers[<span class="string">'Cookie'</span>] = <span class="keyword">self</span>.cookies</div><div class="line">    <span class="keyword">self</span>.driver.quit()</div></pre></td></tr></table></figure></p>
<p>上面的代码首先我们转换到login_frame，然后找到id为switcher_plogin的按钮进行点击，然后再找到id为u(用户名)的输入框，先进行clear操作，把已有的内容清空，然后把账号通过send_keys的方式输入进去，密码框同理，然后再找到id为login_button的按钮点击，就完成了登录。<br>过程就跟我们自己登录是一样的，我们首先打开空间，然后点击账号密码登录，在用户名处输入QQ号，在密码处输入密码，然后点击登录。<br>登录之后我们等待6秒，让网页加载一段时间，然后我们获取cookies，<br>在Chrome浏览器下，F12找到Network，就可以找到Cookies选项，我们通过循环依次把所有cookies的内容加到我们的cookies字典中，这样我们就构造好了我们的cookies。<br><img src="http://oxwgzg29g.bkt.clouddn.com/22.png" alt="2"></p>
<p>到这里我们的登录任务就完成了，因为我们登录的目的就是为了获取cookies，后面的操作我们就可以利用cookies来进行操作，关于什么是cookies，它的作用是什么，这里不做介绍。</p>
<blockquote>
<h3 id="构造链接"><a href="#构造链接" class="headerlink" title="构造链接"></a>构造链接</h3></blockquote>
<p>有过爬虫经验的朋友肯定知道，构造链接在爬虫过程中是经常会遇到的，特别是数据需要动态加载的时候。我们先来看看空间的数据都在哪里放着，首先我们先打开一个个人说说的界面：<br>该空间是我随意输入的一个QQ号，非好友,可以看到QQ空间说说的链接是：<a href="https://user.qzone.qq.com/qq账号/311：" target="_blank" rel="external">https://user.qzone.qq.com/qq账号/311：</a><br><img src="http://oxwgzg29g.bkt.clouddn.com/23.png" alt="3"></p>
<p>我们再看一下它的数据来源，在chrome中可以找到一个如下链接的地址，点击它可以看到它就是当前页面的说说内容，我们就可以对它直接进行请求，然后从它这里面提取我们想要的数据：<br>emotion_cgi_msglist_v6?uin=85517362&amp;ftype=0&amp;sort=0&amp;pos=0&amp;num=20</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/24.png" alt="4"></p>
<p>我们仔细来分析一下它的请求链接：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span><span class="comment">//user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6?</span></div><div class="line">uin=<span class="number">85517362</span></div><div class="line"><span class="variable">&amp;ftype</span>=<span class="number">0</span></div><div class="line"><span class="variable">&amp;sort</span>=<span class="number">0</span></div><div class="line"><span class="variable">&amp;pos</span>=<span class="number">0</span></div><div class="line"><span class="variable">&amp;num</span>=<span class="number">20</span></div><div class="line"><span class="variable">&amp;replynum</span>=<span class="number">100</span></div><div class="line"><span class="variable">&amp;g_tk</span>=<span class="number">1794161944</span></div><div class="line"><span class="variable">&amp;callback</span>=_preloadCallback<span class="variable">&amp;code_version</span>=<span class="number">1</span></div><div class="line"><span class="variable">&amp;format</span>=jsonp</div><div class="line"><span class="variable">&amp;need_private_comment</span>=<span class="number">1</span></div><div class="line"><span class="variable">&amp;qzonetoken</span>=<span class="number">40</span>cf0abf3ea3e735c2a145ab3e5cfe9f4a60861039047c2a3353a748345c814d8fdd65e31afce3e5</div><div class="line"><span class="variable">&amp;g_tk</span>=<span class="number">1794161944</span></div></pre></td></tr></table></figure>
<p>可以看到请求链接中包含了这么多的参数，这里面主要需要注意的是这个g_tk,一看就知道这是一个通过加密算法加密之后得到的一个值，而这里面肯定还有一个是控制翻页的参数，通过翻页之后比较参数可以发现这个控制翻页的参数是pos，每次增加20，uin是请求的对象的qq，qzonetoken这个参数可以不用，哪些参数必须要有，哪些参数可以没有，可以直接双击该js，在新的页面打开该js，你可以直接在上面链接中进行删除，如果内容没有出错，则表示该参数不是必要的。下面我们来介绍一下g_tk怎么构造：<br>在chrome的Network下的js中找到qzfl_v8_2.1.65.js，打开它，在第5600行左右找到如下内容：<br><img src="http://oxwgzg29g.bkt.clouddn.com/25.png" alt="5"></p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">QZFL.pluginsDefine.getACSRFToken = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="built_in">url</span> = QZFL.util.URI(<span class="built_in">url</span>);</div><div class="line">  <span class="keyword">var</span> skey;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">url</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">url</span>.host &amp;&amp; <span class="built_in">url</span>.host.indexOf(<span class="string">"qzone.qq.com"</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="title">try</span> &#123;</div><div class="line">        skey = <span class="built_in">parent</span>.QZFL.cookie.get(<span class="string">"p_skey"</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        skey = QZFL.cookie.get(<span class="string">"p_skey"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="title">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">url</span>.host &amp;&amp; <span class="built_in">url</span>.host.indexOf(<span class="string">"qq.com"</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        skey = QZFL.cookie.get(<span class="string">"skey"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!skey) &#123;</div><div class="line">    skey = QZFL.cookie.get(<span class="string">"p_skey"</span>) || (QZFL.cookie.get(<span class="string">"skey"</span>) || (QZFL.cookie.get(<span class="string">"rv2"</span>) || <span class="string">""</span>));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">arguments</span>.callee._DJB(skey);</div><div class="line">&#125;;</div><div class="line">QZFL.pluginsDefine.getACSRFToken._DJB = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hash = <span class="number">5381</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = str.length;i &lt; len;++i) &#123;</div><div class="line">    hash += (hash &lt;&lt; <span class="number">5</span>) + str.charCodeAt(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> hash &amp; <span class="number">2147483647</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里就是获取g_tk的算法部分，转换成python版本就是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p_skey = self<span class="selector-class">.cookies</span>[self<span class="selector-class">.cookies</span><span class="selector-class">.find</span>(<span class="string">'p_skey='</span>) + <span class="number">7</span>: self<span class="selector-class">.cookies</span><span class="selector-class">.find</span>(<span class="string">';'</span>, self<span class="selector-class">.cookies</span><span class="selector-class">.find</span>(<span class="string">'p_skey='</span>))]</div><div class="line">h = <span class="number">5381</span></div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> p_skey:</div><div class="line">    h += (h &lt;&lt; <span class="number">5</span>) + ord(i)</div><div class="line">    print(<span class="string">'g_tk'</span>, h &amp; <span class="number">2147483647</span>)</div><div class="line">    self<span class="selector-class">.g_tk</span> = h &amp; <span class="number">2147483647</span></div></pre></td></tr></table></figure></p>
<p>这个就是整个程序的核心部分，只要拿到了这个g_tk，其他的就不是什么困难的地方了。</p>
<blockquote>
<h3 id="获取所有好友的账号"><a href="#获取所有好友的账号" class="headerlink" title="获取所有好友的账号"></a>获取所有好友的账号</h3></blockquote>
<p>我们肯定不能一个一个好友输入账号进行爬取，那不是一个程序员应该干的事。</p>
<p>我们点击QQ空间的设置，在权限设置的地方可以看到有多少个好友可以访问你的空间，既然可以看到那就说明这个数据是加载了的，我们找到这个数据就可以了：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/26.png" alt="6"></p>
<p>找到一个get_entryuinlist.cgi?开头的链接，里面包含我们的好友信息：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/27.png" alt="7"></p>
<p>请求链接构造如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_friends_url</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">    url = <span class="string">'https://h5.qzone.qq.com/proxy/domain/base.qzone.qq.com/cgi-bin/right/get_entryuinlist.cgi?'</span></div><div class="line">    params = &#123;</div><div class="line">        <span class="string">'uin'</span>: <span class="keyword">self</span>.__username,</div><div class="line">        <span class="string">'ver'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'fupdate'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'action'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'g_tk'</span>: <span class="keyword">self</span>.g_tk</div><div class="line">    &#125;</div><div class="line">    url = url + parse.urlencode(params)</div><div class="line">    <span class="keyword">return</span> url</div></pre></td></tr></table></figure>
<p>获取好友信息如下：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">def get_friends(self):</div><div class="line">    offset = <span class="number">0</span></div><div class="line">    t = <span class="literal">True</span></div><div class="line">    url = self.get_friends_url()</div><div class="line">    friends_list = []</div><div class="line">    <span class="built_in">name</span> = []</div><div class="line">    qq_num = []</div><div class="line">    <span class="keyword">while</span> (t):</div><div class="line">        url_ = url + <span class="string">'&amp;offset='</span> + <span class="built_in">str</span>(offset)</div><div class="line">        page = self.req.get(url=url_, headers=self.headers)</div><div class="line">        <span class="keyword">if</span> <span class="string">'\"end\":1'</span> <span class="built_in">in</span> page.<span class="built_in">text</span>:</div><div class="line">            t = <span class="literal">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            data = page.<span class="built_in">text</span>[<span class="number">95</span>:-<span class="number">5</span>]</div><div class="line">            a = json.loads(data)</div><div class="line">            <span class="keyword">for</span> j <span class="built_in">in</span> a:</div><div class="line">                friends_list.<span class="built_in">append</span>(j)</div><div class="line">            offset += <span class="number">50</span></div><div class="line">    <span class="keyword">for</span> ii <span class="built_in">in</span> range(len(friends_list)):</div><div class="line">        <span class="built_in">name</span>.<span class="built_in">append</span>(friends_list[ii][<span class="string">'label'</span>])</div><div class="line">        qq_num.<span class="built_in">append</span>(friends_list[ii][<span class="string">'data'</span>])</div></pre></td></tr></table></figure>
<p>好友数据不是一下全加载出来的，所以这里有一个翻页的处理，通过offset参数，每次增加20，我们把请求的数据通过切片，再通过json规整一下，把好友的qq加入到qq_name列表中，昵称加入到name列表中。通过”end”:1判断所有的好友是否爬取完成！</p>
<p>在数据分析的构成中，偶然发现一个链接里面包含所有好友的账号和姓名，这样的话连翻页都不需要进行处理，但是这是我之后发现的，就没有再对它进行处理，我想这种方法肯定更加方便，有兴趣的朋友可以尝试一下，如果有更好的方法欢迎与博主进行交流。如下图：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/29.png" alt="9"></p>
<blockquote>
<h3 id="获取所有的好友的说说"><a href="#获取所有的好友的说说" class="headerlink" title="获取所有的好友的说说"></a>获取所有的好友的说说</h3></blockquote>
<p>先上代码：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">def get_mood(self):</div><div class="line">    url = <span class="string">'https://h5.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6?'</span></div><div class="line">    <span class="built_in">params</span> = &#123;</div><div class="line">        <span class="string">'inCharset'</span>: <span class="string">'utf-8'</span>,</div><div class="line">        <span class="string">'outCharset'</span>: <span class="string">'utf-8'</span>,</div><div class="line">        <span class="string">'sort'</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">'num'</span>: <span class="number">20</span>,</div><div class="line">        <span class="string">'repllyunm'</span>: <span class="number">100</span>,</div><div class="line">        <span class="string">'cgi_host'</span>: <span class="string">'http://taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6'</span>,</div><div class="line">        <span class="string">'callback'</span>: <span class="string">'_preloadCallback'</span>,</div><div class="line">        <span class="string">'code_version'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'format'</span>: <span class="string">'jsonp'</span>,</div><div class="line">        <span class="string">'need_private_comment'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'g_tk'</span>: self.g_tk</div><div class="line">    &#125;</div><div class="line">    url = url + parse.urlencode(<span class="built_in">params</span>)</div><div class="line">    <span class="keyword">for</span> q <span class="built_in">in</span> self.qq_num:</div><div class="line">        t1 = <span class="literal">True</span></div><div class="line">        url_ = url + <span class="string">'&amp;uin='</span> + <span class="built_in">str</span>(q)</div><div class="line">        pos = <span class="number">0</span></div><div class="line">        black = self.db[<span class="string">'black'</span>]</div><div class="line">        shuoshuo = self.db[<span class="string">'shuoshuo'</span>]</div><div class="line">        <span class="keyword">while</span>(t1):</div><div class="line">            url__ = url_ + <span class="string">'&amp;pos='</span> + <span class="built_in">str</span>(pos)</div><div class="line">            mood = self.req.get(url=url__, headers=self.headers)</div><div class="line">            <span class="keyword">if</span> <span class="string">'\"msglist\":null'</span> <span class="built_in">in</span> mood.<span class="built_in">text</span> <span class="built_in">or</span> <span class="string">"\"</span>message\<span class="string">":\"</span>对不起,主人设置了保密,您没有权限查看\<span class="string">""</span> <span class="built_in">in</span> mood.<span class="built_in">text</span>:</div><div class="line">                t1 = <span class="literal">False</span></div><div class="line">                <span class="keyword">if</span> <span class="string">'\"message\":\"对不起,主人设置了保密,您没有权限查看\"'</span> <span class="built_in">in</span> mood.<span class="built_in">text</span>:</div><div class="line">                    data = &#123;</div><div class="line">                        <span class="string">'name'</span>: self.<span class="built_in">name</span>[self.qq_num.index(q)],</div><div class="line">                        <span class="string">'qq'</span>: q</div><div class="line">                    &#125;</div><div class="line">                    black.insert(data)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                shuo = mood.<span class="built_in">text</span>[<span class="number">17</span>: -<span class="number">2</span>]</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    js = json.loads(shuo)</div><div class="line">                    <span class="keyword">for</span> s <span class="built_in">in</span> js[<span class="string">'msglist'</span>]:</div><div class="line">                        <span class="keyword">if</span> <span class="built_in">not</span> s[<span class="string">'commentlist'</span>]:</div><div class="line">                            s[<span class="string">'commentlist'</span>] = <span class="built_in">list</span>()</div><div class="line">                        <span class="keyword">if</span> <span class="string">'pic'</span> <span class="built_in">in</span> s:</div><div class="line">                            pics = []</div><div class="line">                            <span class="keyword">for</span> j <span class="built_in">in</span> range(len(s[<span class="string">'pic'</span>])):</div><div class="line">                                pics.<span class="built_in">append</span>(s[<span class="string">'pic'</span>][j][<span class="string">'url2'</span>])</div><div class="line">                            data = &#123;</div><div class="line">                                <span class="string">'name'</span>: <span class="built_in">str</span>(s[<span class="string">'name'</span>]),</div><div class="line">                                <span class="string">'_id'</span>: <span class="built_in">str</span>(s[<span class="string">'uin'</span>]) + <span class="string">'_'</span> + <span class="built_in">str</span>(<span class="built_in">random</span>.<span class="built_in">random</span>() * <span class="number">10</span>).replace(<span class="string">'.'</span>, <span class="string">''</span>),</div><div class="line">                                <span class="string">'CreateTime'</span>: s[<span class="string">'createTime'</span>],</div><div class="line">                                <span class="string">'source'</span>: s[<span class="string">'source_name'</span>],</div><div class="line">                                <span class="string">'content'</span>: s[<span class="string">'content'</span>],</div><div class="line">                                <span class="string">'forward'</span>: int(s[<span class="string">'fwdnum'</span>]),</div><div class="line">                                <span class="string">'comment_content'</span>: <span class="built_in">str</span>(</div><div class="line">                                    [(x[<span class="string">'content'</span>], x[<span class="string">'createTime2'</span>], x[<span class="string">'name'</span>], x[<span class="string">'uin'</span>]) <span class="keyword">for</span> x <span class="built_in">in</span></div><div class="line">                                     <span class="built_in">list</span>(s[<span class="string">'commentlist'</span>])]),</div><div class="line">                                <span class="string">'comment'</span>: int(s[<span class="string">'cmtnum'</span>]),</div><div class="line">                                <span class="string">'pic'</span>: pics</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> shuoshuo.insert(data):</div><div class="line">                                print(<span class="string">'%s 的说说写入到数据库成功！'</span> % self.<span class="built_in">name</span>[self.qq_num.index(q)])</div><div class="line">                    pos += <span class="number">20</span></div><div class="line">                except:</div><div class="line">                    print(<span class="string">'%s 的说说写入到数据库失败！'</span> % self.<span class="built_in">name</span>[self.qq_num.index(q)])</div></pre></td></tr></table></figure>
<p>上面的代码首先对链接进行了构造，通过pos进行翻页处理，判断一下空间是否设置了权限，如果设置了权限就把该好友的姓名和qq加入到数据库(black)中,然后退出循环，如果没有的话，把数据进行切片，再通过json规整，然后再对数据进行提取，最后把提取的数据加入到数据库中。</p>
<p>爬取到的原始数据如下：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/28.png" alt="8"></p>
<p>每一条请求包含二十条左右的说说，对于数据的处理我不进行细致的讲解，这也没什么好讲的，只要细心一点，都是可以的，这里我把思路说一下，我先对数据进行了切片处理，把前面没用的部分去除掉，然后切片后的数据是一个符合json格式的数据，通过json.loads()方法，把数据整合一下，然后再逐个的对数据进行提取，最终得到我们想要的东西，这里我们提取了name(好友的姓名)，发说说的设备(source)，发说说的时间(create_time), 转发数, 评论数, 说说内容，说说配图链接，以及评论内容。</p>
<blockquote>
<h3 id="其他内容的爬取"><a href="#其他内容的爬取" class="headerlink" title="其他内容的爬取"></a>其他内容的爬取</h3></blockquote>
<p>当然还爬取了留言，以及个人信息，但是其他的内容都是大同小异，主要包括链接构造，已经数据处理，链接构造中最主要的g_tk上面已经给出了获取方法，其他的翻页也只是一个参数的改变，这里主要是给出思路，具体的还需要自己去实践，你照着我给的代码把爬虫运行一遍意义并不大，你能够从中学到东西才是最关键的。</p>
<blockquote>
<p>留言的爬取</p>
</blockquote>
<p>先来到留言板的页面，链接格式是<code>https://user.qzone.qq.com/好友的qq/334</code>，打开之后，找到get_msgb?开头的js，然后可以看到它里面包含的就是当前页面所有的留言信息，当然，我们只需要对它进行请求即可。如下图：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/31.png" alt="11"></p>
<p>通过链接构造，start控制翻页，每次增加10，对数据进行处理等过程和爬取说说的过程十分的相似。</p>
<blockquote>
<p>个人信息的爬取</p>
</blockquote>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/32.png" alt="12"></p>
<p>通过点击个人档，找到个人资料，可以找到数据的请求链接cgi_userinfo?，里面包含个人档中的所有信息，当然很多人的信息都是不全的，而且准确性也不高，这里面需要注意的地方有，性别是使用代码进行转化的，比如1表示男，2表示女，0表示其他。婚姻状态用1表示单身，2表示已婚，3表示保密，0表示未填写。星座是按照时间顺序依次用0-11表示十二个星座，-1表示未填写。</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/34.png" alt="13"></p>
<blockquote>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3></blockquote>
<p>数据是存储在MongoDB中的，表结构以及内容如下：<br><img src="http://oxwgzg29g.bkt.clouddn.com/30.png" alt="10"></p>
<p>black表是无权限访问的好友，board表是留言板，information是个人信息的爬取，shuoshuo当然是说说的爬取，爬取了250个好友的9万条留言，3万7千条说说没有使用多线程，用了两个多小时。</p>
<blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></blockquote>
<p>这次对QQ空间的爬取总体来说收获还是很大的，文章中只是大体介绍了一下过程，具体细节我希望各位能够亲自动手去做一下，授人以鱼不如授人以渔，要想学好程序，不动手是肯定不行的。当然，博主水平有限，语言表达也不是很好，有些地方表达的不清楚，有错误的地方希望各位多多指教。不了解不清楚的地方可以在文章下方或者留言板中给博主留言！</p>
<p>另外数据爬取下来的主要目的是为了分析，不然爬取数据的意义并不大，要能够从数据中提取出有价值的东西来，这样才有意义，后面博主可能会再发一篇关于空间数据分析的文章。等有时间再写吧。</p>
<blockquote>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3></blockquote>
<p><a href="https://github.com/Tactful-biao/scrapy/tree/master/Qzone" target="_blank" rel="external">My GitHub</a><br>欢迎各位的star哦！</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Qzone </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[监票小脚本]]></title>
      <url>/2017/10/29/%E7%9B%91%E7%A5%A8%E5%B0%8F%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>学习的时候看到了Python发邮件的知识，就实际操作了一下，发现使用Python发邮件真的是特别的简单，就想着跟自己之前的知识结合一下，本来是想要写一个脚本用来检测自己的博客是否出现异常，如果发现出现异常就给自己发邮件。但是自己的博客是放在github上的，静态博客很难出现异常，所以单单为了写脚本而写脚本意义就不大了，正好想到前几天写了一个命令行查票小程序，就想着能不能跟这个结合起来。于是就有了现在的这篇文章，通过爬虫去不断的(可以自己设置时间)爬取12306的余票信息，如果有票就给自己发邮件就可以了。</p>
<blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></blockquote>
<ul>
<li>爬取12306的余票信息</li>
<li>从爬取的信息中提取我们想要的票数信息</li>
<li>判断是否是我们想要的结果</li>
<li>发送邮件</li>
</ul>
<blockquote>
<h2 id="逐步实现"><a href="#逐步实现" class="headerlink" title="逐步实现"></a>逐步实现</h2></blockquote>
<p>这里我们就开始一步一步的去实现我们的目的了！</p>
<p>先放张效果图:<br><img src="http://oxwgzg29g.bkt.clouddn.com/Photo-2017-10-30-22-48-31_5804.PNG" alt="3"></p>
<blockquote>
<h3 id="爬取12306余票信息"><a href="#爬取12306余票信息" class="headerlink" title="爬取12306余票信息"></a>爬取12306余票信息</h3></blockquote>
<p>这一步可以参考我的这篇文章<a href="http://bbiao.me/2017/10/23/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E8%AF%A2%E7%81%AB%E8%BD%A6%E7%A5%A8/" target="_blank" rel="external">《命令行查询火车票》</a>, 这里我们直接使用，具体的网址构造等知识不再介绍。<br>这里我们获取的数据包含所有的数据，其中包含不同的火车的座位等级，比如普通火车的硬卧，硬座，和高铁动车的商务座，一等座等情况，这里我判断了一下，如果是高级火车(G、D)就监控它的一等座和二等座，如果是普通火车(T、K、Z等)就监控它的硬座和硬卧。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">train_date = '<span class="number">2017-11-05</span>'</div><div class="line">from_station = stations.get_telecode('北京')</div><div class="line">to_station = stations.get_telecode('上海')</div><div class="line">url = (</div><div class="line">       'https://kyfw.<span class="number">1230</span>6.cn/otn/leftTicket/query?leftTicketDTO.'</div><div class="line">       'train_date=&#123;&#125;&amp;'</div><div class="line">       'leftTicketDTO.from_station=&#123;&#125;&amp;'</div><div class="line">       'leftTicketDTO.to_station=&#123;&#125;&amp;'</div><div class="line">       'purpose_codes=ADULT'</div><div class="line">       ).format(train_date, from_station, to_station)</div><div class="line">headers = &#123;</div><div class="line">           'Referer': 'https://kyfw.<span class="number">1230</span>6.cn/otn/leftTicket/init',</div><div class="line">           'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.<span class="number">3112.11</span>3 Safari/537.36',</div><div class="line">           'X-Requested-With': 'XMLHttpRequest'</div><div class="line">           &#125;</div><div class="line">data = requests.get(url, headers=headers, verify=False).json()</div><div class="line">result = data['data']['result']</div></pre></td></tr></table></figure>
<p>通过上面的代码我们就可以得到出发日期为2017年11月5日从北京到上海的所有的列车的信息，返回来的数据是json格式了，下面我们就是对数据进行清洗，提取出我们想要的数据。其中result返回的是列表的形式，其中每一辆列车对应一条数据。可以通过len(result)得到该条路线上总共有几辆列车。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">trains</span> = []</div><div class="line"><span class="attr">hard_sleeper</span> = []</div><div class="line"><span class="attr">hard_seat</span> = []</div><div class="line"><span class="attr">first_class_seat</span> = []</div><div class="line"><span class="attr">second_class_seat</span> = []</div><div class="line"><span class="attr">gord</span> = []</div></pre></td></tr></table></figure>
<p>定义六个列表，分别用来存放没亮列车的车次、硬卧、硬座、一等座、二等座，gord列表是存放列车车次的首字母的(G、D、T、Z、K)的，而且六个列表的内容是一一对应的，比如说trains[0]表示的是第一列列车的车次，那么hard_sleep[0]则表示第一列列车的硬卧信息，其他的同理。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">int</span>(lenth)):</div><div class="line">    <span class="keyword">x</span> = result[i].<span class="keyword">split</span>(<span class="string">'|'</span>)</div><div class="line">    gord.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">3</span>][<span class="number">0</span>])</div><div class="line">    trains.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">3</span>])</div><div class="line">    hard_seat.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">29</span>])</div><div class="line">    hard_sleeper.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">28</span>])</div><div class="line">    first_class_seat.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">31</span>])</div><div class="line">    second_class_seat.<span class="keyword">append</span>(<span class="keyword">x</span>[<span class="number">30</span>])</div></pre></td></tr></table></figure>
<p>上面的代码中我们首先需要定义一个lenth变量来统计该线路上有几量火车，然后通过split函数把数据分割开来，把杂乱的数据分割成了一个个小的数据块，其中我们需要的内容就在单独的数据块里面，而且又是列表的形式，所以可以使用列表直接对我们需要的数据进行访问，但是这样会把所有的列车相同位置的信息一下提取出来完，这不是我想要的结果，我想要的结果是只返回单独的一辆列车的信息，因为我的最终目的是可以监控具体的某一辆列车的票数信息，因为我们买票的时候不可能把所有的列车都买上票，我们肯定是有目的性的。我们只需要监控我们需要买的那辆车就可以了。<br>所以我又把提取出来的数据依次放入上面的列表中，就相当于对数据进行了二次整理，把我们需要的数据放在一看，这样更好处理。</p>
<p>把上面的列表打印一下就可以看到如下结果：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'1</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'G</span>', <span class="symbol">'T</span>', <span class="symbol">'D</span>', <span class="symbol">'D</span>', <span class="symbol">'D</span>']</div><div class="line">[<span class="symbol">'G101</span>', <span class="symbol">'G5</span>', <span class="symbol">'G105</span>', <span class="symbol">'G11</span>', <span class="symbol">'G107</span>', <span class="symbol">'G111</span>', <span class="symbol">'G113</span>', <span class="symbol">'G1</span>', <span class="symbol">'G41</span>', <span class="symbol">'G115</span>', <span class="symbol">'G117</span>', <span class="symbol">'G13</span>', <span class="symbol">'G119</span>', <span class="symbol">'G121</span>', <span class="symbol">'G15</span>', <span class="symbol">'G125</span>', <span class="symbol">'G411</span>', <span class="symbol">'1461</span>', <span class="symbol">'G129</span>', <span class="symbol">'G131</span>', <span class="symbol">'G133</span>', <span class="symbol">'G135</span>', <span class="symbol">'G137</span>', <span class="symbol">'G139</span>', <span class="symbol">'G3</span>', <span class="symbol">'G43</span>', <span class="symbol">'G141</span>', <span class="symbol">'G143</span>', <span class="symbol">'G145</span>', <span class="symbol">'G17</span>', <span class="symbol">'G147</span>', <span class="symbol">'G21</span>', <span class="symbol">'G149</span>', <span class="symbol">'G23</span>', <span class="symbol">'G153</span>', <span class="symbol">'G157</span>', <span class="symbol">'G7</span>', <span class="symbol">'G9</span>', <span class="symbol">'T109</span>', <span class="symbol">'D313</span>', <span class="symbol">'D311</span>', <span class="symbol">'D321</span>']</div><div class="line">['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', '', '', '']</div><div class="line">['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'无</span>', '', '', '']</div><div class="line">[<span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'17</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'1</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', '', <span class="symbol">'18</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'1</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'无</span>', '', '', '', '']</div><div class="line">[<span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', '', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'无</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'有</span>', '', <span class="symbol">'无</span>', '', <span class="symbol">'16</span>']</div></pre></td></tr></table></figure>
<p>第一行是我们提取的列车的标志，通过它可以判断是高级火车还是普通火车，第二行是所有的车辆的车次信息，第三行是硬座信息，第四行是硬卧，第五行是一等座，第六行是二等座。<br>为什么要判断是高级火车还是普通火车呢？<br>是因为高级火车和普通火车的座位种类不同，如果是高级火车的话是没有硬卧和硬座的，只有一等座和二等座，普通火车就没有一等座和二等座。所以这里需要判断一下，如果是高级车就监控它的一等和二等座，如果是普通火车，就监控它的硬卧和硬座。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(lenth)):</div><div class="line">    <span class="keyword">if</span> (gord[i] == <span class="string">'G'</span> <span class="keyword">or</span> gord == <span class="string">'D'</span>):</div><div class="line">        <span class="literal">one</span> = (first_class_seat[i] != <span class="string">'无'</span> <span class="keyword">and</span> first_class_seat[i] != <span class="string">' '</span>)</div><div class="line">        <span class="literal">two</span> = (second_class_seat[i] != <span class="string">'无'</span> <span class="keyword">and</span> second_class_seat[i] != <span class="string">' '</span>)</div><div class="line">        <span class="keyword">while</span> (<span class="literal">one</span> <span class="keyword">or</span> <span class="literal">two</span>):</div><div class="line">            <span class="keyword">if</span> (<span class="literal">one</span>):</div><div class="line">                print(<span class="string">'车次:%s的车有一等座票！'</span> % trains[i])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'车次:%s的车有二等座票！'</span> % trains[i])</div><div class="line">            <span class="built_in">time</span>.sleep(<span class="number">3600</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="literal">three</span> = (hard_sleeper[i] != <span class="string">'无'</span> <span class="keyword">and</span> hard_sleeper[i] != <span class="string">' '</span>)</div><div class="line">        <span class="literal">four</span> = (hard_seat[i] != <span class="string">'无'</span> <span class="keyword">and</span> hard_seat[i] != <span class="string">' '</span>)</div><div class="line">        <span class="keyword">while</span> (<span class="literal">three</span> <span class="keyword">or</span> <span class="literal">four</span>):</div><div class="line">            <span class="keyword">if</span> (<span class="literal">three</span>):</div><div class="line">                print(<span class="string">'车次:%s的车有卧铺票！'</span> % trains[i])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'车次:%s的车有硬座票！'</span> % trains[i])</div><div class="line">                <span class="built_in">time</span>.sleep(<span class="number">3600</span>)</div></pre></td></tr></table></figure>
<p>因为我们通过lenth可以获得该路线的火车总数，通过一个循环就可以依次遍历每一辆车，通过一个if判断，如果是G或者D开头的车次，则表示该辆车属于高级车，那么就去监控它的一等和二等座，这里我们先打印一下，到最后我们就可以把print换成发送邮件的方式就可以了。<br>如果不是G或者D的话就是普通火车，那样的火车就去监控它的硬座和硬卧，这里又另外定义了one、two、three、four四个变量，这是个变量判断具体是哪种座位有票，如果满足one的条件就是一等座有票，其他的同理。</p>
<blockquote>
<h3 id="添加条件"><a href="#添加条件" class="headerlink" title="添加条件"></a>添加条件</h3></blockquote>
<p>我们上面的代码只能够监控到第一个有票的车辆，无论是高级车还是普通车，如果有一等、二等座或者硬卧、硬座的票就会给我们发邮件，告诉我们是那辆车有那种票，后面的车就不会再监控了，这样显然不能够满足我们的需求，谁也不能保证第一列有票的车就是我们想要的，所以我要添加一个可以监控你指定的列车的功能。</p>
<p>这个功能也不难，我们需要指定一个车次，然后通过trains列表的索引功能，然后把你指定的列车的名称和列表中的车次进行对比，找到它在列表中的位置，因为我们其他的信息(一等座、二等座、硬卧、硬座)是放在另外的列表中存放的，它们的位置是一一对应的，所以只要找到了该量车次的位置，就相当于知道了它所有的信息。</p>
<p>然后再判断一下它是高级车还是普通车，剩下的就跟上面的差不多了，这里就不在赘述。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">appoint = trains.index(appoin)</div><div class="line"><span class="keyword">if</span> (gord[appoint] == <span class="string">'G'</span> <span class="keyword">or</span> gord == <span class="string">'D'</span>):</div><div class="line">    <span class="literal">one</span> = (first_class_seat[appoint] != <span class="string">'无'</span> <span class="keyword">and</span> first_class_seat[appoint] != <span class="string">' '</span>)</div><div class="line">    <span class="literal">two</span> = (second_class_seat[appoint] != <span class="string">'无'</span> <span class="keyword">and</span> second_class_seat[appoint] != <span class="string">' '</span>)</div><div class="line">    <span class="keyword">while</span> (<span class="literal">one</span> <span class="keyword">or</span> <span class="literal">two</span>):</div><div class="line">        <span class="keyword">if</span> (<span class="literal">one</span>):</div><div class="line">            print(<span class="string">'车次:%s的车有一等座票！'</span> % trains[appoint])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'车次:%s的车有二等座票！'</span> % trains[appoint])</div><div class="line">        <span class="built_in">time</span>.sleep(<span class="number">3600</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="literal">three</span> = (hard_sleeper[appoint] != <span class="string">'无'</span> <span class="keyword">and</span> hard_sleeper[appoint] != <span class="string">' '</span>)</div><div class="line">    <span class="literal">four</span> = (hard_seat[appoint] != <span class="string">'无'</span> <span class="keyword">and</span> hard_seat[appoint] != <span class="string">' '</span>)</div><div class="line">    <span class="keyword">while</span> (<span class="literal">three</span> <span class="keyword">or</span> <span class="literal">four</span>):</div><div class="line">        <span class="keyword">if</span> (<span class="literal">three</span>):</div><div class="line">            print(<span class="string">'车次:%s的车有卧铺票！'</span> % trains[appoint])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'车次:%s的车有硬座票！'</span> % trains[appoint])</div><div class="line">        <span class="built_in">time</span>.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="使用python发送邮件"><a href="#使用python发送邮件" class="headerlink" title="使用python发送邮件"></a>使用python发送邮件</h3></blockquote>
<p>Python发送邮件有两个模块，一个是email。另外一个是smtplib<br>这部分内容我不打算详细的介绍了, 给大家提供一个学习的地方，不懂得朋友可以到这里去看一下，在QQ邮箱里就可以申请授权码，然后就可以进行邮件的发送：</p>
<p><a href="http://www.runoob.com/python/python-email.html" target="_blank" rel="external">学习python邮件发送</a></p>
<blockquote>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3></blockquote>
<p>完整的项目我已经放在我的github上了,感兴趣的朋友可以看一下：</p>
<p><a href="https://github.com/Tactful-biao/scrapy/tree/master/12306" target="_blank" rel="external">监票小脚本</a></p>
<blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></blockquote>
<p>这个小程序总体来说也没有什么难度，特别是结合上面那个命令行查票小程序来看。当然代码还有很多有待改进的地方，比如代码的封装等地方还有待改进的地方，以及对所有的座位类型进行检测，还有更好的交互界面等等，这些都是可以提升的空间，现在这个就相当于是一个模型。以后再慢慢完善！</p>
<blockquote>
<p>文章若有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> email </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行查询火车票]]></title>
      <url>/2017/10/23/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E8%AF%A2%E7%81%AB%E8%BD%A6%E7%A5%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>最近一直在找一些Python相关的练手项目，只有不断的做项目才能够对知识有更加牢固的掌握。找到了一个关于查询火车票余票的小项目，就拿来练练手，由于项目比较小，所以作为一个练手项目还是十分不错的。</p>
<blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></blockquote>
<p>编程最重要的就是思路，思路一定要清晰，在思路上花时间是值得的。</p>
<ul>
<li>从12306网站上获取它的API接口</li>
<li>对它的接口进行请求，对获得的数据进行处理</li>
<li>提取我们想要的内容</li>
</ul>
<p>上面就是我们的总的一个思路。下面就是把大的思想划分成小的功能，逐步进行实现。</p>
<blockquote>
<h2 id="逐步实现"><a href="#逐步实现" class="headerlink" title="逐步实现"></a>逐步实现</h2></blockquote>
<p>下面我们就一步步的来实现我们的程序。</p>
<blockquote>
<h3 id="用到的模块"><a href="#用到的模块" class="headerlink" title="用到的模块"></a>用到的模块</h3></blockquote>
<ul>
<li>requests 模块: 网络请求的库</li>
<li>docopt 模块: 命令行参数解释器</li>
<li>prettytable 模块: 将输出内容如表格方式整齐输出</li>
<li>colorama 模块: 命令行上色函数</li>
<li>setup 模块: python的构建工具</li>
<li>系统环境: Ubuntu 16.04</li>
<li>python 环境: python 3.5</li>
</ul>
<p>系统环境可以根据自己的实际来选择不同的操作系统应该都可以正确执行，上面这些模块就是我们接下来主要用到的模块，在下面的文章中，我们不仔细介绍具体模块的使用方法，不理解的可以留言或者自己百度也可以，我相信这样你能记得更牢固。</p>
<blockquote>
<h3 id="获得接口并且请求接口"><a href="#获得接口并且请求接口" class="headerlink" title="获得接口并且请求接口"></a>获得接口并且请求接口</h3></blockquote>
<p>12306 官网:<a href="https://kyfw.12306.cn/otn/leftTicket/init" target="_blank" rel="external">https://kyfw.12306.cn/otn/leftTicket/init</a></p>
<p>使用Chrome浏览器，打开12306官网，F12，选择出发地、目的地以及日期，点击查询，从下面的NetWork栏，可以看到它的数据接口是：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>kyfw.<span class="number">12306</span>.cn<span class="regexp">/otn/</span>leftTicket<span class="regexp">/query?leftTicketDTO.train_date=2017-11-10&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SHH&amp;purpose_codes=ADULT</span></div></pre></td></tr></table></figure>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/11.png" alt="1"></p>
<p>数据返回的是json格式的，每列火车对应一条json数据。只不过返回的内容十分的嘈杂，我们需要从返回的数据中提取出我们需要的内容。<br>这里我们就得到了我们需要的API。</p>
<p>我们暂时先不分析这个API，我们先对这个API进行请求看看返回的内容是什么。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from requests<span class="selector-class">.packages</span><span class="selector-class">.urllib3</span><span class="selector-class">.exceptions</span> import InsecureRequestWarning</div><div class="line"></div><div class="line">requests<span class="selector-class">.packages</span><span class="selector-class">.urllib3</span><span class="selector-class">.disable_warnings</span>(InsecureRequestWarning)</div><div class="line"></div><div class="line">url = <span class="string">'https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date=2017-11-10&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SHH&amp;purpose_codes=ADULT'</span></div><div class="line">s = requests.get(url, verify=False)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(s.json()</span></span>)</div></pre></td></tr></table></figure>
<p>上面的代码就是对12306的这个余票的API进行了请求，大家知道12306的证书是自己颁发的，浏览器不认。要想对它进行requests请求，必须在请求的时候加上verify=False,默认为True，这样就会忽略证书。另外我们导入的exceptions模块是处理异常信息的，如果不加上的话。会显示如下错误：/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py:852: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings" target="_blank" rel="external">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a><br>  InsecureRequestWarning)，加上之后就不会显示这个错误了。如果导入这个模块出现问题的话，建议把requests换成版本2.17.3</p>
<p>我们来看一下我们获得的数据：</p>
<blockquote>
<p>{<br>  “validateMessagesShowId”: “_validatorMessage”,<br>  “status”: true,<br>  “httpstatus”: 200,<br>  “data”: {<br>    “result”: [<br>      “aSRB3lfB6Mz%2FLafQ6X4JF1mIzb%2F5U%2F%2BDiKDDDrF4D%2F0umLHjuqsgduKSCdskDh2dI60zPanx2XWl%0AFMYzqHdjYZn3lp44kgCYPJrkVpruig2zfcLU6p6N%2BoKEE8XXNiFo5VLBNvX4oQ3SYHK6KALA4Z0C%0AyBJmqV8gyK8kZBhsAebwDpYHo0qGPEP6i6MX9oLwXFsOGtjhpZyedQ4Fk6UKqoBvjOHiu84B3GtN%0AbvLUhdL%2F%2Fi6%2F|预订|240000G1010D|G101|VNP|AOH|VNP|AOH|06:43|12:39|05:56|Y|2K4q7e00dHCBKBkBXUoLkJvNCxC5z%2Fx3dqGAR%2BKRNj6oJADq|20171110|3|P2|01|11|0|0|||||||||||有|有|20||O0M090|OM9”,  “flag”: “1”,<br>    “map”: {<br>      “AOH”: “上海虹桥”,<br>      “BJP”: “北京”,<br>      “VNP”: “北京南”,<br>      “SHH”: “上海”<br>    }<br>  },<br>  “messages”: [],<br>  “validateMessages”: {}<br>} </p>
</blockquote>
<p>考虑到篇幅的问题，这里我只选取了一小部分数据，可以看到每一列火车余票的信息都在这样的一条数据里面，扎一看乱七八糟的一片，感觉无从下手。这时候一定要有耐心，要仔细。</p>
<blockquote>
<h3 id="分析数据，提取内容"><a href="#分析数据，提取内容" class="headerlink" title="分析数据，提取内容"></a>分析数据，提取内容</h3></blockquote>
<p>从上面杂乱无章的数据中提取我们想要的内容是一个体力活，需要仔细观察，认真思考。可以看到相邻的段都有一个”|”,这就是一个突破点，Python有一个split方法，可以把数据按指定条件进行分割，我们就用这个方法，把杂乱无章的数据分割成有规律的数据块。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from requests<span class="selector-class">.packages</span><span class="selector-class">.urllib3</span><span class="selector-class">.exceptions</span> import InsecureRequestWarning</div><div class="line"></div><div class="line">requests<span class="selector-class">.packages</span><span class="selector-class">.urllib3</span><span class="selector-class">.disable_warnings</span>(InsecureRequestWarning)</div><div class="line"></div><div class="line">url = <span class="string">'https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date=2017-11-10&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SHH&amp;purpose_codes=ADULT'</span></div><div class="line">s = requests.get(url, verify=False).json()</div><div class="line">data = s[<span class="string">'data'</span>][<span class="string">'result'</span>]</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> data:</div><div class="line">    print(<span class="selector-tag">i</span>.split(<span class="string">'|'</span>))</div></pre></td></tr></table></figure>
<p>我们需要的数据在json格式下，在’data’的’result’里面，因为data包含许多条数据，所以需要使用for循环进行逐条访问，通过上面的代码，就可以把杂乱无章的数据分割成小的数据块，结果如下：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'aSRB3l6i6MvLUhdL%2F%2Fi6%2F</span>', <span class="symbol">'预订</span>', <span class="symbol">'240000G1010D</span>', <span class="symbol">'G101</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'06:43</span>', <span class="symbol">'12:39</span>', <span class="symbol">'05:56</span>', <span class="symbol">'Y</span>', <span class="symbol">'2K4q7e00dHCBKBkBXUoLkJvNCxC5z%2Fx3dqGAR%2BKRNj6oJADq</span>', <span class="symbol">'20171110</span>', <span class="symbol">'3</span>', <span class="symbol">'P2</span>', <span class="symbol">'01</span>', <span class="symbol">'11</span>', <span class="symbol">'0</span>', <span class="symbol">'0</span>', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', <span class="symbol">'有</span>', <span class="symbol">'20</span>', '', <span class="symbol">'O0M090</span>', <span class="symbol">'OM9</span>']</div><div class="line">[<span class="symbol">'vP6ccFiPo7CIHX9rsUDgg3y60dq5</span>', <span class="symbol">'预订</span>', <span class="symbol">'24000000G503</span>', <span class="symbol">'G5</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'07:00</span>', <span class="symbol">'11:34</span>', <span class="symbol">'04:34</span>', <span class="symbol">'Y</span>', <span class="symbol">'E%2BKOgellBQOuoFy3ooqgD1IiyztPgk2GP%2BrKNB8zgp8NLzS9</span>', <span class="symbol">'20171110</span>', <span class="symbol">'3</span>', <span class="symbol">'P2</span>', <span class="symbol">'01</span>', <span class="symbol">'05</span>', <span class="symbol">'0</span>', <span class="symbol">'0</span>', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', <span class="symbol">'9</span>', <span class="symbol">'9</span>', '', <span class="symbol">'O0M090</span>', <span class="symbol">'OM9</span>']</div><div class="line">[<span class="symbol">'ykb6BDSb5WqzjAheDW8FxhnuUkqLO</span>', <span class="symbol">'预订</span>', <span class="symbol">'240000G1050K</span>', <span class="symbol">'G105</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'VNP</span>', <span class="symbol">'AOH</span>', <span class="symbol">'07:35</span>', <span class="symbol">'13:11</span>', <span class="symbol">'05:36</span>', <span class="symbol">'Y</span>', <span class="symbol">'zZHDvkuUo0QIfwYrdqP%2FndR3PG%2FVmePNTN8vgl85mkQkHs8f</span>', <span class="symbol">'20171110</span>', <span class="symbol">'3</span>', <span class="symbol">'P4</span>', <span class="symbol">'01</span>', <span class="symbol">'09</span>', <span class="symbol">'0</span>', <span class="symbol">'0</span>', '', '', '', '', '', '', '', '', '', '', <span class="symbol">'有</span>', <span class="symbol">'19</span>', <span class="symbol">'5</span>', '', <span class="symbol">'O0M090</span>', <span class="symbol">'OM9</span>']</div></pre></td></tr></table></figure>
<p>考虑到篇幅我把部分数据截短了，现在再来看我们的数据是不是清晰了许多，我们需要的数据在哪里都可以清楚的看到。</p>
<blockquote>
<h3 id="分析与构造网址"><a href="#分析与构造网址" class="headerlink" title="分析与构造网址"></a>分析与构造网址</h3></blockquote>
<p>上面我们请求的网址是固定的，在实际应用中这样肯定是不行的，如果程序只能查询固定地方的余票信息，那么这个程序就是一个“死”的，下面我们就构造动态请求，可以根据你的需要进行请求。</p>
<p>首先我们来分析一下这个网址：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>kyfw.<span class="number">12306</span>.cn<span class="regexp">/otn/</span>leftTicket<span class="regexp">/query?leftTicketDTO.train_date=2017-11-10&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SHH&amp;purpose_codes=ADULT</span></div></pre></td></tr></table></figure>
<p>这个网址分四部分：</p>
<ol>
<li>固定的部分:<code>https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.</code></li>
<li>出行日期部分: train_date=2017-11-10&amp;leftTicketDTO.</li>
<li>始发站部分: from_station=BJP&amp;leftTicketDTO.</li>
<li>终点站部分: to_station=SHH&amp;purpose_codes=ADULT</li>
</ol>
<p>可以把url分这四部分，我们需要动态构造的是2,3,4部分。出发日期格式很简单，主要是始发站和终点站部分，它把城市名称转化成了相应的code，我们需要知道它的转换规则，它的转换规则在它的网站上肯定是有的。我们去找一下。</p>
<p>果然在请求的js里面有一个stations_name 的js，打开它就是所有城市对应的code：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/12.png" alt="3"></p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/13.png" alt="4"></p>
<p>我们写一个简单的脚本，把这些内容提取出来并保存到列表里面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">'https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9018'</span></div><div class="line">    r = requests.get(url, verify=<span class="keyword">False</span>)</div><div class="line">    pattern = <span class="string">u'([\u4e00-\u9fa5]+)\|([A-Z]+)'</span></div><div class="line">    stations = dict(re.findall(pattern, r.text))</div><div class="line">    print(stations.keys())</div><div class="line">    print(stations.values())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>运行之后会显示两个字典，每个字典内包含一个列表一个是城市名称，另外一个是城市代码，是一一对应关系。这样我们就把城市和对应的代码提取出来了。</p>
<p>我们可以通过传入参数(日期，出发站，终点站)就可以实现动态查找。</p>
<blockquote>
<h3 id="docopt的使用"><a href="#docopt的使用" class="headerlink" title="docopt的使用"></a>docopt的使用</h3></blockquote>
<p>docopt 是Python的命令行参数解释器，具体使用方法可以参考<a href="https://www.tuicool.com/articles/36zyQnu" target="_blank" rel="external">这篇教程</a>，这里不做过多介绍。<br>可以使用该命令进行安装:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 <span class="keyword">install</span> docopt</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""Train tickets query from CLI.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Usage:</span></div><div class="line"><span class="string">  test.py [-dgktz] &lt;from&gt; &lt;to&gt; &lt;date&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Options:</span></div><div class="line"><span class="string">  -h --help    Show this screen.</span></div><div class="line"><span class="string">  -d            动车</span></div><div class="line"><span class="string">  -g            高铁</span></div><div class="line"><span class="string">  -k            快速</span></div><div class="line"><span class="string">  -t            特快</span></div><div class="line"><span class="string">  -z            直达</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Example:</span></div><div class="line"><span class="string">  test.py -gd 北京 上海 2017-11-01</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> stations</div><div class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</div><div class="line"></div><div class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class="line"></div><div class="line">canshu = docopt(__doc__)</div><div class="line">start = stations.get_telecode(canshu[<span class="string">'&lt;from&gt;'</span>])</div><div class="line">stop = stations.get_telecode(canshu[<span class="string">'&lt;to&gt;'</span>])</div><div class="line">url = (</div><div class="line">        <span class="string">'https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.'</span></div><div class="line">        <span class="string">'train_date=&#123;&#125;&amp;'</span></div><div class="line">        <span class="string">'leftTicketDTO.from_station=&#123;&#125;&amp;'</span></div><div class="line">        <span class="string">'leftTicketDTO.to_station=&#123;&#125;&amp;'</span></div><div class="line">        <span class="string">'purpose_codes=ADULT'</span></div><div class="line">    ).format(canshu[<span class="string">'&lt;date&gt;'</span>], start, stop)</div><div class="line">s = requests.get(url, verify=<span class="keyword">False</span>).json()</div><div class="line">data = s[<span class="string">'data'</span>][<span class="string">'result'</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">    print(i.split(<span class="string">'|'</span>))</div></pre></td></tr></table></figure>
<p>stations模块是我们自己定义的一个python模块，内容就是我们之前获得的城市名称以及它所对应的城市代码。</p>
<p>通过这种方法就可以实现动态的获取数据，上面的程序传入参数之后运行后的结果如下：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/18.png" alt="6"></p>
<p>上面获得的数据虽然通过我们的分割但是还是处于待处理阶段，不过处理就十分简单了，通过Python的切片操作，直接把需要的数据通过切片的方式获取就可以了。</p>
<p>我们需要获取的数据有“车次 车站 时间 历时 特等座 一等座 二等座 软卧 硬卧 软座 硬座 无座”，这些内容的票数信息在上面的数据中都有，我们主需要把对应的内容提取出来就可以了。</p>
<blockquote>
<h3 id="prettytable-的使用"><a href="#prettytable-的使用" class="headerlink" title="prettytable 的使用"></a>prettytable 的使用</h3></blockquote>
<p>Python通过PrettyTable模块可以将输出内容如表格方式整齐地输出。</p>
<p>安装：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 <span class="keyword">install</span> prettytable</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from prettytable import PrettyTable</div><div class="line"><span class="selector-tag">table</span> = PrettyTable([<span class="string">"animal"</span>, <span class="string">"ferocity"</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"wolverine"</span>, <span class="number">100</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"grizzly"</span>, <span class="number">87</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"Rabbit of Caerbannog"</span>, <span class="number">110</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"cat"</span>, -<span class="number">1</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"platypus"</span>, <span class="number">23</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"dolphin"</span>, <span class="number">63</span>])</div><div class="line"><span class="selector-tag">table</span>.add_row([<span class="string">"albatross"</span>, <span class="number">44</span>])</div><div class="line"><span class="selector-tag">table</span>.sort_key(<span class="string">"ferocity"</span>)</div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.reversesort</span> = True</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(table)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">''<span class="emphasis">'效果图</span></div><div class="line"><span class="emphasis">+----------------------+----------+</span></div><div class="line"><span class="emphasis">|        animal        | ferocity |</span></div><div class="line"><span class="emphasis">+----------------------+----------+</span></div><div class="line"><span class="emphasis">| Rabbit of Caerbannog |   110    |</span></div><div class="line"><span class="emphasis">|      wolverine       |   100    |</span></div><div class="line"><span class="emphasis">|       grizzly        |    87    |</span></div><div class="line"><span class="emphasis">|       dolphin        |    63    |</span></div><div class="line"><span class="emphasis">|      albatross       |    44    |</span></div><div class="line"><span class="emphasis">|       platypus       |    23    |</span></div><div class="line"><span class="emphasis">|         cat          |    -1    |</span></div><div class="line"><span class="emphasis">+----------------------+----------+</span></div></pre></td></tr></table></figure>
<p>具体用法可以自己去了解一下，自己动手丰衣足食。</p>
<blockquote>
<h3 id="colorama-的使用"><a href="#colorama-的使用" class="headerlink" title="colorama 的使用"></a>colorama 的使用</h3></blockquote>
<p>colorama是一个python专门用来在控制台、命令行输出彩色文字的模块，可以跨平台使用。</p>
<p>安装:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 <span class="keyword">install</span> colorama</div></pre></td></tr></table></figure></p>
<p>可用格式常数:<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Fore:</span> <span class="keyword">BLACK, </span>RED, GREEN, YELLOW, <span class="keyword">BLUE, </span>MAGENTA, CYAN, WHITE, RESET.</div><div class="line"><span class="keyword">Back: </span><span class="keyword">BLACK, </span>RED, GREEN, YELLOW, <span class="keyword">BLUE, </span>MAGENTA, CYAN, WHITE, RESET.</div><div class="line"><span class="symbol">Style:</span> <span class="keyword">DIM, </span><span class="keyword">NORMAL, </span><span class="keyword">BRIGHT, </span>RESET_ALL</div></pre></td></tr></table></figure></p>
<p>跨平台印刷彩色文本可以使用彩色光的常数简称ANSI转义序列:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> colorama import Fore,Back,Style</div><div class="line"><span class="builtin-name">print</span> (Fore.RED + <span class="string">"some red text"</span>)</div><div class="line"><span class="builtin-name">print</span> (Back.GREEN + <span class="string">"and with a green background"</span>)</div><div class="line"><span class="builtin-name">print</span> (Style.DIM + <span class="string">"and in dim text"</span>)</div><div class="line"><span class="builtin-name">print</span> (Style.RESET_ALL)</div><div class="line"><span class="builtin-name">print</span> (<span class="string">"back to normal now!!"</span>)</div></pre></td></tr></table></figure></p>
<p>同样具体用法自行了解。</p>
<blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></blockquote>
<p>在命令行下运行结果如下：<br><img src="http://oxwgzg29g.bkt.clouddn.com/19.png" alt="7"></p>
<p>每次都要输入python3 而且还都要在tickets.py所在目录才能执行这个程序十分的不方便，有没有简便的方法呢？答案是肯定的。</p>
<p>先来看下效果图:</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/20.png" alt="8"></p>
<blockquote>
<h3 id="setup的使用"><a href="#setup的使用" class="headerlink" title="setup的使用"></a>setup的使用</h3></blockquote>
<p>setup依赖于setuptools包，通过<strong>pip3 install setuptools</strong>进行安装。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">from setuptools <span class="built_in">import</span> setup, find_packages </div><div class="line"> </div><div class="line">setup( </div><div class="line"> <span class="attr">name</span> = <span class="string">"test"</span>, </div><div class="line"> <span class="attr">version</span> = <span class="string">"1.0"</span>, </div><div class="line"> <span class="attr">keywords</span> = (<span class="string">"test"</span>, <span class="string">"xxx"</span>), </div><div class="line"> <span class="attr">description</span> = <span class="string">"eds sdk"</span>, </div><div class="line"> <span class="attr">long_description</span> = <span class="string">"eds sdk for python"</span>, </div><div class="line"> <span class="attr">license</span> = <span class="string">"MIT Licence"</span>, </div><div class="line"> </div><div class="line"> <span class="attr">url</span> = <span class="string">"http://test.com"</span>, </div><div class="line"> <span class="attr">author</span> = <span class="string">"test"</span>, </div><div class="line"> <span class="attr">author_email</span> = <span class="string">"test@gmail.com"</span>, </div><div class="line"> </div><div class="line"> <span class="attr">packages</span> = find_packages(), </div><div class="line"> <span class="attr">include_package_data</span> = True, </div><div class="line"> <span class="attr">platforms</span> = <span class="string">"any"</span>, </div><div class="line"> <span class="attr">install_requires</span> = [], </div><div class="line"> </div><div class="line"> <span class="attr">scripts</span> = [], </div><div class="line"> <span class="attr">entry_points</span> = &#123; </div><div class="line">  'console_scripts': [ </div><div class="line">   '<span class="attr">test</span> = test.help:main' </div><div class="line">  ] </div><div class="line"> &#125; </div><div class="line">)</div></pre></td></tr></table></figure></p>
<blockquote>
<p> setup.py各参数介绍：<br>–name 包名称<br>–version (-V) 包版本<br>–author 程序的作者<br>–author_email 程序的作者的邮箱地址<br>–maintainer 维护者<br>–maintainer_email 维护者的邮箱地址<br>–url 程序的官网地址<br>–license 程序的授权信息<br>–description 程序的简单描述<br>–long_description 程序的详细描述<br>–platforms 程序适用的软件平台列表<br>–classifiers 程序的所属分类列表<br>–keywords 程序的关键字列表<br>–packages 需要处理的包目录（包含<strong>init</strong>.py的文件夹）<br>–py_modules 需要打包的python文件列表<br>–download_url 程序的下载地址<br>–cmdclass<br>–data_files 打包时需要打包的数据文件，如图片，配置文件等<br>–scripts 安装时需要执行的脚步列表<br>–package_dir 告诉setuptools哪些目录下的文件被映射到哪个源码包。一个例子：package_dir = {‘’: ‘lib’}，表示“root package”中的模块都在lib 目录中。<br>–requires 定义依赖哪些模块<br>–provides定义可以为哪些模块提供依赖<br>–find_packages() 对于简单工程来说，手动增加packages参数很容易，刚刚我们用到了这个函数，它默认在和setup.py同一目录下搜索各个含有 <strong>init</strong>.py的包。</p>
</blockquote>
<p>–install_requires = [“requests”] 需要安装的依赖包<br>–entry_points 动态发现服务和插件</p>
<p>entry_points 中console_scripts 指明了命令行工具的名称；在“redis_run = RedisRun.redis_run:main”中，等号前面指明了工具包的名称，等号后面的内容指明了程序的入口地址。</p>
<p>当然具体用法还需要自己去理解去实际，这里给出setup的官网，可以参考一下：<br><a href="https://docs.python.org/3/distutils/setupscript.html" target="_blank" rel="external">官方网站</a></p>
<p>我们需要用到的实例<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from setuptools <span class="keyword">import</span> <span class="built_in">setup</span></div><div class="line"></div><div class="line"><span class="built_in">setup</span>(</div><div class="line">    name=<span class="string">'tickets'</span>,</div><div class="line">    py_modules=[<span class="string">'tickets'</span>, <span class="string">'stations'</span>],</div><div class="line">    install_requires=[<span class="string">'requests'</span>, <span class="string">'docopt'</span>, <span class="string">'prettytable'</span>, <span class="string">'colorama'</span>],</div><div class="line">    entry_points=&#123;</div><div class="line">        <span class="string">'console_scripts'</span>: [<span class="string">'tickets=tickets:main'</span>]</div><div class="line">    &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>运行python3 setup.py install 即可。</p>
<p>然后就可以在任何位置使用tickets [-dgktz] <from> <to> <date>进行命令行查票了。</date></to></from></p>
<blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></blockquote>
<p>这个程序不是很难，通过这个程序使我掌握了docopt、prettytable、colorama、setup的使用，感觉收获还是很大的。<br>希望通过这个程序对你也有所提升。</p>
<blockquote>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3></blockquote>
<p>完整代码我放在我的GitHub上了，感兴趣的朋友可以参考一下,记得点star哦！</p>
<p><a href="https://github.com/Tactful-biao/scrapy/tree/master/12306" target="_blank" rel="external">项目地址</a></p>
<blockquote>
<p>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 12306 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[抵御sshd暴力破解]]></title>
      <url>/2017/10/23/%E6%8A%B5%E5%BE%A1sshd%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>最近发现服务器总是连接不上，打开控制台发现CPU一直处于很高的负载状态，导致我正常的连接都连接不上，这时候就该思考一下原因了，我打开系统下/var/log/secure(CentOS7)之后看到了如下画面：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/14.png" alt="1"></p>
<p>大家都知道当你的服务器开启了远程连接服务之后，你的连接就相当于公开了，如果你不添加任何过滤的话，任何人都可以对你的服务器进行连接，当然想要连接成功的话肯定是要秘钥或者密码的。但是如果是密码的话就可以进行暴力枚举，虽然效率很低，但是总会有一些弱密码存在。群众里面有坏人，总有刁民想害朕。<br>我大致浏览了一下服务器日志，发现每天都有大量的连接，有的能够持续好几个小时的尝试登录，这样就导致我的正常登录存在问题。</p>
<p>我是设置了秘钥的，并且禁止了密码登录，但是还是有很多的ip尝试进行密码登录，虽然登录不上，但是一直建立连接也会影响服务器性能，主要是我打算在手机上远程控制服务器，这样的话我是打算把密码验证打开的，所以我要杜绝这种暴力登录的尝试，虽然我对我的密码有信心，但是一想到自己的服务器在一直被别人破解着密码，心里就不是很爽。</p>
<blockquote>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2></blockquote>
<p><a href="https://baike.baidu.com/item/DenyHosts/7529952?fr=aladdin" target="_blank" rel="external">DenyHosts</a> :DenyHosts是Python语言写的一个程序，它会分析sshd的日志文件（/var/log/secure），当发现重 复的攻击时就会记录IP到/etc/hosts.deny文件，从而达到自动屏IP的功能。<br>我们通过给服务器配置和安装DenyHosts把那些尝试破解我们的服务器的ip都添加到hosts.deny中，这样这些ip就不能再对我们进行尝试连接了。</p>
<blockquote>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3></blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="comment">//ncu.dl.sourceforge.net/sourceforge/denyhosts/DenyHosts-2.6.tar.gz</span></div><div class="line">tar -xzvf DenyHosts-<span class="number">2.6</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">cd DenyHosts-<span class="number">2.6</span></div><div class="line">python setup<span class="selector-class">.py</span> install　　  <span class="comment">//安装Denyhost</span></div><div class="line">cd /usr/share/denyhosts/    <span class="comment">//切换目录进入/usr/share/denyhosts目录</span></div><div class="line">cp denyhosts<span class="selector-class">.cfg-dist</span> denyhosts<span class="selector-class">.cfg</span>   <span class="comment">//备份配置文件</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3></blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">vi</span> <span class="selector-tag">denyhosts</span><span class="selector-class">.cfg</span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"> ############ THESE SETTINGS ARE REQUIRED ############</div><div class="line"></div><div class="line">SECURE_LOG = /var/log/secure</div><div class="line"></div><div class="line">HOSTS_DENY = /etc/hosts.deny</div><div class="line"></div><div class="line">PURGE_DENY = <span class="number">1</span>w #过多久后清除已经禁止的，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟</div><div class="line"></div><div class="line">BLOCK_SERVICE  = sshd</div><div class="line"></div><div class="line">DENY_THRESHOLD_INVALID = <span class="number">3</span> #允许无效用户失败的次数</div><div class="line"></div><div class="line">DENY_THRESHOLD_VALID = <span class="number">5</span> #允许普通用户登陆失败的次数</div><div class="line"></div><div class="line">DENY_THRESHOLD_ROOT = <span class="number">5</span> #允许root登陆失败的次数</div><div class="line"></div><div class="line">DENY_THRESHOLD_RESTRICTED = <span class="number">1</span></div><div class="line"></div><div class="line">WORK_DIR = /usr/share/denyhosts/data</div><div class="line"></div><div class="line">SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES</div><div class="line"></div><div class="line">HOSTNAME_LOOKUP=YES</div><div class="line"></div><div class="line">LOCK_FILE = /var/lock/subsys/denyhosts</div><div class="line"></div><div class="line"> ############ THESE SETTINGS ARE OPTIONAL ############</div><div class="line"></div><div class="line">ADMIN_EMAIL = denyhosts@<span class="number">163.</span>com #若有ip被禁用发邮件通知</div><div class="line"></div><div class="line">SMTP_HOST = localhost</div><div class="line"></div><div class="line">SMTP_PORT = <span class="number">25</span></div><div class="line"></div><div class="line">SMTP_FROM = DenyHosts &lt;<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>@localhost&gt;</div><div class="line"></div><div class="line">SMTP_SUBJECT = DenyHosts Report</div><div class="line"></div><div class="line">AGE_RESET_VALID=<span class="number">1</span>d #有效用户登录失败计数归零的时间</div><div class="line"></div><div class="line">AGE_RESET_ROOT=<span class="number">1</span>d #root用户登录失败计数归零的时间</div><div class="line"></div><div class="line">AGE_RESET_RESTRICTED=<span class="number">1</span>d</div><div class="line"></div><div class="line">AGE_RESET_INVALID=<span class="number">10</span>d #无效用户登录失败计数归零的时间</div><div class="line"></div><div class="line">######### THESE SETTINGS ARE SPECIFIC TO DAEMON MODE  ##########</div><div class="line"></div><div class="line">DAEMON_LOG = /var/log/denyhosts</div><div class="line"></div><div class="line">DAEMON_SLEEP = <span class="number">30</span>s</div><div class="line"></div><div class="line">DAEMON_PURGE = <span class="number">1</span>h</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="启动文件配置"><a href="#启动文件配置" class="headerlink" title="启动文件配置"></a>启动文件配置</h3></blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cp daemon-<span class="section">control</span>-dist daemon-<span class="section">control</span></div><div class="line">chown root daemon-<span class="section">control</span></div><div class="line">chmod <span class="number">700</span> daemon-<span class="section">control</span></div><div class="line">./daemon-<span class="section">control</span> start         <span class="comment">//启动DenyHosts</span></div><div class="line"> </div><div class="line">ln -s /usr/share/denyhosts/daemon-<span class="section">control</span> /etc/init.d/denyhosts    <span class="comment">//建立符号链接</span></div><div class="line">chkconfig --add denyhosts　　　　　　　　　　　　　　　　　　　　  <span class="comment">//增加denyhosts服务进程</span></div><div class="line">chkconfig  denyhosts on　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//设置开机启动denyhosts</span></div><div class="line">chkconfig --<span class="type">list</span> denyhosts      <span class="comment">// 查看是否生效</span></div></pre></td></tr></table></figure>
<p>如果显示如下则表示生效：<br><img src="http://oxwgzg29g.bkt.clouddn.com/15.png" alt="3"></p>
<p>到目前为止我们的所有配置都已经配置完成了，我们来看一下日志：<br><img src="http://oxwgzg29g.bkt.clouddn.com/16.png" alt="4"></p>
<p>可以看到这个59.63.188.3的ip尝试暴力登录我们的服务器，在尝试登录5次之后，就被拒绝连接了。<br>我们再来看一下我们的hosts.deny文件：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/17.png" alt="5"></p>
<p>可以在最后看到该IP已经在我们的屏蔽列表里面了。</p>
<blockquote>
<p>文章若有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 解决问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 暴力破解 </tag>
            
            <tag> denyhosts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建自己的网盘 owncloud]]></title>
      <url>/2017/10/16/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%9B%98-owncloud/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>现在网盘，云存储等一些虚拟存储技术越来越发达，但是不是空间受限制就是网速受限制，而且随着网络监管越来越严，自己的数据放在别人那里终究不保险，还动不动就被和谐。既然这样何不自己撘一个网盘？</p>
<p>网盘的搭建并没有大家想的那么难，我们并不需要实现底层的东西，直接利用现成的东西就可以搭建完成。</p>
<blockquote>
<h3 id="自己搭建网盘有什么好处？"><a href="#自己搭建网盘有什么好处？" class="headerlink" title="自己搭建网盘有什么好处？"></a>自己搭建网盘有什么好处？</h3></blockquote>
<ol>
<li>自己的东西用着放心</li>
<li>自己搭建的，网速不受限制</li>
<li>我的地盘，我做主，自己想存什么东西就存什么东西(违法的东西不要存)！</li>
</ol>
<blockquote>
<h3 id="都需要用到哪些东西"><a href="#都需要用到哪些东西" class="headerlink" title="都需要用到哪些东西"></a>都需要用到哪些东西</h3></blockquote>
<ul>
<li>需要有一台服务器(用来存储)</li>
<li><a href="https://baike.baidu.com/item/ownCloud%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1/16116850?fr=aladdin" target="_blank" rel="external">OwnCloud 个人云服务</a></li>
<li>LAMP环境：Linux-Apache-MySQL-PHP</li>
<li><a href="https://baike.baidu.com/item/ssl/320778?fr=aladdin" target="_blank" rel="external">SSL</a>: 安全套接字</li>
</ul>
<p>上面就是我们搭建个人云服务所需要的环境已经一些配置要求，不理解的可以百度，或者给博主留言，这里就不再细讲了。</p>
<blockquote>
<h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2></blockquote>
<h3 id="第一步：选择服务器"><a href="#第一步：选择服务器" class="headerlink" title="第一步：选择服务器"></a>第一步：选择服务器</h3><p>我个人使用的是Digital Ocean上购买的虚拟主机，5$一个月20G SSD，1T流量。个人用我感觉已经够了，当然如果你的需求较高，当然是有更高的配置，同时价钱也会更加的高。如果你想要在Digital Ocean上购买虚拟主机，可以参考我的这篇文章《<a href="http://bbiao.me/2017/07/15/digitalocean%E6%B3%A8%E5%86%8C%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%88%9B%E5%BB%BA/" target="_blank" rel="external">digitalocean注册和虚拟主机的创建</a>》</p>
<p>我选择的是CentOS 7.4 进行搭建的，关于虚拟主机的创建等在这里不再介绍了，在上面提到的文章中都有。我们直接开始配置。</p>
<h3 id="第二步：LAMP-环境的搭建"><a href="#第二步：LAMP-环境的搭建" class="headerlink" title="第二步：LAMP 环境的搭建"></a>第二步：LAMP 环境的搭建</h3><p>连接上服务器之后使用:<font color="Lime">yum update</font></p>
<blockquote>
<h4 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h4></blockquote>
<p>通过yum源进行安装：<font color="Lime">yum -y install httpd</font></p>
<p>然后启动我们的Apache：<font color="Lime">systemctl start httpd.service</font></p>
<p>输入：<font color="Lime"><a href="http://你的服务器的ip地址/" target="_blank" rel="external">http://你的服务器的ip地址/</a></font></p>
<p>可以通过该命令查看你的IP地址：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ip</span> addr show eth0 | grep inet | awk <span class="string">'&#123; print <span class="variable">$2</span>; &#125;'</span> | sed <span class="string">'s/\/.*$//'</span></div></pre></td></tr></table></figure></p>
<p>如果看到如下画面则表示Apache安装成功</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/1.PNG" alt="4"></p>
<p>最后一步是把启动设置为开机自动启动：<font color="Lime">systemctl enable httpd.service</font></p>
<blockquote>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4></blockquote>
<p>使用如下命令：<font color="Lime">yum -y install mariadb-server mariadb</font></p>
<p>重启一下MySQL服务：<font color="Lime">systemctl start mariadb</font></p>
<p>紧接着对MySQL进行一些安全设置：<font color="Lime">mysql_secure_installation</font></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):</div><div class="line">OK, successfully used password, moving on<span class="built_in">..</span>.</div><div class="line"></div><div class="line">Setting the root password ensures that nobody can log into the MariaDB</div><div class="line">root<span class="built_in"> user </span>without the proper authorization.</div><div class="line"></div><div class="line">New password: password</div><div class="line">Re-enter new password: password</div><div class="line">Password updated successfully!</div><div class="line">Reloading privilege tables<span class="built_in">..</span></div><div class="line"> Success!</div></pre></td></tr></table></figure>
<p> 你可以看到上面的这些设置，其中只有在password的地方输入你自己喜欢的密码，其他的地方之间按回车就可以了。</p>
<p>最后一步是把MySQL也写入开机自启:<font color="Lime">systemctl enable mariadb.service</font></p>
<blockquote>
<h4 id="安装PHP-7"><a href="#安装PHP-7" class="headerlink" title="安装PHP 7"></a>安装PHP 7</h4></blockquote>
<p>先导入php 7的安装源：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh <span class="symbol">https:</span>/<span class="regexp">/dl.fedoraproject.org/pub</span><span class="regexp">/epel/epel</span>-release-latest-<span class="number">7</span>.noarch.rpm</div><div class="line">rpm -Uvh <span class="symbol">https:</span>/<span class="regexp">/mirror.webtatic.com/yum</span><span class="regexp">/el7/webtatic</span>-release.rpm</div></pre></td></tr></table></figure></p>
<p>安装php 7：<font color="Lime">yum -y install php70w</font></p>
<p>安装php 7 的一些模板：<font color="Lime">yum -y install php70w-mysql php70w-xml php70w-soap php70w-xmlrpc php70w-mbstring php70w-json php70w-gd php70w-mcrypt</font></p>
<p>查看php的版本: <font color="Lime">php -v</font><br>显示如下，则表示安装成功：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PHP 7.0.24 (cli) (built: Sep 30 2017 10:10:28) ( NTS )</div><div class="line">Copyright (c) 1997-2017 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div><div class="line">    with Zend OPcache v7.0.24, Copyright (c) 1999-2017, by Zend Technologies</div></pre></td></tr></table></figure></p>
<p>重启一下Apache服务：<font color="Lime">systemctl restart httpd.service</font></p>
<blockquote>
<h2 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置SSL证书</h2></blockquote>
<p>大家都知道，无论什么服务安全性永远是第一位，如果不能够提供安全保障，肯定不会有人使用。OwnCloud也是，你的访问必须要能够提供安全保障，才能够使用，所有必须要配置SSL。SSL一般有专门的认证机构，只有这些官方的认证机构认证的网址才会显示正确，当然还有一种就是自认证方式，我自己给我自己认证，我同样能够提供安全连接，但是浏览器是不认的。如果没有域名并且不想通过官方认证的话，我们也可以用，下面我们就使用这种方法进行配置我们的字签名证书：</p>
<blockquote>
<h3 id="第一步：安装mod-ssl"><a href="#第一步：安装mod-ssl" class="headerlink" title="第一步：安装mod_ssl"></a>第一步：安装mod_ssl</h3></blockquote>
<p>安装命令：<font color="Lime">yum -y install mod_ssl</font></p>
<blockquote>
<h3 id="第二步：-创建新证书"><a href="#第二步：-创建新证书" class="headerlink" title="第二步： 创建新证书"></a>第二步： 创建新证书</h3></blockquote>
<p>创建文件夹：<font color="Lime">mkdir /etc/ssl/private</font></p>
<p>修改权限(此文件夹必须严格保密，所以权限设置成这样)：<font color="Lime">chmod 700 /etc/ssl/private</font></p>
<p>创建SSL秘钥和证书文件OpenSSL：<font color="Lime">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt</font></p>
<blockquote>
<ul>
<li>openssl：这是创建和管理OpenSSL证书，密钥和其他文件的基本命令行工具。</li>
<li>req -x509：这指定我们要使用X.509证书签名请求（CSR）管理。“X.509”是SSL和TLS坚持用于密钥和证书管理的公钥基础架构标准。<br>节点：这将告诉OpenSSL跳过使用密码保护证书的选项。当服务器启动时，我们需要Apache无需用户干预才能读取该文件。密码短语会阻止这种情况发生，因为每次重启后都必须输入密码。</li>
<li>days 365：此选项设置证书被认为有效的时间长度。我们在这里设置了一年。</li>
<li>newkey rsa：2048：这指定我们要同时生成一个新的证书和一个新的密钥。我们没有创建在上一步中签署证书所需的密钥，因此我们需要与证书一起创建证书。该rsa:2048部分告诉它制作一个2048位长的RSA密钥。</li>
<li>keyout：此行告诉OpenSSL放置我们正在创建的生成的私钥文件。</li>
<li>out：这告诉OpenSSL放置我们正在创建的证书的位置。</li>
</ul>
</blockquote>
<p>完整的提示列表将如下所示：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Country</span> <span class="selector-tag">Name</span> (<span class="number">2</span> letter code) <span class="selector-attr">[XX]</span><span class="selector-pseudo">:US</span></div><div class="line"><span class="selector-tag">State</span> <span class="selector-tag">or</span> <span class="selector-tag">Province</span> <span class="selector-tag">Name</span> (full name) <span class="selector-attr">[]</span><span class="selector-pseudo">:Example</span></div><div class="line"><span class="selector-tag">Locality</span> <span class="selector-tag">Name</span> (eg, city) <span class="selector-attr">[Default City]</span><span class="selector-pseudo">:Example</span> </div><div class="line"><span class="selector-tag">Organization</span> <span class="selector-tag">Name</span> (eg, company) <span class="selector-attr">[Default Company Ltd]</span><span class="selector-pseudo">:Example</span> <span class="selector-tag">Inc</span></div><div class="line"><span class="selector-tag">Organizational</span> <span class="selector-tag">Unit</span> <span class="selector-tag">Name</span> (eg, section) <span class="selector-attr">[]</span><span class="selector-pseudo">:Example</span> <span class="selector-tag">Dept</span></div><div class="line"><span class="selector-tag">Common</span> <span class="selector-tag">Name</span> (eg, your name or your server's hostname) <span class="selector-attr">[]</span><span class="selector-pseudo">:example.com</span></div><div class="line"><span class="selector-tag">Email</span> <span class="selector-tag">Address</span> <span class="selector-attr">[]</span><span class="selector-pseudo">:webmaster</span>@<span class="selector-tag">example</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p>上面的内容可以不写，一直回车，内容就为空。</p>
<p>您创建的两个文件将被放置在/etc/ssl目录的相应子目录中。</p>
<p>当我们使用OpenSSL时，我们还应该创建一个强大的Diffie-Hellman组<br>接着输入：<font color="Lime">openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</font></p>
<p>由于CentOS 7附带的Apache版本不包括该SSLOpenSSLConfCmd指令，所以我们必须手动将生成的文件附加到我们的自签名证书的末尾.<br>输入：<font color="Lime">cat /etc/ssl/certs/dhparam.pem | sudo tee -a /etc/ssl/certs/apache-selfsigned.crt</font></p>
<blockquote>
<h3 id="第三步：设置证书"><a href="#第三步：设置证书" class="headerlink" title="第三步：设置证书"></a>第三步：设置证书</h3></blockquote>
<p>打开Apache的SSL配置文件：<font color="Lime">vi /etc/httpd/conf.d/ssl.conf</font></p>
<p>找到开头的部分<virtualhost _default_:443="">。我们需要在这里进行一些修改，以确保我们的SSL证书正确地应用到我们的站点。</virtualhost></p>
<p>首先，取消注释DocumentRoot行<br>接下来，取消注释ServerName行，并www.example.com用您的域名或服务器IP地址替换(如下):<br><img src="http://oxwgzg29g.bkt.clouddn.com/2.PNG" alt="5"></p>
<p>把下图中圈出来的地方注释掉：<br><img src="http://oxwgzg29g.bkt.clouddn.com/3.png" alt="6"></p>
<p>找到SSLCertificateFile和SSLCertificateKeyFile，并改变他们在我们所做的目录/etc/httpd/ssl：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SSLCertificateFile <span class="regexp">/etc/</span>ssl<span class="regexp">/certs/</span>apache-selfsigned.crt</div><div class="line">SSLCertificateKeyFile <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>apache-selfsigned.key</div></pre></td></tr></table></figure></p>
<p>如图：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/4.png" alt="7"></p>
<p>在VirtualHost后(配置文件最后)加上如下内容：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Begin copied text</span></div><div class="line"><span class="comment"># from https://cipherli.st/</span></div><div class="line"><span class="comment"># and https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html</span></div><div class="line"></div><div class="line"><span class="attribute">SSLCipherSuite</span> EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH</div><div class="line"><span class="attribute">SSLProtocol</span> <span class="literal">All</span> -SSLv2 -SSLv3</div><div class="line"><span class="attribute">SSLHonorCipherOrder</span> <span class="literal">On</span></div><div class="line"><span class="comment"># Disable preloading HSTS for now.  You can use the commented out header line that includes</span></div><div class="line"><span class="comment"># the "preload" directive if you understand the implications.</span></div><div class="line"><span class="comment">#Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"</span></div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> always set Strict-Transport-Security <span class="string">"max-age=63072000; includeSubdomains"</span></div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> always set X-Frame-Options DENY</div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> always set X-Content-Type-Options nosniff</div><div class="line"><span class="comment"># Requires Apache &gt;= 2.4</span></div><div class="line"><span class="attribute">SSLCompression</span> <span class="literal">off</span> </div><div class="line"><span class="attribute">SSLUseStapling</span> <span class="literal">on</span> </div><div class="line"><span class="attribute">SSLStaplingCache</span> <span class="string">"shmcb:logs/stapling-cache(150000)"</span> </div><div class="line"><span class="comment"># Requires Apache &gt;= 2.4.11</span></div><div class="line"><span class="comment"># SSLSessionTickets Off</span></div></pre></td></tr></table></figure>
<p>完成这些更改后，可以保存并关闭文件。</p>
<blockquote>
<h3 id="修改未加密的虚拟主机文件重定向到HTTPS"><a href="#修改未加密的虚拟主机文件重定向到HTTPS" class="headerlink" title="修改未加密的虚拟主机文件重定向到HTTPS"></a>修改未加密的虚拟主机文件重定向到HTTPS</h3></blockquote>
<p>命令：<font color="Lime">vi /etc/httpd/conf.d/non-ssl.conf</font></p>
<p>加入如下内容：其中如果你有域名就把example.com换成你的域名，这里我们讲一下没有域名的操作：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></div><div class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> www.example.com</div><div class="line">        <span class="attribute">Redirect</span> <span class="string">"/"</span> <span class="string">"https://www.example.com/"</span></div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p>
<p>如下图，改成你自己的IP地址：<br><img src="http://oxwgzg29g.bkt.clouddn.com/6.PNG" alt="8"></p>
<blockquote>
<h3 id="最后一步：激活证书"><a href="#最后一步：激活证书" class="headerlink" title="最后一步：激活证书"></a>最后一步：激活证书</h3></blockquote>
<p>输入：<font color="Lime">apachectl configtest</font></p>
<p>输出如下则表示正确：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">. </span>. .</div><div class="line">Syntax OK</div></pre></td></tr></table></figure>
<p>重新启动Apache服务器以通过以下命令以应用您的更改：<font color="Lime">systemctl restart httpd.service</font></p>
<p>安装防火墙(CentOS 7)：<font color="Lime">yum -y install firewalld</font></p>
<p>启动防火墙：<font color="Lime">systemctl start firewalld</font></p>
<p>打开如下端口：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --add-service=http</span></div><div class="line"><span class="bash">firewall-cmd --add-service=https</span></div><div class="line"><span class="bash">firewall-cmd --runtime-to-permanent</span></div></pre></td></tr></table></figure></p>
<pre><code>输入https://你的IP地址，然后可以看到如图所示：
</code></pre><p><img src="http://oxwgzg29g.bkt.clouddn.com/7.PNG" alt="9"></p>
<p>可以看到提示我们的https不安全，这是因为我们的自签名证书得不到浏览器的承认，但是不影响我们用。</p>
<blockquote>
<h2 id="安装Owncloud"><a href="#安装Owncloud" class="headerlink" title="安装Owncloud"></a>安装Owncloud</h2></blockquote>
<p>前面准备了这么多，都是准备，现在才开始正式安装。。</p>
<p>首先，导入rpm包源：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm --import https:<span class="regexp">//</span>download.owncloud.org<span class="regexp">/download/</span>repositories<span class="regexp">/stable/</span>CentOS_7<span class="regexp">/repodata/</span>repomd.xml.key</div></pre></td></tr></table></figure></p>
<p>使用curl命令下载ownCloud存储库文件：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https:<span class="regexp">//</span>download.owncloud.org<span class="regexp">/download/</span>repositories<span class="regexp">/stable/</span>CentOS_7<span class="regexp">/ce:stable.repo -o /</span>etc<span class="regexp">/yum.repos.d/</span>ownCloud.repo</div></pre></td></tr></table></figure></p>
<p>清空一下缓存：<font color="Lime">yum clean expire-cache</font></p>
<p>输出如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Loaded plugin<span class="variable">s:</span> fastestmirror</div><div class="line">Cleaning repo<span class="variable">s:</span> base ce_production epel extras updates webtatic</div><div class="line"><span class="number">9</span> metadata <span class="keyword">files</span> removed</div></pre></td></tr></table></figure></p>
<p>安装OwnCloud：<font color="Lime">yum -y install owncloud</font></p>
<blockquote>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3></blockquote>
<p>登录数据库：<font color="Lime">mysql -u root -p</font><br>输入你之前设置的MySQL的密码<br>创建数据库：<font color="Lime">CREATE DATABASE owncloud;</font><br>为该数据库设置密码：<font color="Lime">GRANT ALL ON owncloud.* to ‘owncloud’@’localhost’ IDENTIFIED BY ‘set_database_password’;</font><br>其中set_datebase_password设置成你自己喜欢的密码</p>
<p>刷新一下权限：<font color="Lime">FLUSH PRIVILEGES;</font></p>
<p>退出：<font color="Lime">exit</font></p>
<blockquote>
<h3 id="配置Owncloud"><a href="#配置Owncloud" class="headerlink" title="配置Owncloud"></a>配置Owncloud</h3></blockquote>
<pre><code>在浏览器输入： https://你的服务器ip/owncloud
</code></pre><p>如果出现如图所示错误：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/8.PNG" alt="10"></p>
<p>使用如下方法进行处理：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/var/www/html</span></div><div class="line">chown apache owncloud -Rf</div><div class="line">chmod 770 owncloud -Rf</div></pre></td></tr></table></figure></p>
<p>另外设置：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/selinux/config</div><div class="line">将其中<span class="attribute">SELINUX</span>=enforcing</div><div class="line">改为<span class="attribute">SELINUX</span>=disabled</div></pre></td></tr></table></figure>
<p>设置完这些之后需要重启一下服务器</p>
<p>然后刷新刚才的网页就可以看到：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/10.PNG" alt="11"></p>
<p>设置管理员账号和密码：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/11.PNG" alt="12"></p>
<p>紧接着就配置完成了，用你刚刚设置的账号密码进行登录：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/9.PNG" alt="13"></p>
<p>然后你的个人网盘就搭建完成了：</p>
<p><img src="http://oxwgzg29g.bkt.clouddn.com/12.PNG" alt="14"></p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OwnCloud </tag>
            
            <tag> 网盘 </tag>
            
            <tag> LAMP </tag>
            
            <tag> SSL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客迁移]]></title>
      <url>/2017/10/15/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3></blockquote>
<p>网站迁移实属无奈，在新疆上大学，地处新疆限制比较多，首先没法远程连接，服务器登录不上。其次，不能翻墙，在新疆翻墙被定义为暴恐活动。在这里GitHub是被墙了的，CSDN是被墙了的，百度云是被墙了的，网易云课堂是被墙了的！不是说我翻墙是为了访问国外的东西，这些程序员学习几乎算是必备的网站不翻墙都没法进行访问。</p>
<p>ss搭建的梯子，在这里照样没法访问。前几天博客突然没法访问，服务器也ping不通，远程也连接不上，我还以为是服务出问题了。我远程控制家里的电脑(内地)就可以进行连接。</p>
<blockquote>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3></blockquote>
<p>毕竟胳膊拗不过大腿，万般无奈下，博主把博客迁移到了GitHub Page上了。博主通过修改hosts文件，可以在不翻墙的情况下访问GitHub，虽然访问速度很慢，但是勉强能用。</p>
<p>博客通过hexo进行部署，操作简单，可定制性较高，虽然界面没有WordPress华丽，但是作为一个静态博客还是十分优秀的，hexo支持MarkDown，操作十分简单，通过hexo new “文章名” 进行创建文章；hexo g 生成HTML格式的网页；hexo s 对网站进行预览；hexo d 把文章部署到GitHub上。这几天已经把所有文章迁移过来了，原来的服务器已经不用了。</p>
<blockquote>
<h3 id="wordpress-和-hexo-比较"><a href="#wordpress-和-hexo-比较" class="headerlink" title="wordpress 和 hexo 比较"></a>wordpress 和 hexo 比较</h3></blockquote>
<ul>
<li><p>hexo 的可定制性真的很高，我在WordPress上布置的页面、内容都可以同样的进行布置，就是WordPress上时通过鼠标点击，hexo上是通过手工配置。</p>
</li>
<li><p>hexo 更加简洁，WordPress更加华丽。</p>
</li>
<li><p>hexo 搭配GitHub page免费，WordPress搭配服务器收费。</p>
</li>
</ul>
<blockquote>
<h3 id="博客细节"><a href="#博客细节" class="headerlink" title="博客细节"></a>博客细节</h3></blockquote>
<p>首先，博客还是按照迁移之前的模式来的，大同小异，页面主要有首页、关于、标签、归档、萌宠专区、给我留言、碎碎念、搜索九个板块。</p>
<p>hexo创建新界面只需要一条指令: hexo new page “页面名称”</p>
<ul>
<li>首页：网站的大纲</li>
<li>关于：关于我的介绍</li>
<li>标签：文章的标签，可以根据标签来定位感兴趣的文章</li>
<li>归档：对文章的一个统计</li>
<li>萌宠专区：这是我的个人兴趣，对猫咪比较喜欢，创建了这个版块，分享一些可爱的猫咪。</li>
<li>给我留言：这是一个留言板，使用的是国内的畅言，可以通过这个版块给我留言。</li>
<li>碎碎念：这是一个博主用来写一些灵感，吐吐槽的地方。</li>
<li>搜索：这个版块提供了搜索功能，可以对本博客进行快速检索。</li>
</ul>
<p>另外定义了RSS订阅功能，同时附上了四个社交链接，分别是<a href="https://github.com/Tactful-biao/" target="_blank" rel="external">我的GitHub</a><br>、<a href="http://bbiao.me/shibiaosun@gmail.com" target="_blank" rel="external">我的Gmail</a>、<a href="https://twitter.com/bb1208339113" target="_blank" rel="external">我的Twitter</a>、<a href="http://weibo.com/u/2714116747" target="_blank" rel="external">我的微博</a></p>
<p>在头像上面添加了鼠标放上自动旋转的特效，添加了部分友链，开启了背景动画，设置了鼠标点击变成爱心的js。</p>
<p>文章方面设置了总览的时候默认显示30个字，点击阅读更多可以查看全文，文章最后添加了打赏。开启了网站统计，百度分享。文章评论。</p>
<p>还有一些细节方面的优化，比如SEO，网站个性化设置等等…</p>
<blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></blockquote>
<p>折腾了几天了，心中一肚子的气，但更多的是无奈。地区比较特殊，网络管制比较严，在国家面前，个人利益又算的了什么呢？人微言轻，谨言慎行！早日离开这是非之地。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬取《电影天堂》所有电影种子]]></title>
      <url>/2017/09/17/%E7%88%AC%E5%8F%96%E3%80%8A%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E3%80%8B%E6%89%80%E6%9C%89%E7%94%B5%E5%BD%B1%E7%A7%8D%E5%AD%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>相信大家都有到处找资源找种子的经历(不管是什么种子)。为何不自己写一个爬虫把一个网站的所有的种子链接都爬取下来呢？<br>所以接下来我们就通过一个简单的爬虫程序把电影天堂的所有的种子链接爬取下来。</p>
</blockquote>
<hr>
<blockquote>
<h2 id="思路永远是第一步"><a href="#思路永远是第一步" class="headerlink" title="思路永远是第一步"></a>思路永远是第一步</h2></blockquote>
<ol>
<li>首先我们需要分析目标站点，然后依次找到我们需要的内容所在的位置。</li>
<li>然后我们再通过代码对目标内容进行提取</li>
<li>保存到本地</li>
</ol>
<blockquote>
<h3 id="分析目标网站"><a href="#分析目标网站" class="headerlink" title="分析目标网站"></a>分析目标网站</h3></blockquote>
<p>打开目标网址：<a href="http://www.btbtdy.com/screen/0%E2%80%94%E2%80%93time-1.html" target="_blank" rel="external">http://www.btbtdy.com/screen/0—–time-1.html</a>可以看到如下界面：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/14.png" alt="2"></p>
<p>我们的目标是所有的电影，所以我们选择电影栏。电视剧什么的我个人不需要，所以我也就不打算爬取它。以下内容根据自己的情况进行选择：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/15.png" alt="3"></p>
<p>我们查看网站的源代码可以看到，所有的电影详情页的链接都在div下的class为lsit_su下的ul里面的li标签下，但是链接是隐藏了域名的，所以我们在构造链接的时候需要加上前面的部分：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/16.png" alt="4"></p>
<blockquote>
<p>我们打开一个详情页可以看到下载地址，点开下载地址又是另外一个链接：</p>
</blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/17.png" alt="5"></p>
<p>鼠标放在下载地址上面，点击鼠标右键–&gt;检查，直接定位目标所在的源代码，我们可以看到下载页的所在的链接位置。</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/18.png" alt="6"></p>
<p>我们接着点击下载页的链接：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/19.png" alt="7"></p>
<blockquote>
<p>通过上面的三步操作我们找到了我们想要的东西：</p>
<ul>
<li>打开主页 </li>
<li>打开详情页</li>
<li>打开下载链接</li>
</ul>
</blockquote>
<p>我们先按照常规的方法进行爬取，文章最后我们会将一种简单的方法，一步到位的方法。</p>
<blockquote>
<h3 id="构造所有详情页的地址"><a href="#构造所有详情页的地址" class="headerlink" title="构造所有详情页的地址"></a>构造所有详情页的地址</h3></blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"><span class="meta"># encoding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> requests</div><div class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">url = <span class="string">'http://www.btbtdy.com/screen/1-----time-1.html'</span></div><div class="line">html = requests.<span class="built_in">get</span>(url).content</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">content = soup.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'list_su'</span>&#125;)</div><div class="line">pic_link = content.<span class="built_in">find</span>(<span class="string">'ul'</span>).find_all(<span class="string">'li'</span>)</div><div class="line"><span class="built_in">for</span> link in pic_link:</div><div class="line">    a = link.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'liimg'</span>&#125;).<span class="built_in">find</span>(<span class="string">'a'</span>)[<span class="string">'href'</span>]</div><div class="line">    <span class="built_in">print</span>(<span class="string">'http://www.btbtdy.com'</span> + a)</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/20.png" alt="8"></p>
<p>上面的结果是爬取了当前页面的所有的电影的详情页的链接，我们需要爬取的是整个网站所有页的链接，所有我们需要分析它的翻页规则：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>www.btbtdy.com<span class="regexp">/screen/</span><span class="number">1</span>—–time-<span class="number">1</span>.html</div><div class="line">http:<span class="regexp">//</span>www.btbtdy.com<span class="regexp">/screen/</span><span class="number">1</span>—–time-<span class="number">2</span>.html</div><div class="line">…….</div><div class="line">http:<span class="regexp">//</span>www.btbtdy.com<span class="regexp">/screen/</span><span class="number">1</span>—–time-<span class="number">265</span>.html</div></pre></td></tr></table></figure>
<p>总共有265页，每一页唯一的区别就是一个数字的不同，所有我们可以使用一种偷懒的方式，既然我们已经知道它总共有265页，那么我们就可以通过range来手动指定循环的范围。</p>
<p>代码更改如下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"><span class="meta"># encoding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> requests</div><div class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line"><span class="built_in">for</span> i in range(<span class="number">1</span>, <span class="number">266</span>):</div><div class="line">    url = <span class="string">'http://www.btbtdy.com/screen/1-----time-'</span> + str(i) + <span class="string">'.html'</span></div><div class="line">    html = requests.<span class="built_in">get</span>(url).content</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    content = soup.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'list_su'</span>&#125;)</div><div class="line">    pic_link = content.<span class="built_in">find</span>(<span class="string">'ul'</span>).find_all(<span class="string">'li'</span>)</div><div class="line">    <span class="built_in">for</span> link in pic_link:</div><div class="line">        a = link.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'liimg'</span>&#125;).<span class="built_in">find</span>(<span class="string">'a'</span>)[<span class="string">'href'</span>]</div><div class="line">        <span class="built_in">print</span>(<span class="string">'http://www.btbtdy.com'</span> + a)</div></pre></td></tr></table></figure>
<p>运行之后就可以看到所有的详情页都已经被我们构造出来了(由于内容太多，我就截取了一部分)：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/21.png" alt="9"></p>
<blockquote>
<h3 id="解析详情页"><a href="#解析详情页" class="headerlink" title="解析详情页"></a>解析详情页</h3></blockquote>
<p>下面是对详情页进行解析，然后从详情页中提取下载页的链接，可以看到下载链接大致有三种情况(720P，1080P，网盘下载)，我们要做相应的处理，我们分析一下下面这两种情况的源代码：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/22.png" alt="10"></p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/23.png" alt="11"></p>
<p>先来看这个下载地址只有1080P的源代码：<br><img src="http://ovfqn6f2x.bkt.clouddn.com/24.png" alt="12"></p>
<p>再看看下载地址既有720P又有1080P的：<br><img src="http://ovfqn6f2x.bkt.clouddn.com/25.png" alt="13"></p>
<blockquote>
<p><strong>可以看到下载链接所在的位置是相同的，都是class为p_list_02下的ul下的li标签下的a标签内。在最前面的下载地址的链接格式是‘/down/11471-0-0.html’，第二种下载格式为‘/down/11471-1-0.html’，仔细观察这两中下载格式，在/down/后面使用-把数字分成了三部分，每一部分都是有意义的，第一部分是电影的编号，第二部分是用来区分下载方式/down/11471-(0,1,2)-0.html，0表示第一种下载方式，1表示第二种下载方式，2表示第三种下载方式(其中720P，1080P，4K各是一种下载方式)，另外网盘下载是另外的一种方式，网盘下载给出的是网盘的地址，我们不考虑这种情况。第三部分是区分同一种下载方式有几个，比如720P的下载链接给了3个，那么就分别对应/down/11471-0-(0,1,2).html。以上就是下载链接的规则，我们只爬取第一种下载方式，因为每一部电影都会至少给出一种下载的链接，如果是720P的我们就保存720P，是1080P就保存1080P的种子下载页面。</strong></p>
</blockquote>
<hr>
<blockquote>
<h3 id="获取下载链接"><a href="#获取下载链接" class="headerlink" title="获取下载链接"></a>获取下载链接</h3></blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">j</span> in link<span class="variable">s:</span></div><div class="line">    htmls = requests.<span class="built_in">get</span>(<span class="keyword">j</span>).content</div><div class="line">    soups = BeautifulSoup(htmls, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">con</span> = soups.<span class="keyword">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'nucms_downlist'</span>&#125;).<span class="keyword">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'p_list'</span>&#125;).<span class="keyword">find</span>(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'p_list_02'</span>&#125;).<span class="keyword">find</span>(<span class="string">'li'</span>).<span class="keyword">find</span>(<span class="string">'a'</span>)[<span class="string">'href'</span>]</div><div class="line">    <span class="keyword">print</span>(<span class="keyword">con</span>)</div></pre></td></tr></table></figure>
<p>我们在对页面进行爬取的时候，爬取的内容被重定向了，显示的内容不是我们想要的：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/26.png" alt="14"></p>
<p>那么我们该怎样解决这种情况呢？出现这种情况是因为网站加入了反爬虫策略。首先，它的下载链接是异步请求的，主要通过Ajax实现异步请求，大家可以自行去了解ajax是什么，异步请求又是什么。<br>我们可以使用chrome浏览器查看网页源代码，查看Network下的XHR，ajax请求都在这里：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/29.png" alt="15"></p>
<p>点击这个11504.html?timestamp=150606149934的请求可以看到我们需要的链接就在这个请求的Preview里面：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/30.png" alt="16"></p>
<p>再看一下Response的内容，响应的内容就是我们想要的东西，是以HTML格式返回的：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/31.png" alt="17"></p>
<p>我们只需要对这个链接进行请求，然后直接就可以提取我们想要的种子链接。<br>我们可以看到链接是由域名加上电影编号以及一个timestamp参数构成，电影编号是有规律的，电影编号是从1开始的，依次加一。而这个timestamp是一个时刻在变化的参数，它是一个时间戳。关于时间戳的概念大家可以自己去了解。它的这个链接是电影编号加上请求时刻的时间戳。知道规则之后，我们就可以通过相同的方法去构造这种链接。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import <span class="built_in">time</span></div><div class="line"><span class="keyword">from</span> urllib.parse import urlencode</div><div class="line"> </div><div class="line"><span class="keyword">for</span> i <span class="built_in">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</div><div class="line">    ticks = <span class="built_in">time</span>.<span class="built_in">time</span>()</div><div class="line">    timestamp = int(ticks * <span class="number">1000</span>)</div><div class="line">    <span class="built_in">params</span> = &#123;</div><div class="line">        <span class="string">'timestamp'</span>: timestamp</div><div class="line">    &#125;</div><div class="line">    url = <span class="string">'http://www.btbtdy.com/vidlist/'</span> + <span class="built_in">str</span>(i) + <span class="string">'.html?'</span> + urlencode(<span class="built_in">params</span>)</div><div class="line">    print(url)</div></pre></td></tr></table></figure>
<p>这里我们导入了time模块，用来构造时间戳，另外从urllib.parse中导入urlencode对链接进行编码。ticks 会得到时间戳，但是返回的是浮点数（1506064260.6314487），根据链接的格式我们需要构造十三位的时间戳，我们通过对我们构造的时间戳乘以1000再取整得到十三位的时间戳，最后把我们这些东西构造成一个完整的url，打印出来可以看到：<br><img src="http://ovfqn6f2x.bkt.clouddn.com/32.png" alt="18"></p>
<p>从上面运行的结果可以看到，时间戳没有改变，但是我们构造的链接还是可以打开的，通过实际操作我发现它这个timestamp参数并不是严格按照时间戳来的，你只要随便写一个十三位的数字就可以请求成功。<br>这里我们随便点开一个链接可以看到：<br><img src="http://ovfqn6f2x.bkt.clouddn.com/33.png" alt="19"></p>
<p>这里就得到我们想要的东西，我们再从这里提取我们需要的东西就可以了。</p>
<blockquote>
<h3 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h3></blockquote>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># encoding=utf-<span class="number">8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="built_in">time</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">from urllib.parse <span class="keyword">import</span> urlencode</div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(<span class="string">'种子.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">    <span class="keyword">for</span> i <span class="built_in">in</span> range(<span class="number">1</span>, <span class="number">11505</span>):</div><div class="line">        headers = &#123;</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></div><div class="line">        &#125;</div><div class="line">        ticks = <span class="built_in">time</span>.<span class="built_in">time</span>()</div><div class="line">        timestamp = int(ticks * <span class="number">1000</span>)</div><div class="line">        params = &#123;</div><div class="line">            <span class="string">'timestamp'</span>: timestamp</div><div class="line">        &#125;</div><div class="line">        url = <span class="string">'http://www.btbtdy.com/vidlist/'</span> + str(i) + <span class="string">'.html?'</span> + urlencode(params)</div><div class="line">        html = requests.get(url, headers=headers).content</div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        try:</div><div class="line">            <span class="built_in">title</span> = soup.find(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'p_list_02'</span>&#125;).find(<span class="string">'li'</span>).find(<span class="string">'a'</span>)[<span class="string">'title'</span>]</div><div class="line">            seed = soup.find(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'p_list_02'</span>&#125;).find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'d1'</span>&#125;)[<span class="string">'href'</span>]</div><div class="line">            <span class="keyword">data</span> = &#123;</div><div class="line">                <span class="string">'电影名称:'</span>: <span class="built_in">title</span>,</div><div class="line">                <span class="string">'种子链接:'</span>: seed</div><div class="line">            &#125;</div><div class="line">            fp.write(str(<span class="keyword">data</span>)+<span class="string">'\n'</span>)</div><div class="line">            print(<span class="string">'正在下载第%s个种子！'</span> % i)</div><div class="line">        except:</div><div class="line">            pass</div></pre></td></tr></table></figure>
<p>代码运行效果如下：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/34.png" alt="20"></p>
<blockquote>
<h2 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h2></blockquote>
<h3 id="继续分析"><a href="#继续分析" class="headerlink" title="继续分析"></a>继续分析</h3><blockquote>
<p>这是详情页：<a href="http://www.btbtdy.com/btdy/dy11460.html" target="_blank" rel="external">http://www.btbtdy.com/btdy/dy11460.html</a><br>这是下载页：<a href="http://www.btbtdy.com/down/11460-0-0.html" target="_blank" rel="external">http://www.btbtdy.com/down/11460-0-0.html</a></p>
</blockquote>
<p>可以看出来，下载页的链接后面的电影编号跟详情页里面的数字编号是一样的，这样我们就可以通过从详情页中提取电影编号，然后再自己构造下载页，在构造的过程中我发现这个编号是按顺序来的，从1开始，到最新的电影的编号为止，这样我们连主页都不用解析，直接构造下载页面：<br>通过分析下载页面的源代码可以看到，下载页面包括电影名称已经种子链接，我们可以通过下载页面可以直接爬取电影名称以及种子链接：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/27.png" alt="21"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">links = []</div><div class="line"><span class="keyword">for</span> link <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000</span>):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        rel_url = <span class="string">'http://www.btbtdy.com/down/'</span> + str(link) + <span class="string">'-0-0.html'</span></div><div class="line">        html = requests.get(rel_url).content</div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        title = soup.find(<span class="string">'h1'</span>).getText()</div><div class="line">        downlist = soup.find(<span class="string">'form'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">'form2'</span>, <span class="string">'id'</span>: <span class="string">'form2'</span>&#125;).find(<span class="string">'input'</span>)[<span class="string">'value'</span>]</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'电影名称:'</span>: title,</div><div class="line">            <span class="string">'种子链接:'</span>: downlist</div><div class="line">        &#125;</div><div class="line">        print(data)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>上面的代码进行了异常处理，处理的方式就是对异常不处理。运行结果如下：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/28.png" alt="22"></p>
<p>可以看到我们使用上面的21行代码就可以把所有的电影及其种子链接爬取下来。</p>
<blockquote>
<h2 id="保存到本地"><a href="#保存到本地" class="headerlink" title="保存到本地"></a>保存到本地</h2></blockquote>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">links = []</div><div class="line"><span class="keyword">with</span> open(<span class="string">'电影种子.txt'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> fp:</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11471</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            rel_url = <span class="string">'http://www.btbtdy.com/down/'</span> + str(link) + <span class="string">'-0-0.html'</span></div><div class="line">            html = requests.get(rel_url).content</div><div class="line">            soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">            title = soup.find(<span class="string">'h1'</span>).getText()</div><div class="line">            downlist = soup.find(<span class="string">'form'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">'form2'</span>, <span class="string">'id'</span>: <span class="string">'form2'</span>&#125;).find(<span class="string">'input'</span>)[<span class="string">'value'</span>]</div><div class="line">            data = &#123;</div><div class="line">                <span class="string">'电影名称:'</span>: title,</div><div class="line">                <span class="string">'种子链接:'</span>: downlist</div><div class="line">            &#125;</div><div class="line">            fp.write(str(data)+<span class="string">'\n'</span>)</div><div class="line">            print(data)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>这次的爬虫很简单，代码没怎么进行解释，相信大家如果学习过基础知识还是能够看懂的，实在看不懂的可以给我留言，我会解释的。这次的爬虫思路很新奇，思路是十分重要的，特别是在编程上，不同的思路可能给你带来的工作量的差别很大，本次爬虫我采用了两种思路，第一种是普通的思路：从原网页进行解析，一步一步的对目标(下载页面)进行靠拢。这种思路是最简单的思路，当然随着网页的复杂，可能工作量会特别大。第二种思路就是上面用到的思路，因为网页规律性很强，很少会有人给每一个页面进行命名，特别是页面非常多的网站，仔细观察，他们可能区别很小，我们可以直接跳过前面的解析，直接观察目标的特点。
当然这个思路肯定不适合所有的站点，所以大家的思路还是要活一点，同一个问题多思考一下，在思路上多花点时间完全是值得的，不要看到问题就想都不想的去解决，不要把思维固定了。在思路上花时间完全是值得的，另外无论是怎样的思路，一定要清晰，不然只会把自己搞迷。
另外，这里涉及到了一些异步请求，ajax，时间戳的知识，我没有进行介绍，大家可以自己去查询一下。这些东西随着你写的爬虫一步步的强大起来，肯定都会遇到的。
</code></pre></blockquote>
<hr>
<h3 id="项目在我的GitHub上，欢迎查看，记得点star哦！"><a href="#项目在我的GitHub上，欢迎查看，记得点star哦！" class="headerlink" title="项目在我的GitHub上，欢迎查看，记得点star哦！"></a><strong>项目在<a href="https://github.com/Tactful-biao/scrapy" target="_blank" rel="external">我的GitHub</a>上，欢迎查看，记得点star哦！</strong></h3><hr>
<blockquote>
<p>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 网络爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 种子 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬取糗事百科]]></title>
      <url>/2017/09/01/%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天是伟大的九月一号，万千学生的噩梦。吓得我赶紧打打代码压压惊。程序员打代码才是王道。</p>
</blockquote>
<p>废话不多说，开始我们今天的正题：爬取糗事百科，前面两篇文章我们分别学习了Python的requests库和正则表达式，今天我们就用它们来爬去糗事百科，怎样才能更快的学习并掌握编程，当然是做项目啦。很多人都会有这种感觉，自己已经跟着基础教程学完了，为什么做一个项目的时候发现自己还是无从下手。就跟盖房子的一样，刚学完基础教程就相当于以已经有了材料了，但是如果盖房子只是有材料是不够了，你还要知道怎么设计房子，怎样建牢固。这些不可能一下就能够掌握，怎么才能快速掌握呢？多练。 熟能生巧，只有练得多了，自然而然的就会了。</p>
<p>今天，我们来爬去糗事百科<a href="https://www.qiushibaike.com/hot/" target="_blank" rel="external">https://www.qiushibaike.com/hot/</a>，这上面可谓段子手云集。那么我们就来会会这些段子手们。</p>
<blockquote>
<h2 id="先理下思路"><a href="#先理下思路" class="headerlink" title="先理下思路"></a>先理下思路</h2></blockquote>
<p>第一步：分析网页结构(找到我们要爬取的内容所在位置)<br>第二步：解析网页<br>第三步：保存目标内容</p>
<blockquote>
<h3 id="打开目标网址"><a href="#打开目标网址" class="headerlink" title="打开目标网址"></a>打开目标网址</h3></blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/6.png" alt="1"></p>
<p>从图片可以看到，糗事百科的内容有文本也有图片，还有混杂的，这些我们在实际爬取中都要考虑到。首先我们要明确我们要爬取的内容，在这里我们爬去糗事百科的文本内容以及一些图片。</p>
<p>在chrome下按F12可以查看源代码(在文字内容上点击鼠标右键–&gt;检查 可以快速定位HTML位置)：</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/7.png" alt="2"></p>
<p><strong>从上面的源代码中可以看到每条内容都包含在一个单独的class为article block untagged mb15 typs….的div里面，而这所以的内容又包含在id为content-left class为col1的div里，仔细观察可以看到内容所在的标签中class的内容并不是完全一样的，总共有三种，分别是typs_long、type_hot、typs_old。我们再仔细观察一下具体的内容所在的标签以及图片所在的标签位置：</strong></p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/8.png" alt="3"></p>
<p>从上图可以看到内容所在的标签是在class为content的div下面的span中，图片在class为thumb的div下面的a标签下面的img标签。图同圈出来的分别是内容和图片所在标签位置。</p>
<hr>
<blockquote>
<h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3></blockquote>
<p>我们面临这一个问题，因为我们的图片是没法和文字保存在一起的，我们只能把文字放在文本中，图片另外保存，所以我们打算这样做，如果内容中有图片，那么我们就把图片保存下来但是不保存其文字内容，如果没有图片则把文字内容保存下来。下面我们开始实战代码：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">'http://www.qiushibaike.com/hot/'</span></div><div class="line">html = requests.<span class="keyword">get</span>(url).content</div><div class="line"><span class="keyword">return</span> html</div></pre></td></tr></table></figure>
<p>上面的代码我们通过requests库想指定网址发送get请求，获取到指定页面的HTML源代码.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">content = soup.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'article block untagged mb15 typs_long'</span>&#125;)</div><div class="line"><span class="built_in">text</span> = content.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'content'</span>&#125;)</div><div class="line"><span class="built_in">print</span>(<span class="built_in">text</span>.getText())</div></pre></td></tr></table></figure>
<p>运行上面的代码就可以打印出来第一条内容，如果你打印的内容和你网页上当前打印的不一样，不用担心这不是出错，因为糗事百科的内容是一直在更新的，你爬取的是当前最新的内容。<br>上面只实现了爬取一条内容，我们想要的是所有的内容，首先先把当前页的内容爬取下来：<br>通过修改上面的代码我们就可以爬取当前页面所有的class为article block untagged mb15 typs_hot下的所有的文字内容：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">content = soup.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'content-left'</span>, <span class="string">'class'</span>: <span class="string">'col1'</span>&#125;)</div><div class="line">link_lists = content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'article block untagged mb15 typs_hot'</span>&#125;)</div><div class="line"><span class="keyword">for</span> link <span class="built_in">in</span> link_lists:</div><div class="line">    <span class="built_in">text</span> = link.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'content'</span>&#125;)</div><div class="line">    print(<span class="built_in">text</span>.<span class="built_in">getText</span>())</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="处理翻页"><a href="#处理翻页" class="headerlink" title="处理翻页"></a>处理翻页</h3></blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/9.png" alt="4"><br><img src="http://ovfqn6f2x.bkt.clouddn.com/10.png" alt="5"></p>
<p>可以看到页面翻转在class为pagination的ur下的li里面，可以看到最后一个li的内容是下一页，倒数第二个li标签里面才是真正包含总页数的数字，并且不同页面的差别只是最后的数字不同。我们只需要把它提取处理，然后再根据总页数通过循环构造不同页面的链接。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html = requests.get(url).content</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">content = soup.<span class="keyword">find</span>(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'pagination'</span>&#125;)</div><div class="line">links = []</div><div class="line"><span class="keyword">for</span> link in content.find_all(<span class="string">'li'</span>):</div><div class="line">    <span class="keyword">if</span> link.<span class="keyword">find</span>(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'page-numbers'</span>&#125;):</div><div class="line">        nums = link.<span class="keyword">find</span>(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'page-numbers'</span>&#125;)</div><div class="line">        num = nums.<span class="keyword">getText</span>()</div><div class="line">        links.<span class="keyword">append</span>(<span class="keyword">int</span>(num))</div><div class="line"><span class="keyword">print</span>(links[-<span class="number">1</span>])</div></pre></td></tr></table></figure>
<p>通过上面的代码就可以返回总页数，解释一下上面的代码，首先我们通过find查找到所有页数所在的标签，然后通过循环查找该标签下的所有的li子标签，然后我们通过if判断li标签下面是否有class为page-numbers的span，如果存在，则获取该标签下的文本信息，即页码数，然后再把找到的所有的页数转化成int类型之后保存到links列表里面。最后我们就可以通过列表的切片方法把总页数找出来，这种方法可能比较麻烦，这是我目前能够想到的方法，随着以后学习的加深，再慢慢优化吧。当然如果你有什么好的方法，欢迎与博主进行交流。</p>
<blockquote>
<h3 id="构造链接"><a href="#构造链接" class="headerlink" title="构造链接"></a>构造链接</h3></blockquote>
<p>我们得到总页数之后下一步就是通过循环构造每一页的链接，只有最终构造成链接。我们才能进行访问翻页。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">each_pages = []</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">1</span>, link[-<span class="number">1</span>]+<span class="number">1</span>)):</div><div class="line">    each_page = url + <span class="string">'page/'</span> + str(i)</div><div class="line">    each_pages.append(each_page)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(each_pages)</span></span></div></pre></td></tr></table></figure>
<p>上面的代码通过url + ‘page/’ + str(i) 构造出来完成的不同页的链接。通过循环把所有的链接都放在each_pages这个列表里面。</p>
<p>当然在上面我们分析网址源代码的时候发现内容所在的标签有三种，article block untagged mb15 typs_hot、article block untagged mb15 typs_old、article block untagged mb15 typs_long.而我们演示的时间只是抓取了数量最多的hot类型，我们当然不想舍弃数据，虽然old和long的内容不多，但是蚊子腿再细，它也是肉啊，下面我们就来简单介绍一下怎么处理这一块。思路是使用我们上一章刚讲过的正则表达式，通过正则表达式我们就可以把这三个内容筛选出来，然后再使用循环依次去抓取不同标签的内容</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">url = <span class="string">'http://www.qiushibaike.com/hot/'</span></div><div class="line">html = requests.get(url).content</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">pattern = re.<span class="keyword">compile</span>(<span class="string">'article block untagged mb15 typs_\w+'</span>)</div><div class="line">content = soup.<span class="keyword">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'content-left'</span>, <span class="string">'class'</span>: <span class="string">'col1'</span>&#125;)</div><div class="line">attrs  = re.<span class="keyword">findall</span>(pattern, str(soup))</div><div class="line"><span class="keyword">print</span>(set(attrs))</div></pre></td></tr></table></figure>
<p>通过上面的代码就可以把三个不同的标签内容筛选出来。首先我们通过re.compile()写出我们需要找的标签长什么样子，观察可以发现，我们要找的标签前面article block untagged mb15 typs_都是一样的，唯一的区别就在后的一点点，而后面又都是字母，我们可以使用\w+进行统配，具体使用可以参考我的这篇文章《正则表达式》。然后通过re.findall(pattern, string[, flags])进行全文匹配，而匹配的全文就是我们通过BeautifulSoup获得的HTML源代码，这里我们需要使用str()函数，把源代码转化成字符串的格式，这样才能进行查找。但是由于全文中可能有很多同样的标签，这样就会抓到很多重复的，我们可以通过set()进行去重，set()的用法这里不再说了，不了解的可以给博主留言，最终就可以筛选出来我们想要的内容。</p>
<blockquote>
<h2 id="最后一步-图文分离"><a href="#最后一步-图文分离" class="headerlink" title="最后一步 图文分离"></a>最后一步 图文分离</h2></blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/11.png" alt="6"></p>
<p>可以看到，每一个文章链接下都有一个图片的模块，但是真正有图片的内容多了个模块class为thumb的div，这里面放着图片。我们就可以通过它来判断是否有图片，如果有图片，我们就保存图片，如果没有图片，我们就保存内容。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import codecs</div><div class="line"> </div><div class="line"><span class="keyword">with</span> codecs.open(<span class="string">'duanzi'</span>, <span class="string">'wb'</span>, <span class="string">'utf-8'</span>) as fp:</div><div class="line">    n = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="built_in">in</span> url:</div><div class="line">        html = get_html(i)</div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        content = soup.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'content-left'</span>, <span class="string">'class'</span>: <span class="string">'col1'</span>&#125;)</div><div class="line">        text_lists = []</div><div class="line">        <span class="keyword">for</span> attr <span class="built_in">in</span> <span class="built_in">set</span>(re.findall(pattern, <span class="built_in">str</span>(soup))):</div><div class="line">            <span class="keyword">for</span> text_list <span class="built_in">in</span> content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: attr&#125;):</div><div class="line">                <span class="keyword">if</span> text_list.<span class="built_in">find</span>(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'thumb'</span>&#125;):</div><div class="line">                    img_link = text_list.<span class="built_in">find</span>(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'thumb'</span>&#125;)</div><div class="line">                    img = img_link.<span class="built_in">find</span>(<span class="string">'img'</span>)[<span class="string">'src'</span>]</div><div class="line">                    rel_img = <span class="string">'https:'</span> + img</div><div class="line">                    print(<span class="string">'正在下载第%s张图片'</span> % n)</div><div class="line">                    filename = (<span class="string">'第%s张.jpg'</span> % n)</div><div class="line">                    <span class="keyword">with</span> open(filename, <span class="string">'wb+'</span>) as jpg:</div><div class="line">                        jpg.write(requests.get(rel_img).content)</div><div class="line">                    n += <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="built_in">text</span> = text_list.<span class="built_in">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'content'</span>&#125;).<span class="built_in">find</span>(<span class="string">'span'</span>).<span class="built_in">getText</span>()</div><div class="line">                    text_lists.<span class="built_in">append</span>(<span class="built_in">text</span>)</div><div class="line">        fp.write(<span class="string">'&#123;duanzi&#125;'</span>.<span class="built_in">format</span>(duanzi=<span class="string">'\n'</span>.<span class="built_in">join</span>(text_lists)))</div></pre></td></tr></table></figure>
<p>以上就是所有的内容，运行后的结果如下：<br>都是些什么鬼图 </p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/12.png" alt="7"></p>
<p>打开我们的文本内容，可以看到所有的段子也都已经抓取下来了。</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/13.png" alt="8"></p>
<blockquote>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding=utf-8</span></div><div class="line"><span class="comment">### 时间 2017-9-1 ###</span></div><div class="line"><span class="comment">### 项目地址：https://github.com/Tactful-biao/scrapy</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> codecs</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line">__author__ = <span class="string">'sunshibiao'</span></div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">'article block untagged mb15 typs_\w+'</span>)</div><div class="line">url = <span class="string">'http://www.qiushibaike.com/hot/'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="string">''' 获取html '''</span></div><div class="line">    html = requests.get(url).content</div><div class="line">    <span class="keyword">return</span> html</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_list</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="string">''' 构造所有的页面 '''</span></div><div class="line"> </div><div class="line">    next_page_url = url</div><div class="line">    html = get_html(next_page_url)</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    content = soup.find(<span class="string">'ul'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'pagination'</span>&#125;)</div><div class="line">    links = []</div><div class="line">    each_pages = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content.find_all(<span class="string">'li'</span>):</div><div class="line">        <span class="keyword">if</span> i.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'page-numbers'</span>&#125;):</div><div class="line">            nums = i.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'page-numbers'</span>&#125;)</div><div class="line">            num = nums.getText()</div><div class="line">            links.append(int(num))</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> range(<span class="number">1</span>, links[<span class="number">-1</span>]+<span class="number">1</span>):</div><div class="line">        each_page = next_page_url + <span class="string">'page/'</span> + str(link)</div><div class="line">        each_pages.append(each_page)</div><div class="line">    <span class="keyword">return</span> each_pages</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_text_or_pic</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="string">''' 获取文本内容并写入文件, 如果是图片就保存图片 '''</span></div><div class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'duanzi'</span>, <span class="string">'wb'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">        n = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> url:</div><div class="line">            html = get_html(i)</div><div class="line">            soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">            content = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'content-left'</span>, <span class="string">'class'</span>: <span class="string">'col1'</span>&#125;)</div><div class="line">            text_lists = []</div><div class="line">            <span class="keyword">for</span> attr <span class="keyword">in</span> set(re.findall(pattern, str(soup))):</div><div class="line">                <span class="keyword">for</span> text_list <span class="keyword">in</span> content.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: attr&#125;):</div><div class="line">                    <span class="keyword">if</span> text_list.find(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'thumb'</span>&#125;):</div><div class="line">                        img_link = text_list.find(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'thumb'</span>&#125;)</div><div class="line">                        img = img_link.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</div><div class="line">                        rel_img = <span class="string">'https:'</span> + img</div><div class="line">                        print(<span class="string">'正在下载第%s张图片'</span> % n)</div><div class="line">                        filename = (<span class="string">'第%s张.jpg'</span> % n)</div><div class="line">                        <span class="keyword">with</span> open(filename, <span class="string">'wb+'</span>) <span class="keyword">as</span> jpg:</div><div class="line">                            jpg.write(requests.get(rel_img).content)</div><div class="line">                        n += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        text = text_list.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'content'</span>&#125;).find(<span class="string">'span'</span>).getText()</div><div class="line">                        text_lists.append(text)</div><div class="line">            fp.write(<span class="string">'&#123;duanzi&#125;'</span>.format(duanzi=<span class="string">'\n'</span>.join(text_lists)))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  get_text_or_pic(get_page_list(get_html(url)))</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="项目地址：https-github-com-Tactful-biao-scrapy-如果对你有帮助，记得点个Star哦。"><a href="#项目地址：https-github-com-Tactful-biao-scrapy-如果对你有帮助，记得点个Star哦。" class="headerlink" title="项目地址：https://github.com/Tactful-biao/scrapy 如果对你有帮助，记得点个Star哦。"></a>项目地址：<a href="https://github.com/Tactful-biao/scrapy" target="_blank" rel="external">https://github.com/Tactful-biao/scrapy</a> 如果对你有帮助，记得点个Star哦。</h2></blockquote>
<hr>
<blockquote>
<h3 id="文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"><a href="#文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。" class="headerlink" title="文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"></a>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</h3></blockquote>
]]></content>
      
        <categories>
            
            <category> 网络爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> requests </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>/2017/08/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>很多语言都支持正则表达式，而正则表达式是爬虫中经常需要使用的，所以我们在这里介绍一下在Python中怎样使用正则表达式。</p>
<blockquote>
<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2></blockquote>
<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组合一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。它能帮助你方便的检查一个字符串是否与某种模式匹配<br>正则表达式的大致匹配过程：</p>
<ol>
<li>依次拿出表达式和文本的字符比较</li>
<li>如果每一个字符都能够匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。</li>
<li>如果表达式中有量词或边界，这个过程会稍微有一些不同</li>
</ol>
<blockquote>
<h2 id="正则表达式的语法规则"><a href="#正则表达式的语法规则" class="headerlink" title="正则表达式的语法规则"></a>正则表达式的语法规则</h2></blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/1.jpg" alt="1"></p>
<blockquote>
<h2 id="re-模块"><a href="#re-模块" class="headerlink" title="re 模块"></a>re 模块</h2></blockquote>
<p>Python的re模块让Python拥有了全部的正则表达式的功能，re常见的方法列举如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 返回<span class="selector-tag">pattern</span>对象</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.compile</span>(<span class="selector-tag">string</span><span class="selector-attr">[,flag]</span>)</div><div class="line"># 下面的是用来匹配的函数</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.match</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.search</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.split</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, maxsplit]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.findall</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.finditer</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.sub</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">repl</span>, <span class="selector-tag">string</span><span class="selector-attr">[, count]</span>)</div><div class="line"><span class="selector-tag">re</span><span class="selector-class">.subn</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">repl</span>, <span class="selector-tag">string</span><span class="selector-attr">[, count]</span>)</div></pre></td></tr></table></figure></p>
<p>compile函数根据模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换，其中compile会返回一个pattern对象。</p>
<p>compile(pattern[,flags]) 根据包含正则表达式的字符串创建模式对象。<br>可以先使用Python的help函数查看compile的介绍：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"><span class="function"><span class="title">help</span><span class="params">(re.compile)</span></span></div></pre></td></tr></table></figure></p>
<p>返回如下内容：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">compile</span><span class="params">(pattern, flags=<span class="number">0</span>)</span></span></div><div class="line">Compile <span class="selector-tag">a</span> regular expression pattern, returning <span class="selector-tag">a</span> pattern <span class="selector-tag">object</span>.</div></pre></td></tr></table></figure></p>
<p>可以看到返回了一个pattern对象，但是却没有对第二个对象flags进行介绍。第二个参数flags是匹配模式，可以使用按位或’ |’表示同时生效(例如：re.I | re.M)，也可以在正则表达式字符串中指定。pattern对象是不能直接实例化的，只能通过compile方法得到。匹配模式有：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>）re.I(re.IGNORECASE) :忽略大小写</div><div class="line"><span class="number">2</span>）re.M(re.MULTILINE) :多行模式，改变‘ ^’和’ $’的行为</div><div class="line"><span class="number">3</span>）re.S(DOTALL) : 点任意匹配模式，改变’ .’的行为</div><div class="line"><span class="number">4</span>）re.L(LOCALL) : 使预定字符类 <span class="string">\w</span> <span class="string">\W</span> <span class="string">\b</span> <span class="string">\B</span> <span class="string">\s</span> <span class="string">\S</span> 取决于当前区域设定</div><div class="line"><span class="number">5</span>).re.U(UNICODE): 使预定字符类 <span class="string">\w</span> <span class="string">\W</span> <span class="string">\b</span> <span class="string">\B</span> <span class="string">\s</span> <span class="string">\S</span> <span class="string">\d</span> <span class="string">\D</span> 取决于unicode定义的字符属性</div><div class="line"><span class="number">6</span>).re.X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释</div></pre></td></tr></table></figure></p>
<p>通过compile函数返回的pattern之后，我们就可以使用匹配函数进行匹配了:</p>
<blockquote>
<h3 id="re-match-模块"><a href="#re-match-模块" class="headerlink" title="re.match 模块"></a>re.match 模块</h3></blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.<span class="keyword">match</span>(<span class="built_in">pattern</span>, string[, flags])</div></pre></td></tr></table></figure>
<p>re.match函数会尝试从字符串的其实位置匹配一个模式，如果不是起始位置匹配成功的话，match()就会返回None。</p>
<p>参数介绍：</p>
<blockquote>
<p>参数 描述<br>pattern 要匹配的正则表达式<br>string 要匹配的字符串</p>
<h2 id="flags-标志位，用于控制正则表达式的匹配方式"><a href="#flags-标志位，用于控制正则表达式的匹配方式" class="headerlink" title="flags 标志位，用于控制正则表达式的匹配方式"></a>flags 标志位，用于控制正则表达式的匹配方式</h2><p>我们可以使用grup(num) 或 groups()匹配对象函数来匹配表达式：<br>匹配对象方法 描述<br>group(num=0) 匹配的整个 表达式的字符串，group()可以一次输入多个组号，<br>在这种情况下它将返回一个包含哪些组所对应值的元组。<br>groups() 返回一个包含所有小组的字符串的元组，从1到所含的小组号。<br>下面我们举个简单的例子：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'bbiao'</span>)</div><div class="line">print(re.match(pattern, <span class="string">'bbiao'</span>).group())   <span class="comment"># 在起始位置匹配</span></div><div class="line">print(re.match(pattern, <span class="string">'www.bbiao.me'</span>))   <span class="comment"># 不在起始位置匹配</span></div><div class="line">print(re.match(pattern, <span class="string">'bbiao.me'</span>).group())</div></pre></td></tr></table></figure>
<p>上面的代码运行结果如下：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bbiao</span></div><div class="line"><span class="keyword">None</span></div><div class="line"><span class="keyword">bbiao</span></div></pre></td></tr></table></figure>
<p>从上面的例子可以看到，第一个print返回了我们要匹配的字符串，这个毫无疑问，因为它和我们的字符串完全一样，所有肯定会匹配。</p>
<p>第二个print虽然也包含我们的目标字符串，但是它不在首位，re.match函数是从首位开始进行匹配的，如果首位不匹配就不进行匹配了，会返回None，这里不给它加group是因为 ‘NoneType’ object has no attribute ‘group’。</p>
<p>第三个也匹配成功了，因为它同样包含我们的目标字符串，并且它也在首位，这样当我们匹配到最后一个字母‘o’之后就不在继续进行匹配了，并且返回匹配成功的信息。</p>
<p>match对象是一次匹配的结果，包含很多关于此次匹配的信息，可以使用如下属性或方法来获取这些信息：</p>
<blockquote>
<p>属性<br>1、 string：匹配时使用的文本。<br>2、 re：匹配时使用的pattern对象<br>3、 pos： 文本中正则表达式开始搜索的索引。值与pattern.match()和pattern.search()方法同名参数相同。<br>4、 endpos: 文本中正则表达式结束搜索的索引。 值与pattern.match()和和pattern.search()方法同名参数相同。<br>5、 lastindex：最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。<br>6、 lastgroup：最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None/</p>
</blockquote>
<hr>
<blockquote>
<p>方法</p>
<ol>
<li>group([default]):<br>获得一个或多个分组截获的字符串；指定多个参数时将元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</li>
<li>groups([default]):<br>以元组形式返回全部分组截获的字符串。相当于调用group(1, 2, ….last)。default表示没有截获字符串的组以这个值替代，默认为None。</li>
<li>groupdict([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</li>
<li>start([group]):<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0.</li>
<li>end([group]):<br>返回指定的组截获的子串在string中的结束索引（子串第一个字符的索引+1）。group默认值为0.</li>
<li>span([group]):<br>返回(start(group), end(group))</li>
<li>expand(template):<br>将匹配到的分组带入template中然后返回。template可以使用\id或\g、\g引用分组，但不能使用编号0.\id与\g等价；但\10将被认为是第10个分组，如果你想表达\1之后是字符’ 0’，只能使用\g0<br>下面再来看一看的例子</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">line = <span class="string">"Cats are smarter than dogs"</span></div><div class="line"> </div><div class="line">matchobj = re.match(<span class="string">r'(.*) are (.*?) .*'</span>, line, re.M | re.I)</div><div class="line"> </div><div class="line"><span class="keyword">if</span> matchobj:</div><div class="line">    print(<span class="string">'matchobj.sting:'</span>, matchobj.string)</div><div class="line">    print(<span class="string">'matchobj.re:'</span>, matchobj.re)</div><div class="line">    print(<span class="string">'matchobj.pos:'</span>, matchobj.pos)</div><div class="line">    print(<span class="string">'matchobj.endpos:'</span>, matchobj.endpos)</div><div class="line">    print(<span class="string">'matchobj.lastindex:'</span>, matchobj.lastindex)</div><div class="line">    print(<span class="string">'matchobj.lastgroup:'</span>, matchobj.lastgroup)</div><div class="line">    print(<span class="string">'matchobj.group() :'</span>, matchobj.group())</div><div class="line">    print(<span class="string">'matchobj.group(1):'</span>, matchobj.group(<span class="number">1</span>))</div><div class="line">    print(<span class="string">'matchobj.group(2)'</span>, matchobj.group(<span class="number">2</span>))</div><div class="line">    print(<span class="string">'matchobj.groups():'</span>, matchobj.groups())</div><div class="line">    print(<span class="string">'matchobj.groupdict():'</span>, matchobj.groupdict())</div><div class="line">    print(<span class="string">'matchobj.start:(2)'</span>, matchobj.start(<span class="number">2</span>))</div><div class="line">    print(<span class="string">'matchobj.end:(2)'</span>, matchobj.end(<span class="number">2</span>))</div><div class="line">    print(<span class="string">'matchobj.span:(2)'</span>, matchobj.span(<span class="number">2</span>))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'No match!!'</span>)</div></pre></td></tr></table></figure>
<p>代码运行结果：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.sting</span>: <span class="selector-tag">Cats</span> <span class="selector-tag">are</span> <span class="selector-tag">smarter</span> <span class="selector-tag">than</span> <span class="selector-tag">dogs</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.re</span>: <span class="selector-tag">re</span><span class="selector-class">.compile</span>(<span class="string">'(.*) are (.*?) .*'</span>, re.IGNORECASE|re.MULTILINE)</div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.pos</span>: <span class="selector-tag">0</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.endpos</span>: <span class="selector-tag">26</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.lastindex</span>: <span class="selector-tag">2</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.lastgroup</span>: <span class="selector-tag">None</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.group</span>() : <span class="selector-tag">Cats</span> <span class="selector-tag">are</span> <span class="selector-tag">smarter</span> <span class="selector-tag">than</span> <span class="selector-tag">dogs</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.group</span>(<span class="number">1</span>): <span class="selector-tag">Cats</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.group</span>(<span class="number">2</span>) <span class="selector-tag">smarter</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.groups</span>(): (<span class="string">'Cats'</span>, <span class="string">'smarter'</span>)</div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.groupdict</span>(): &#123;&#125;</div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.start</span><span class="selector-pseudo">:(2)</span> <span class="selector-tag">9</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.end</span><span class="selector-pseudo">:(2)</span> <span class="selector-tag">16</span></div><div class="line"><span class="selector-tag">matchobj</span><span class="selector-class">.span</span><span class="selector-pseudo">:(2)</span> (<span class="number">9</span>, <span class="number">16</span>)</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-search-模块"><a href="#re-search-模块" class="headerlink" title="re.search 模块"></a>re.search 模块</h3></blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">re</span><span class="selector-class">.search</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div></pre></td></tr></table></figure>
<p>search方法与match方法十分相似，区别在于match()函数只检测re是不是在string的开始位置匹配，search()会扫描整个string查找匹配，match()只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match()就返回None。同样，search方法的返回对象同样match()返回同样的方法和属性。举个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'world'</span>)</div><div class="line">match = re.search(pattern, <span class="string">'hello world!'</span>)</div><div class="line"><span class="keyword">if</span> match:</div><div class="line">    print(match.group())</div></pre></td></tr></table></figure>
<p>上面的代码运行结果是(代码很简单，参考上面的，match可以很容易理解，这里不做解释了)：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">world</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-splite-模块"><a href="#re-splite-模块" class="headerlink" title="re.splite 模块"></a>re.splite 模块</h3></blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.<span class="built_in">split</span>(<span class="built_in">pattern</span>, string[, maxsplit])</div></pre></td></tr></table></figure>
<p>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割，我们同样举个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">print(re.split(pattern, <span class="string">'one1two2three3four'</span>))</div></pre></td></tr></table></figure></p>
<p>输出</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'one</span>', <span class="symbol">'two</span>', <span class="symbol">'three</span>', <span class="symbol">'four</span>']</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-findall-模块"><a href="#re-findall-模块" class="headerlink" title="re.findall 模块"></a>re.findall 模块</h3></blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">re</span><span class="selector-class">.findall</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div></pre></td></tr></table></figure>
<p>搜索string， 以列表形式返回全部能匹配的子串。举例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line">print(re.findall(pattern, <span class="string">'one1two2three3four4'</span>))</div></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'1</span>', <span class="symbol">'2</span>', <span class="symbol">'3</span>', <span class="symbol">'4</span>']</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-finditerl模块"><a href="#re-finditerl模块" class="headerlink" title="re.finditerl模块"></a>re.finditerl模块</h3></blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">re</span><span class="selector-class">.finditerl</span>(<span class="selector-tag">pattern</span>, <span class="selector-tag">string</span><span class="selector-attr">[, flags]</span>)</div></pre></td></tr></table></figure>
<p>搜索string，返回一个顺序访问每一个匹配结果(Match对象)的迭代器。例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(pattern, <span class="string">'one1two2three3four4'</span>):</div><div class="line">    print(m.group(),)</div></pre></td></tr></table></figure></p>
<p>输出结果 </p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-sub模块"><a href="#re-sub模块" class="headerlink" title="re.sub模块"></a>re.sub模块</h3></blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.sub(pattern, repl, <span class="built_in">string</span>[, <span class="built_in">count</span>])</div></pre></td></tr></table></figure>
<p>使用repl替换string中每一个匹配的子串后返回替换后的字符串。当repl是一个字符串时，可以使用\id或\g、\g引用分组，但不能使用编号0.<br>当repl是一个方法时，这个方法应当只接受一个参数(Match对象)，并返回一个字符串用于替换(返回的字符串中不能再引用分组)。<br>count用于指定最多替换次数不指定时全部替换。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</div><div class="line">s = <span class="string">'i say, hello word!'</span></div><div class="line"> </div><div class="line">print(re.sub(pattern, <span class="string">r'\2 \1'</span>, s))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</div><div class="line"> </div><div class="line">print(re.sub(pattern, func, s))</div></pre></td></tr></table></figure></p>
<p>输出结果</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">say</span> i, <span class="built_in">word</span> hello!</div><div class="line">I Say, Hello Word!</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="re-subn"><a href="#re-subn" class="headerlink" title="re.subn"></a>re.subn</h3></blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re.subn(pattern, repl, <span class="built_in">string</span>[, <span class="built_in">count</span>])</div></pre></td></tr></table></figure>
<p>返回(sub(repl, string[, count]), 替换次数)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</div><div class="line">s = <span class="string">'i say, hello world!'</span></div><div class="line"> </div><div class="line">print(re.subn(pattern, <span class="string">r'\2 \1'</span>, s))</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="keyword">return</span> m.gtoup(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</div><div class="line"> </div><div class="line">print(re.subn(pattrtn, func, s))</div></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="symbol">'say</span> i, world hello!', <span class="number">2</span>)</div><div class="line">(<span class="symbol">'I</span> Say, Hello World!', <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="Python-Re模块的另一种使用方式"><a href="#Python-Re模块的另一种使用方式" class="headerlink" title="Python Re模块的另一种使用方式"></a>Python Re模块的另一种使用方式</h3></blockquote>
<p>在上面我们介绍了7个工具方法，例如match，search等等，不过调用方式都是 re.match，re.search的方式，其实还有另外一种调用方式，可以通过pattern.match，pattern.search调用，这样调用便不用将pattern作为第一个参数传入了，大家想怎样调用皆可。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">search</span>(<span class="built_in">string</span>[, pos[, endpos]]) | re.<span class="built_in">search</span>(pattern, <span class="built_in">string</span>[, flags])</div><div class="line"><span class="keyword">split</span>(<span class="built_in">string</span>[, maxsplit]) | re.<span class="keyword">split</span>(pattern, <span class="built_in">string</span>[, maxsplit])</div><div class="line">findall(<span class="built_in">string</span>[, pos[, endpos]]) | re.findall(pattern, <span class="built_in">string</span>[, flags])</div><div class="line">finditer(<span class="built_in">string</span>[, pos[, endpos]]) | re.finditer(pattern, <span class="built_in">string</span>[, flags])</div><div class="line">sub(repl, <span class="built_in">string</span>[, <span class="built_in">count</span>]) | re.sub(pattern, repl, <span class="built_in">string</span>[, <span class="built_in">count</span>])</div><div class="line">subn(repl, <span class="built_in">string</span>[, <span class="built_in">count</span>]) |re.sub(pattern, repl, <span class="built_in">string</span>[, <span class="built_in">count</span>])</div></pre></td></tr></table></figure></p>
<p>选择哪一种都可以。正则表达式的内容大致就这么多，想要掌握唯一的方法就是多加练习。</p>
<p>参考：<a href="http://cuiqingcai.com/977.html" target="_blank" rel="external">http://cuiqingcai.com/977.html</a></p>
<blockquote>
<p>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫神器 ——requests]]></title>
      <url>/2017/08/30/%E7%88%AC%E8%99%AB%E7%A5%9E%E5%99%A8-%E2%80%94%E2%80%94requests/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天我们来介绍一下requests库，这可是python在爬虫方面的神器，有了它在使用python进行爬虫方面的操作的时候简直不能太爽。requests号称“HTTP for Human”，它的功能十分强大，而它的操作却十分简单。</p>
</blockquote>
<p>python提供的http库有很多，包括自带的urllib和urllib2都提供了强大的HTTP支持，但是API借口太难用了，requests就简单很多。</p>
<blockquote>
<h2 id="requests库安装"><a href="#requests库安装" class="headerlink" title="requests库安装"></a>requests库安装</h2></blockquote>
<p>可以使用下面的方法进行安装：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> requests</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="requests的使用方法："><a href="#requests的使用方法：" class="headerlink" title="requests的使用方法："></a>requests的使用方法：</h2></blockquote>
<h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">r = request.get(<span class="string">'http://bbiao.me'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(type(r)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.status_code)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.encoding)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.coolies)</span></span></div></pre></td></tr></table></figure>
<p>上面的代码运行后得到如下结果：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;class 'requests.models.Response'&gt;</span></div><div class="line"><span class="attribute">200</span></div><div class="line"><span class="attribute">UTF</span>-8</div><div class="line"><span class="section">&lt;RequestsCookieJar[]&gt;</span></div></pre></td></tr></table></figure>
<p>只需要使用上面的代码就可以获得一个网址的类型、状态码、编码、cookies等内容，是不是很方便呢？后面还有更方便的呢。</p>
<p>除了get请求，基本请求有以下几种：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">r</span> = requests.post(<span class="string">'http://httpbin.org/post'</span>)</div><div class="line"><span class="attr">r</span> = requests.put(<span class="string">'http://httpbin.org/put'</span>)</div><div class="line"><span class="attr">r</span> = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</div><div class="line"><span class="attr">r</span> = requests.hrad(<span class="string">'http://httpbin.orh/head'</span>)</div><div class="line"><span class="attr">r</span> = request.options(<span class="string">"http://httpbin.org/get"</span>)</div></pre></td></tr></table></figure></p>
<p>针对不同的请求同样只需要一句话就可以。</p>
<p>在爬虫的使用过程中最常用的就是get请求方法，当然GET请求方法就使用get方法。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">r</span> = requests.get(<span class="string">'http://bbiao.me'</span>)</div></pre></td></tr></table></figure>
<p>如果请求的时候想加上参数，可以使用params参数：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>, <span class="string">'value2'</span>&#125;</div><div class="line">r = requests.<span class="built_in">get</span>(<span class="string">'http://bbiao.me/get'</span>, params=payload)</div><div class="line"><span class="built_in">print</span>(r.url)</div></pre></td></tr></table></figure>
<p>运行的话请求的url就是：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//bbiao.me/get?key2=value2&amp;key1=value1</span></div></pre></td></tr></table></figure>
<p>当我们写爬虫的时候有时候需要我们构造请求，有很多的参数需要我们构造，这时候我们就可以把这些参数写入一个列表或者json文件里面：<br>例如写一个json文件命名为a.json，内容如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"foo"</span>, <span class="string">"bar"</span>, &#123;</div><div class="line">    <span class="attr">"foo"</span>: <span class="string">"bar"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>使用requests进行解析：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">r = requests.<span class="builtin-name">get</span>(<span class="string">"a.json"</span>)</div><div class="line"><span class="builtin-name">print</span>(r.text)</div><div class="line"><span class="builtin-name">print</span>(r.json())</div></pre></td></tr></table></figure>
<p>运行之后会看到如下结果(其中一个是直接输出内容，另外一个方法是利用json()方法解析)：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"foo"</span>, <span class="string">"bar"</span>, &#123;</div><div class="line"> <span class="string">"foo"</span>: <span class="string">"bar"</span></div><div class="line"> &#125;]</div><div class="line"> [<span class="string">u'foo'</span>, <span class="string">u'bar'</span>, &#123;<span class="string">u'foo'</span>: <span class="string">u'bar'</span>&#125;]</div></pre></td></tr></table></figure>
<p>在面对反爬虫机制的时候，我们可能需要构造请求头部，如果想要想要传入headers，可以传入headers参数：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">payload = &#123;<span class="symbol">'key</span>1': <span class="symbol">'value</span>1', <span class="symbol">'key</span>2':<span class="symbol">'value</span>2'&#125;</div><div class="line">headers = &#123;<span class="symbol">'content</span>-<span class="class"><span class="keyword">type</span>'</span>: <span class="symbol">'application</span>/json'&#125;</div><div class="line">r = requests.get(<span class="symbol">'http</span>:<span class="comment">//httpbin.org/get', params=payload, headers=headers)</span></div><div class="line">print(r.url)</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="基本的post请求"><a href="#基本的post请求" class="headerlink" title="基本的post请求"></a>基本的post请求</h3></blockquote>
<p>对于post请求来说，我们一般需要为它增加一些参数，最基本的传参方法可以利用data这个参数：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</div><div class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,<span class="keyword">data</span>=payload)</div><div class="line">print(r.<span class="keyword">text</span>)</div></pre></td></tr></table></figure>
<p>运行之后可以得到如下内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"args"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"data"</span>: <span class="string">""</span>, </div><div class="line">  <span class="attr">"files"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"form"</span>: &#123;</div><div class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>, </div><div class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </div><div class="line">    <span class="attr">"Content-Length"</span>: <span class="string">"23"</span>, </div><div class="line">    <span class="attr">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, </div><div class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"json"</span>: <span class="literal">null</span>,  </div><div class="line">  <span class="attr">"url"</span>: <span class="string">"http://httpbin.org/post"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到参数已经上传成功了，然后服务器返回了我们传的数据</p>
<p>如果我们想要传入json格式的数据，可以使用json.dumps()方法把表单数据序列化：</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="title">url</span> = <span class="string">"http://httpbin.org/post"</span></div><div class="line"><span class="title">payload</span> = &#123;'some': '<span class="class"><span class="keyword">data</span>'&#125;</span></div><div class="line"><span class="title">r</span> = requests.post(url, <span class="class"><span class="keyword">data</span>=json.dumps(<span class="title">payload</span>))</span></div><div class="line"><span class="title">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"args"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"data"</span>: <span class="string">"&#123;\"some\": \"data\"&#125;"</span>, </div><div class="line">  <span class="attr">"files"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"form"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </div><div class="line">    <span class="attr">"Content-Length"</span>: <span class="string">"16"</span>, </div><div class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"json"</span>: &#123;</div><div class="line">    <span class="attr">"some"</span>: <span class="string">"data"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"url"</span>: <span class="string">"http://httpbin.org/post"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的方法，我们可以传入json格式的数据，如果想要上传文件可以使用files参数，新建一个a.txt的文件，内容写上hello word！</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">url = <span class="string">"http://httpbin.org/post"</span></div><div class="line"><span class="keyword">files</span> = &#123;<span class="string">'file'</span> :<span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="string">'rb'</span>)&#125;</div><div class="line">r = requests.post(url, <span class="keyword">files</span>=<span class="keyword">files</span>)</div><div class="line"><span class="keyword">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>运行之后可以看到如下结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"args"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"data"</span>: <span class="string">""</span>, </div><div class="line">  <span class="attr">"files"</span>: &#123;</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"hello word!\n"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"form"</span>: &#123;&#125;, </div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </div><div class="line">    <span class="attr">"Content-Length"</span>: <span class="string">"153"</span>, </div><div class="line">    <span class="attr">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=91d3dfe3cd4e4f8094644cee3445b4eb"</span>, </div><div class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span></div><div class="line">  &#125;, </div><div class="line">  <span class="attr">"json"</span>: <span class="literal">null</span>, </div><div class="line">  <span class="attr">"url"</span>: <span class="string">"http://httpbin.org/post"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过结果可以看到我们上传的file内容等等，说明我们的文件已经上传成功了。<br>另外requests是支持流式上传的，这允许你发送大的数据流或文件而无需先把它们读入内存。要使用流式上传，仅需要你的请求提供一个类文件对象即可：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'massive-body'</span>) <span class="keyword">as</span> f:</div><div class="line">    requests.<span class="built_in">post</span>(<span class="string">'http://some.url/streamed'</span>, data=f)</div></pre></td></tr></table></figure>
<p>这是一个非常方便的功能。</p>
<blockquote>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3></blockquote>
<p>什么是cookies这里就不介绍了，不懂的自己去查一下。<br>如果一个响应中包含了cookies，那么我们可以利用cookies变量拿到</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">url = <span class="string">"http:example.com"</span></div><div class="line">r = requests.get(url)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.cookies)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.cookies[<span class="string">'example_cookie_name'</span>])</span></span></div></pre></td></tr></table></figure>
<p>上面的代码只是个样例，可以用cookies变量来得到站点的cookies，另外可以利用cookies变量向服务器发送cookies信息</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">url = <span class="string">"http://httpbin.org/cookies"</span></div><div class="line">cookies = dict(<span class="attribute">cookies_are</span>=<span class="string">'working'</span>)</div><div class="line">r = requests.<span class="builtin-name">get</span>(url,  <span class="attribute">cookies</span>=cookies)</div><div class="line"><span class="builtin-name">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>运行之后可以得到如下结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cookies"</span>: &#123;</div><div class="line">    <span class="attr">"cookies_are"</span>: <span class="string">"working"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到已经向服务器发送了cookies。</p>
<blockquote>
<h3 id="超时配置"><a href="#超时配置" class="headerlink" title="超时配置"></a>超时配置</h3></blockquote>
<p>可以通过timeout变量来配置最大请求时间<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requests.<span class="built_in">get</span>(<span class="string">'http://githum.com'</span>, timeout=<span class="number">0.001</span>)</div></pre></td></tr></table></figure></p>
<p>需要额外注意的是这个timeout不是说你设置了你的访问就会变快，这个没有一毛钱的关系，timeout仅对链接过程有效，与响应体的下载无关，也就是说，这个时间只是限制请求时间，返回的内容有多大该花多少时间还是多少时间。</p>
<blockquote>
<h3 id="会话对象"><a href="#会话对象" class="headerlink" title="会话对象"></a>会话对象</h3></blockquote>
<p>在上面的请求中，每次请求都相当于发起了一个新的请求。也就是相当于我们每个请求都用了不同的浏览器单独打开的效果。也就是它并不是指的一个会话，即使请求相同的网址，例如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">requests.<span class="builtin-name">get</span>(<span class="string">"http://httpbin.org/cookies/set/sessioncookie/123456789"</span>)</div><div class="line">r = requests.<span class="builtin-name">get</span>(<span class="string">"http://httpbin.org/cookies"</span>)</div><div class="line"><span class="builtin-name">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cookies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从返回的结果可以看到，这不在一个会话中，这种情况就好比，我们登录知乎，来到知乎主页，然后我们点击一篇文章又让我们登录一次，如果不能保持会话就会导致我们没进行一步操作都会让我们重新输入密码进行身份验证，这显然不符合逻辑和用户体验，所以建立持久会话是必要的，那么该怎样建立持久会话呢？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">s = requests.Session()</div><div class="line">s .<span class="builtin-name">get</span>(<span class="string">"http://httpbin.org/cookies/set/sessioncookie/123456789"</span>)</div><div class="line">r = s.<span class="builtin-name">get</span>(<span class="string">"http://httpbin.org/cookies"</span>)</div><div class="line"><span class="builtin-name">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>在这里我们同样请求了两次，一次是设置cookies，一次是获得cookies</p>
<p>运行结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cookies"</span>: &#123;</div><div class="line">    <span class="attr">"sessioncookie"</span>: <span class="string">"123456789"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，我们成功获取到cookies了，这就是建立一个会话的作用和方法，体会一下。</p>
<p>既然会话是全局变量，那么我们肯定可以用来全局的配置。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">s = requests.Session()</div><div class="line">s<span class="selector-class">.headers</span><span class="selector-class">.update</span>(&#123;<span class="string">'x-text'</span>: <span class="string">'true'</span>&#125;)</div><div class="line">r = s.get(<span class="string">'http://httpbin.org/headers'</span>, headers=&#123;<span class="string">'x-text2'</span> :<span class="string">'true'</span>&#125;)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(r.text)</span></span></div></pre></td></tr></table></figure>
<p>通过s.headers.update方法设置了headers的变量。然后我们又在请求中设置一个headers，那么会出现什么结果呢？</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </div><div class="line">    <span class="attr">"Cookie"</span>: <span class="string">"sessioncookie=123456789"</span>, </div><div class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span>, </div><div class="line">    <span class="attr">"X-Text"</span>: <span class="string">"true"</span>, </div><div class="line">    <span class="attr">"X-Text2"</span>: <span class="string">"true"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到两个变量都传送过去了。</p>
<p>如果使用GET方法传的headers ，结果会一样吗？</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">r</span> = s.get(<span class="string">'http://httpbin.org/headers'</span>, headers=&#123;<span class="string">'x-text'</span>: <span class="string">'true'</span>&#125;)</div></pre></td></tr></table></figure>
<p>运行结果可以看到，它会覆盖掉全局的配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </div><div class="line">    <span class="attr">"Cookie"</span>: <span class="string">"sessioncookie=123456789"</span>, </div><div class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.18.4"</span>, </div><div class="line">    <span class="attr">"X-Text"</span>: <span class="string">"true"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你不想要全局配置中的变量了，可以把他对应的值设置为None，就可以了：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">r</span> = s.get(<span class="string">'http://httpbin.org/headers'</span>, headers=&#123;<span class="string">'x-test'</span>: None&#125;)</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  <span class="string">"headers"</span>: &#123;</div><div class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </div><div class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </div><div class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.9.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是session会话的基本用法。</p>
<blockquote>
<h3 id="SSL-证书验证"><a href="#SSL-证书验证" class="headerlink" title="SSL 证书验证"></a>SSL 证书验证</h3></blockquote>
<p>现在很多网址都是以https开头的，requests可以为https请求验证SSL证书，就像web浏览器一样。想要检查某个主机的SSL证书，可以使用verify参数</p>
<p>我们知道12306的证书无效了，我们测试一下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">r = requests.<span class="built_in">get</span>(<span class="string">'https://kyfw.12306.cn/otn/'</span>, verify=True)</div><div class="line"><span class="built_in">print</span>(r.<span class="built_in">text</span>)</div></pre></td></tr></table></figure>
<p>结果可以看出来它果然出问题了：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requests.exceptions.SSLError: HTTPSConnectionPool(<span class="attribute">host</span>=<span class="string">'kyfw.12306.cn'</span>, <span class="attribute">port</span>=443)</div></pre></td></tr></table></figure></p>
<p>我们再来测试一下github的<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">r = requests.<span class="built_in">get</span>(<span class="string">'https://github.com'</span>, verify=True)</div><div class="line"><span class="built_in">print</span>(r.<span class="built_in">text</span>)</div></pre></td></tr></table></figure></p>
<p>可以正常访问，返回的都是HTML代码，太多了，我就不贴出来了。</p>
<p>12306的网址证书无效，我们只需要把verify设置为False就可以跳过验证了：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line">r = requests.<span class="built_in">get</span>(<span class="string">'https://kyfw.12306.cn/otn/'</span>, verify=False)</div><div class="line"><span class="built_in">print</span>(r.<span class="built_in">text</span>)</div></pre></td></tr></table></figure>
<p>就可以正常请求返回的也是HTML代码，在默认情况下verify是True，但是就跟上面的12306的网站，就可以手动更改一下这个变量。</p>
<blockquote>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3></blockquote>
<p>有些时候，我们在写爬虫程序的时候，有些网址对请求有限制，如果一个IP频繁的访问或者发送请求，这个网站就可能把你的ip给封掉，这个时候为了防止这种事情的发生，我们就可以使用代理：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"> </div><div class="line">proxies = &#123;</div><div class="line">   <span class="string">"https"</span>: <span class="string">"http://41.118.132.69:4433"</span></div><div class="line">&#125;</div><div class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, proxies=proxies)</div><div class="line">print(r.text)</div></pre></td></tr></table></figure>
<p>也可以通过环境变量HTTP_PROXY和HTTPS_PROXY来配置代理：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">HTTP_PROXY</span>=<span class="string">"http://10.10.1.10:3128"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">HTTPS_PROXY</span>=<span class="string">"http://10.10.1.10:1080"</span></div></pre></td></tr></table></figure></p>
<p>通过以上方式，可以方便地设置代理。</p>
<blockquote>
<h3 id="官方文档API"><a href="#官方文档API" class="headerlink" title="官方文档API"></a>官方文档API</h3></blockquote>
<p>上面简单介绍了requests中最常用的参数，如果还需要更多的了解，可以参考<a href="http://docs.python-requests.org/en/master/api/" target="_blank" rel="external">官方文档API</a></p>
<blockquote>
<p>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> requests </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬取豆瓣电影TOP 250]]></title>
      <url>/2017/08/29/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP-250/</url>
      <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="随着大数据的爆发，数据分析越来越火。数据收集就变得十分重要，爬虫就是为数据收集而生的，Python刚好又有很强大的爬虫相关的库。Python在爬虫这方面是十分强大的。市面上一般的Python爬虫工程师工资每月都在10K-15K之间，而懂得一些框架的资深工程师工资都在30K以上，所以做爬虫这方面还是十分吃香的。万事开头难，只有迈开第一步，后面才能够大步往前走，博主也是初入爬虫这一行，并且打算深入学习它，一步一步往下走吧。说再多都没有用，想学好计算机相关的东西，光靠说是没有用到，手上功夫要跟上，不打代码是学不会计算机的。只有不段的打代码，代码量积累到一定程度之后，由一个量到质的变化。今天，就开始一个简单爬虫项目来对爬虫有一个初步的认识。"><a href="#随着大数据的爆发，数据分析越来越火。数据收集就变得十分重要，爬虫就是为数据收集而生的，Python刚好又有很强大的爬虫相关的库。Python在爬虫这方面是十分强大的。市面上一般的Python爬虫工程师工资每月都在10K-15K之间，而懂得一些框架的资深工程师工资都在30K以上，所以做爬虫这方面还是十分吃香的。万事开头难，只有迈开第一步，后面才能够大步往前走，博主也是初入爬虫这一行，并且打算深入学习它，一步一步往下走吧。说再多都没有用，想学好计算机相关的东西，光靠说是没有用到，手上功夫要跟上，不打代码是学不会计算机的。只有不段的打代码，代码量积累到一定程度之后，由一个量到质的变化。今天，就开始一个简单爬虫项目来对爬虫有一个初步的认识。" class="headerlink" title="随着大数据的爆发，数据分析越来越火。数据收集就变得十分重要，爬虫就是为数据收集而生的，Python刚好又有很强大的爬虫相关的库。Python在爬虫这方面是十分强大的。市面上一般的Python爬虫工程师工资每月都在10K~15K之间，而懂得一些框架的资深工程师工资都在30K以上，所以做爬虫这方面还是十分吃香的。万事开头难，只有迈开第一步，后面才能够大步往前走，博主也是初入爬虫这一行，并且打算深入学习它，一步一步往下走吧。说再多都没有用，想学好计算机相关的东西，光靠说是没有用到，手上功夫要跟上，不打代码是学不会计算机的。只有不段的打代码，代码量积累到一定程度之后，由一个量到质的变化。今天，就开始一个简单爬虫项目来对爬虫有一个初步的认识。"></a>随着大数据的爆发，数据分析越来越火。数据收集就变得十分重要，爬虫就是为数据收集而生的，Python刚好又有很强大的爬虫相关的库。Python在爬虫这方面是十分强大的。市面上一般的Python爬虫工程师工资每月都在10K~15K之间，而懂得一些框架的资深工程师工资都在30K以上，所以做爬虫这方面还是十分吃香的。万事开头难，只有迈开第一步，后面才能够大步往前走，博主也是初入爬虫这一行，并且打算深入学习它，一步一步往下走吧。说再多都没有用，想学好计算机相关的东西，光靠说是没有用到，手上功夫要跟上，不打代码是学不会计算机的。只有不段的打代码，代码量积累到一定程度之后，由一个量到质的变化。今天，就开始一个简单爬虫项目来对爬虫有一个初步的认识。</h3><h2 id="环境以及相关的库"><a href="#环境以及相关的库" class="headerlink" title="环境以及相关的库"></a>环境以及相关的库</h2><blockquote>
<h3 id="系统：-Ubuntu-16-04"><a href="#系统：-Ubuntu-16-04" class="headerlink" title="系统： Ubuntu 16.04"></a>系统： Ubuntu 16.04</h3><h3 id="Python环境：python-3-5"><a href="#Python环境：python-3-5" class="headerlink" title="Python环境：python 3.5"></a>Python环境：python 3.5</h3><h3 id="库：requests，BeautifulSoup，codecs"><a href="#库：requests，BeautifulSoup，codecs" class="headerlink" title="库：requests，BeautifulSoup，codecs"></a>库：requests，BeautifulSoup，codecs</h3></blockquote>
<p>以上只是我个人的环境，系统的话可以根据自己的习惯进行选择。</p>
<h2 id="正题部分"><a href="#正题部分" class="headerlink" title="正题部分"></a>正题部分</h2><blockquote>
<h3 id="这里我们爬取豆瓣电影Top-250的电影名称，网址是：https-movie-douban-com-top250"><a href="#这里我们爬取豆瓣电影Top-250的电影名称，网址是：https-movie-douban-com-top250" class="headerlink" title="这里我们爬取豆瓣电影Top 250的电影名称，网址是：https://movie.douban.com/top250"></a>这里我们爬取豆瓣电影Top 250的电影名称，网址是：<a href="https://movie.douban.com/top250" target="_blank" rel="external">https://movie.douban.com/top250</a></h3></blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/1.png" alt="1"></p>
<h3 id="首先我们要对网页的结构进行分析，爬虫很笨的，你必须清清楚楚的告诉它每一步该干什么，它才能知道做什么，所以我们先来分析网页结构，找到我们想要的内容，然后告诉爬虫让它给我们提取出来，这就是我们写爬虫的目的。"><a href="#首先我们要对网页的结构进行分析，爬虫很笨的，你必须清清楚楚的告诉它每一步该干什么，它才能知道做什么，所以我们先来分析网页结构，找到我们想要的内容，然后告诉爬虫让它给我们提取出来，这就是我们写爬虫的目的。" class="headerlink" title="首先我们要对网页的结构进行分析，爬虫很笨的，你必须清清楚楚的告诉它每一步该干什么，它才能知道做什么，所以我们先来分析网页结构，找到我们想要的内容，然后告诉爬虫让它给我们提取出来，这就是我们写爬虫的目的。"></a>首先我们要对网页的结构进行分析，爬虫很笨的，你必须清清楚楚的告诉它每一步该干什么，它才能知道做什么，所以我们先来分析网页结构，找到我们想要的内容，然后告诉爬虫让它给我们提取出来，这就是我们写爬虫的目的。</h3><p>在chrome浏览器下按F12打开开发者工具，就可以看到网页的源代码：<br><img src="http://ovfqn6f2x.bkt.clouddn.com/2.png" alt="2"><br><img src="http://ovfqn6f2x.bkt.clouddn.com/2.png" alt="3"></p>
<p>可以看到这个页面有25条电影信息，可以通过在任意一个电影上面点击鼠标右键–&gt;检查看到其HTML的结构。可以看到这一页的所有的电影都在class为”grid_view“的ol标签里面，每个电影对应一个li，在li下面的a标签下class为“title”的span对应的就是电影名称，也就是我们需要的内容，我们下面要做的就是告诉我们的爬虫，把这里的内容提取并且保存到文件就可以了。<br><img src="http://ovfqn6f2x.bkt.clouddn.com/3.png" alt="4"></p>
<h3 id="到目前为止，我们得到的内容有："><a href="#到目前为止，我们得到的内容有：" class="headerlink" title="到目前为止，我们得到的内容有："></a>到目前为止，我们得到的内容有：</h3><blockquote>
<ol>
<li>每页有25条电影，共有10页。</li>
<li>电影列表在页面的位置为一个class属性为grid_view的ol标签里。</li>
<li>每条电影都放在这个ol标签的li标签里</li>
</ol>
</blockquote>
<p>上面简单分析了一下网页结构，网页结构分析哪些东西呢？<br>需要手动的找到我们需要的东西，然后找到其对应的标签，这些标签的作用就跟路标一样，爬虫不想人类这样有智慧，你需要把这些路标告诉它，然后它就可以通过这些路标找到我们想要的东西。(当然这是简单爬虫的思路，如果是复杂的爬虫可能还需要构造请求，cookie，首部，IP等等一些东西，后面我们遇到了再一起学，现在还用不到)</p>
<p>找到标签之后该怎么办，第一步是通过python的requests库构造请求，就跟我们浏览网页一样，我们也是想服务器发送到请求，服务器收到我们的请求之后进行处理，如果没问题就好把我们所请求的内容发给我们，请求的方式有很多，最常见的两种是GET、POST，这两者具体有什么区别，请参考这篇文章：<a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">浅谈HTTP中Get与Post的区别 – hyddd – 博客园</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># encoding=utf-8</div><div class="line"></div><div class="line">import requests</div><div class="line"> </div><div class="line">url = &apos;https://movie.douban.com/top250&apos;</div><div class="line"> </div><div class="line">def get_html(url):</div><div class="line">    date = requests.get(url).content</div><div class="line">    return date</div><div class="line"> </div><div class="line">def main():</div><div class="line">    print(get_html(url))</div><div class="line"> </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>上面的代码首先导入了requests模块，然后定义了一个url的变量用了放链接地址，然后定义了一个get_html的函数这个函数的作用就是返回网页所对应的HTML代码。main函数用来打印输出请求的结果，上面的代码运行后得到如下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">b'<span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span>\n    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"always"</span>&gt;</span></div><div class="line">......</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">....</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p>返回了一大堆的东西，这些都是HTML源代码。<br>下一步就是对这么多HTML的内容进行筛选和清洗，因为里面的绝大多数的内容都是我们不需要的。查找我们想要的内容有三种方法.</p>
<blockquote>
<h3 id="第一种是使用正则表达式"><a href="#第一种是使用正则表达式" class="headerlink" title="第一种是使用正则表达式"></a>第一种是使用正则表达式</h3></blockquote>
<p>这是一把万能钥匙，再大再乱的内容，哪怕是大海捞针，只要告诉我这个针长什么样子，就可以使用正则表达式提取你想要的数据。</p>
<blockquote>
<h3 id="第二种使用BeautifulSoup"><a href="#第二种使用BeautifulSoup" class="headerlink" title="第二种使用BeautifulSoup"></a>第二种使用BeautifulSoup</h3></blockquote>
<p>由于第一种方法相对要复杂一些，我们还有第二种方法，就是使用BeautifulSoup库，我们只需要把原始数据和我们想要的数据都扔个这个BeautifulSoup，然后让它给我们去寻找，这也是一个很不错的方案，但是论灵活性，第二种方法还是略微逊色于第一种方法</p>
<blockquote>
<p>第三种方法 双剑合璧</p>
</blockquote>
<p>最厉害的一种方法就是把这两种方法结合起来使用，具体怎么结合，后面我们用到了再说。</p>
<p><strong> 这里我们只需要使用BeautifulSoup就可以很轻松的完成：</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"> </div><div class="line"><span class="keyword">def</span> parse_html(html):</div><div class="line">    </div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    movie_list_soup = soup.<span class="keyword">find</span>(<span class="string">'ol'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'grid_view'</span>&#125;)</div><div class="line">    <span class="keyword">for</span> movie_li in movie_list_soup.find_all(<span class="string">'li'</span>):</div><div class="line">        detail = movie_li.<span class="keyword">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'hd'</span>&#125;)</div><div class="line">        movie_name = detail.<span class="keyword">find</span>(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'title'</span>&#125;).<span class="keyword">getText</span>()</div><div class="line">        <span class="keyword">print</span>(movie_name)</div></pre></td></tr></table></figure></p>
<p>上面的代码就是我们爬虫的核心代码，首先我们导入了BeautifulSoup，然后我们定义了一个parse_html函数，它接受一个HTML源码作为输出，然后我们把我们的获取到的HTML代码丢给通过BeautifulSoup操作丢给soup变量，然后通过BeautifulSoup的find属性，在这一堆HTML源代码中找到我们让它找的标签(class为grid_view的ol标签)，这一步我们的爬虫就能够找到文章列表。下一步是通过循环让它依次遍历每一个li标签内的内容(因为每一个电影都是单独放在一个li标签里面的)。然后在for循环内部进行同样的查找操作，最后再把得到的文本内容(电影名称)打印出来.</p>
<blockquote>
<p>到目前为止，我们已经能够获得当前页面的所有电影的名称了，但是我们要的是提取所有页的电影名称，我们人知道看完这一页翻到下一页，但是爬虫很笨，你如果不告诉它怎么翻页，它是不会处理翻页的。<br>一般来说的话因为HTML代码具有很强的规律性，当我们知道网址的格式之后可以把页面跳转写死，因为页面的变化仅仅只是数字的变化，其他的内容几乎不会有改变，这样就可以把链接固定，只改变数字就可以进行翻页处理。这里为了让我们的爬虫更像爬虫，我们让它找到代码导航的下一页的链接，然后进行跳转，也就是说把链接的构造方式告诉我们的爬虫，然后让构造出不同页。以此实现页面跳转。</p>
</blockquote>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/4.png" alt="6"></p>
<p>通过把页面拉到最下面，鼠标放在后页的位置点击右键–&gt;检查可以看到上面的图片中的不同的页面的url的区别，每一页都有在一个a标签下，而class为next的span标签里面的link就是当前的url，我们通过从soup中find该属性下的a标签，就可以定位所有的页。最后一页之后就没有a标签了，只需要把next_page作为if的判断条件，就可以遍历所有的页，根据这样的思路我们修改一下上面的代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> parse_html(html):</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    movie_list = soup.<span class="keyword">find</span>(<span class="string">'ol'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'grid_view'</span>&#125;)</div><div class="line"> </div><div class="line">    movie_name_list = []</div><div class="line">    <span class="keyword">for</span> movie_li in movie_list.find_all(<span class="string">'li'</span>):</div><div class="line">        detail = movie_li.<span class="keyword">find</span>(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'hd'</span>&#125;)</div><div class="line">        movie_name = detail.<span class="keyword">find</span>(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'title'</span>&#125;).<span class="keyword">getText</span>()</div><div class="line">        movie_name_list.<span class="keyword">append</span>(movie_name)</div><div class="line">        </div><div class="line">    next_page = soup.<span class="keyword">find</span>(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'next'</span>&#125;).<span class="keyword">find</span>(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">if</span> next_page:</div><div class="line">        <span class="keyword">return</span> movie_name_list, url + next_page[<span class="string">'href'</span>]</div><div class="line">    <span class="keyword">return</span> movie_name_list, None</div></pre></td></tr></table></figure>
<p>上面的代码我们构造了完整的页面链接，我们通过标签获取的内容只是完整链接的一部分，这时候我们就需要加上我们的url构造完整的链接，上面的代码就可以返回一个包含电影名的list，以及下一页的链接，如果到了最后一页就返回None。</p>
<p>到这里，我们的爬虫以及完成了绝大部分，接下来就只需要把这个list写入文件，把上面的函数组装起来就是一个完整的程序了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    relurl = url</div><div class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'movies'</span>, <span class="string">'wb'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">        <span class="keyword">while</span> relurl:</div><div class="line">            html = get_html(relurl)</div><div class="line">            movies, relurl = parse_html(html)</div><div class="line">            fp.write(<span class="string">u'&#123;movies&#125;\n'</span>.format(movies=<span class="string">'\n'</span>.join(movies)))</div></pre></td></tr></table></figure></p>
<p>上面的代码中我们引入了codecs模块，这个模块是为了更方便的处理中文，文件写入的时候通过codecs.open写入并且指定编码格式，这样所有的数据都会进行统一编码，这里把reurl(页面)作为循环条件，当所有的页面遍历完，reurl就会变成None，这时候就可以跳出循环。最后把名称写入名为movies的文件中，整个程序就完成了。</p>
<blockquote>
<h2 id="小结部分："><a href="#小结部分：" class="headerlink" title="小结部分："></a>小结部分：</h2></blockquote>
<h3 id="这是我们写的一个简单的爬虫，麻雀虽小，五脏俱全。这里我们简单的使用了BeautifulSoup的使用，其中关于find的使用我在这里介绍对你用处也不大，真的想要掌握还需要自己去练习，不断地敲代码巩固才是王道。"><a href="#这是我们写的一个简单的爬虫，麻雀虽小，五脏俱全。这里我们简单的使用了BeautifulSoup的使用，其中关于find的使用我在这里介绍对你用处也不大，真的想要掌握还需要自己去练习，不断地敲代码巩固才是王道。" class="headerlink" title="这是我们写的一个简单的爬虫，麻雀虽小，五脏俱全。这里我们简单的使用了BeautifulSoup的使用，其中关于find的使用我在这里介绍对你用处也不大，真的想要掌握还需要自己去练习，不断地敲代码巩固才是王道。"></a>这是我们写的一个简单的爬虫，麻雀虽小，五脏俱全。这里我们简单的使用了BeautifulSoup的使用，其中关于find的使用我在这里介绍对你用处也不大，真的想要掌握还需要自己去练习，不断地敲代码巩固才是王道。</h3><h3 id="这里我们没有遇到阻碍，如果目标站点加入了反爬虫机制，我们的爬虫就需要构造UA，以及面对更加复杂的网页结构，使用数据库来存储我们爬取的内容，等等"><a href="#这里我们没有遇到阻碍，如果目标站点加入了反爬虫机制，我们的爬虫就需要构造UA，以及面对更加复杂的网页结构，使用数据库来存储我们爬取的内容，等等" class="headerlink" title="这里我们没有遇到阻碍，如果目标站点加入了反爬虫机制，我们的爬虫就需要构造UA，以及面对更加复杂的网页结构，使用数据库来存储我们爬取的内容，等等.."></a>这里我们没有遇到阻碍，如果目标站点加入了反爬虫机制，我们的爬虫就需要构造UA，以及面对更加复杂的网页结构，使用数据库来存储我们爬取的内容，等等..</h3><h3 id="爬虫的路还很长，这才刚刚开始"><a href="#爬虫的路还很长，这才刚刚开始" class="headerlink" title="爬虫的路还很长，这才刚刚开始"></a>爬虫的路还很长，这才刚刚开始</h3><blockquote>
<h2 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h2></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> codecs</div><div class="line"> </div><div class="line">url = <span class="string">'https://movie.douban.com/top250'</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></div><div class="line">    date = requests.get(url).content</div><div class="line">    <span class="keyword">return</span> date</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_html</span><span class="params">(html)</span>:</span></div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    movie_list = soup.find(<span class="string">'ol'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'grid_view'</span>&#125;)</div><div class="line"> </div><div class="line">    movie_name_list = []</div><div class="line">    <span class="keyword">for</span> movie_li <span class="keyword">in</span> movie_list.find_all(<span class="string">'li'</span>):</div><div class="line">        detail = movie_li.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'hd'</span>&#125;)</div><div class="line">        movie_name = detail.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'title'</span>&#125;).getText()</div><div class="line">        movie_name_list.append(movie_name)</div><div class="line"> </div><div class="line">    next_page = soup.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'next'</span>&#125;).find(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">if</span> next_page:</div><div class="line">        <span class="keyword">return</span> movie_name_list, url + next_page[<span class="string">'href'</span>]</div><div class="line">    <span class="keyword">return</span> movie_name_list, <span class="keyword">None</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"> </div><div class="line">    relurl = url</div><div class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'movies'</span>, <span class="string">'wb'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</div><div class="line">        <span class="keyword">while</span> relurl:</div><div class="line">            html = get_html(relurl)</div><div class="line">            movies, relurl = parse_html(html)</div><div class="line">            fp.write(<span class="string">u'&#123;movies&#125;\n'</span>.format(movies=<span class="string">'\n'</span>.join(movies)))</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>所有的电影名称就安静的躺在了我们的电脑里面了。</p>
<p><img src="http://ovfqn6f2x.bkt.clouddn.com/5.png" alt="7"></p>
<blockquote>
<p>文章如有出错的地方，请多多指正！如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 网络爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用python制作词云]]></title>
      <url>/2017/08/08/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9C%E8%AF%8D%E4%BA%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python是一门灵活而又强大的语言，使用的人越来越多，大有大爆发的形式，越早掌握，越能把握优势！</p>
</blockquote>
<p>网上经常看到这样的图片：<br><img src="http://oubfmwkha.bkt.clouddn.com/1.jpg" alt="1"> </p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/3.jpg" alt="2"></p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/2.jpg" alt="3"></p>
<p>以上图片简称词云，网上有词云在线生成工具，但是样式都是固定的，不一定能够满足我们的需求，今天我们就来自己动手来制作词云，使用Python可以很轻松的制作词云。</p>
<blockquote>
<h2 id="词云制作"><a href="#词云制作" class="headerlink" title="词云制作"></a>词云制作</h2></blockquote>
<h3 id="依赖的库文件："><a href="#依赖的库文件：" class="headerlink" title="依赖的库文件："></a>依赖的库文件：</h3><p>wordcloud python下制作词云最强大的库<br>可以使用<font color="Lime">pip install wordcloud</font> 进行安装<br>matplotlib python下画图的利器，几句话也介绍不完，详细信息请参考这里<br>可以到这个网址进行手动安装：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib</a></p>
<p>有了上面上个工具，我们就可以开始进行简单的词云制作了：<br>首先，我们需要先收集一些词语，我随便从网络上收集了一些英文，先介绍英文，因为汉语的有所不同，下面再单独介绍！</p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/4.PNG" alt="5"></p>
<p>上面就是我们收集的英文，保存到txt的文本里就可以了。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from wordcloud <span class="built_in">import</span> WordCloud</div><div class="line"><span class="built_in">import</span> matplotlib.pyplot as plt</div><div class="line"></div><div class="line"><span class="attr">filename</span> = 'ciyun.txt'</div><div class="line"><span class="keyword">with</span> open(filename) as f:</div><div class="line">    <span class="attr">mytext</span> = f.read()</div><div class="line"><span class="attr">wordcloud</span> = WordCloud(<span class="attr">collocations=False,</span> <span class="attr">width=1700,</span> <span class="attr">height=1400,</span> <span class="attr">margin=2).generate(mytext)</span></div><div class="line">plt.imshow(wordcloud, <span class="attr">interpolation='bilinear')</span></div><div class="line">plt.axis('off')</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p>简单解读一下上面的代码的含义：</p>
</blockquote>
<ul>
<li>先导入我们需要用到的模块</li>
<li>然后找到txt的路径，通过with open打开文件，把文件读给mytext</li>
<li>WordCloud(collocations=False, width=1700, #设置宽度<br>height=1400, #设置高度<br>margin=2,<br>background_color=”white”, #背景颜色<br>max_words=2000,# 词云显示的最大词数,<br>mask=alice_coloring, #设置背景图片<br>stopwords=STOPWORDS.add(“said”),<br>max_font_size=40, #字体最大值<br>random_state=42<br>)</li>
<li>generate 可以对全部文本进行自动分词,但是他对中文支持不好<br>imshow(wordcloud, interpolation=’bilinear’) # 通过这种方式词云将会按照给定的图片颜色布局生成字体颜色策略</li>
<li>plt.axis(‘off’) #不显示坐标尺寸</li>
<li>plt.show() # 把图片显示出来<br>效果如下：<br><img src="http://oubfmwkha.bkt.clouddn.com/5.PNG" alt="6"></li>
</ul>
<p>上面的词云是针对英文进行制作的，下面介绍一下怎么对中文进行词云的制作（仅仅有一点点的区别）<br>汉语内容只需要在代码中加入，如果不加的话，中文会显示方框乱码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">font = <span class="string">r'C://Windows//Fonts/simfang.ttf'</span>    <span class="comment">#从本地读取字体</span></div><div class="line">wordcloud = WordCloud(collocations=<span class="keyword">False</span>, font_path=font, width=<span class="number">1700</span>, height=<span class="number">1400</span>, margin=<span class="number">2</span>).generate(mytext)</div></pre></td></tr></table></figure></p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/6.PNG" alt="7"></p>
<p>当然，这种词云是最基础的，有时候这些不能够满足我们的需求，我们想要制作一些个性化的词云，下面就开始进行词云的进阶。<br>很多时候我们想要这样的词云：</p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/7.png" alt="8"></p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/8.png" alt="9"></p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/9.png" alt="10"></p>
<blockquote>
<h3 id="个性化词云"><a href="#个性化词云" class="headerlink" title="个性化词云"></a>个性化词云</h3></blockquote>
<p>这种自定义形状的词云该如何制作呢？<br>需要用到的库有PIL、numpy、matplotlib、wordcloud<br>如果有汉语的话还需要使用jieba库进行中文分词。<br>先亮代码吧：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">from os <span class="keyword">import</span> <span class="built_in">path</span></div><div class="line">from PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"> </div><div class="line">from wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator</div><div class="line"> </div><div class="line">d = <span class="built_in">path</span>.dirname(__file__)</div><div class="line"> </div><div class="line"><span class="keyword">text</span> = open(<span class="built_in">path</span>.join(d, <span class="string">'./ciyun.txt'</span>)).read()</div><div class="line"> </div><div class="line">coloring = np.array(Image.open(<span class="built_in">path</span>.join(d,<span class="string">".\bg7.jpg"</span>)))</div><div class="line">font=<span class="string">'C:/Windows/Fonts/simfang.ttf'</span></div><div class="line">wc = WordCloud(background_color=<span class="string">"white"</span>, max_words=<span class="number">200</span>, mask=alice_coloring,font_path=font,</div><div class="line">               stopwords=STOPWORDS.add(<span class="string">"said"</span>),</div><div class="line">               max_font_size=<span class="number">80</span>, random_state=<span class="number">42</span>)</div><div class="line"> </div><div class="line">wc.generate(<span class="keyword">text</span>)</div><div class="line"> </div><div class="line">image_colors = ImageColorGenerator(coloring)</div><div class="line"> </div><div class="line">plt.imshow(wc)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(wc.recolor(color_func=image_colors))</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.figure()</div><div class="line">plt.imshow(coloring, cmap=plt.cm.gray)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>对比图如下：</p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/10.png" alt="11"></p>
<p><img src="http://oubfmwkha.bkt.clouddn.com/11.png" alt="12"></p>
<p>具体内容以及更多例子可以参考wordcloud作者的GitHub：<a href="https://github.com/amueller/word_cloud/tree/master/examples" target="_blank" rel="external">https://github.com/amueller/word_cloud/tree/master/examples</a></p>
<p>建议图片最好选择纯色的，清晰的，白色背景并且形状鲜明的。否则图片内容不好提取。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续写作！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wordcloud </tag>
            
            <tag> 词云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kali-linux破解wifi密码]]></title>
      <url>/2017/08/05/kali-linux%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>现在的人都离不开网络，感觉离开网络整个人就被这个世界隔离了。而流量又那么的昂贵，所有WI-FI的作用变的举足轻重，几乎绝大多数的WI-FI都是要密码的，这就让我们很头疼，市面上也有很多破解WI-FI的软件，最知名的就数某万能钥匙，手机电脑版的都有，操作方便，但是电脑版的在使用的过程中需要先连接上网络，然后从云端获取指定WI-FI的密码，如果数据库中没有该密码，就不能进行破解。<br>今天，我们来简单介绍一下在kali linux下怎么在无网络环境的情况下进行WI-FI密码破解：</p>
</blockquote>
<font color="rad">破解别人WI-FI是违法行为，仅限于学习！大家知道怎么破解的，然后就能知道怎么防范，知己知彼，百战不殆！</font>

<blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2></blockquote>
<ul>
<li>装有kali linux的计算机(物理机上，虚拟机的话需要有额外的网卡)</li>
<li>使用Aircrack-ng进行破解</li>
<li>支持监控模式的网卡，现在的笔记本一般都支持</li>
<li>字典文件（没有网络的情况下，就是靠从字典里暴力破解）</li>
<li>耐心（如果密码很复杂，可能破解的时间要长）</li>
</ul>
<blockquote>
<h2 id="Aircrack-ng"><a href="#Aircrack-ng" class="headerlink" title="Aircrack-ng"></a>Aircrack-ng</h2></blockquote>
<p>Aircrack-ng是一个与802.11标准的无线网络分析有关的安全软件，主要功能有：网络侦测，数据包嗅探，WEP和WPA/WPA2-PSK破解。Aircrack-ng可以工作在任何支持监听模式的无线网卡上并嗅探802.11a，802.11b，802.11g的数据。该程序可运行在Linux和Windows上。Linux版本已经被移植到了Zaurus和Maemo系统平台, 并概念验证可移植到iPhone。<br>总之Aircrack-ng是一个用来测试WIFI安全性的强大工具。<br>Aircrack-ng包包含有如下模块：</p>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/8.png" alt="1"></p>
<p><a href="https://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack-NG官方网站</a><br>在kali linux里给我们默认了一份字典，在/usr/share/wordlists/rockyou.txt.gz<br>下面的操作都是在没有网络环境的情况下进行的，如果你连着WI-FI就先把ＷI-FI断掉。</p>
<blockquote>
<h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3></blockquote>
<p>我使用自家的WIFI进行演示。<br>首先需要把破解密码的字典给解压出来，使用如下命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gzip -d /usr/share/wordlists/rockyou<span class="selector-class">.txt</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure></p>
<p>紧接着在终端中输入：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">airmon-ng</span></div></pre></td></tr></table></figure></p>
<p>如果出现如下画面，则表示你的网卡是支持监控模式的，如果输入命令之后，没有反应，则表示你的网卡是不支持监控模式的：</p>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/1.png" alt="3"></p>
<p>下一步当然是开启无线网卡的监控模式啦(这里根据你自己的情况来，我的网卡显示的是wlan0，你的显示的是什么就写什么)：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airmon-ng <span class="literal">start</span> wlan0</div></pre></td></tr></table></figure></p>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/2.png" alt="4"></p>
<p>可以看到（mac80211 monitor mode vif enabled …）就表示开启成功，并且网卡信息也变成可wlan0mon，可以使用ifconfig进行查看。<br>下面查看wifi网络，就是扫描你周边的wifi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airodump-ng wlan0mon</div></pre></td></tr></table></figure></p>
<p>可以看到你周边的wifi的详细信息，包括信号强度、加密类型、频道等，，你需要记住要破解的wifi的频道号和BSSID，然后就可以按Ctrl-C结束了，第一个FAST_E984就是我家的WIFI：</p>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/3.png" alt="5"></p>
<p>下一步是抓取握手包，使用网卡的监听模式抓取周围的无线网络数据包。其中，对我们最重要的数据包是：包含密码的包（也叫握手包），当有新用户断开或者自动连接wifi时，会发生握手包。<br>使用如下命令进行抓包：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">airodump-ng</span> <span class="selector-tag">-c</span> <span class="selector-tag">1</span> <span class="selector-tag">--bssid</span> <span class="selector-tag">D4</span><span class="selector-pseudo">:83</span><span class="selector-pseudo">:04</span><span class="selector-pseudo">:5E</span><span class="selector-pseudo">:E9</span><span class="selector-pseudo">:84</span> <span class="selector-tag">-w</span> ~/ <span class="selector-tag">wlan0mon</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>-c 是指频道号，在上面的图中的CH的值<br>-bssid 指定路由器的bssid<br>-w 把数据包写入到指定位置</p>
</blockquote>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/4.png" alt="6"></p>
<p>紧接着，我们就等着用户连接/重新连接wifi了，运气好的话可能很快就可以。运气不好的话可能要等很长时间。这不是我们想要的结果，当然还有其他的方法可以做，aircrack-ng下有一个aireplay-ng模块，它可以强制用户断开wifi连接，原理是:给连接到的wifi的一个设备发送一个deauth（反认证）包，让那个设备断开wifi，随后它自己就会再次连接wifi。<br>但是这种方法生效的前提是：wifi网络中至少要有一个连接的设备。从上图中可以看到有哪些网络设备连接到该路由上了，SIATTON就是连接设备的MAC地址，记住一个。<br>另外再打开一个新的终端，并执行如下命令：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">aireplay-ng</span> <span class="selector-tag">-0</span> 2 <span class="selector-tag">-a</span> <span class="selector-tag">D4</span><span class="selector-pseudo">:83</span><span class="selector-pseudo">:04</span><span class="selector-pseudo">:5E</span><span class="selector-pseudo">:E9</span><span class="selector-pseudo">:84</span> <span class="selector-tag">-c</span> <span class="selector-tag">A0</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:28</span><span class="selector-pseudo">:A2</span><span class="selector-pseudo">:0E</span><span class="selector-pseudo">:E9</span> <span class="selector-tag">wlan0mon</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>-0 表示发起deauthentication攻击<br>-a 表示指定无线路由器bssid<br>-c 指定强制断开的设备<br>如何成功的话可以看到在第一行后面会多出来 [WPA handshake:D4:83:04:5E:E9:84]</p>
</blockquote>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/5.png" alt="7"></p>
<p>我们前面的所做都是为了得到这个握手包，得到之后就可以把无线网卡的监控模式关闭了，否则没法正常连接网络：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airmon-ng <span class="built_in">stop</span> wlan0mon</div></pre></td></tr></table></figure></p>
<p>可以看到（mac80211 station mode vif enabled on [py0]wlan0）,这样则表示切换成wlan0模式了。</p>
<p><img src="http://ou7oiqoj6.bkt.clouddn.com/6.png" alt="8"></p>
<p>下一步就是对密码进行破解了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aircrack-ng -a2 -b <span class="string">D4:</span><span class="number">83</span>:<span class="number">04</span>:<span class="number">5</span><span class="string">E:</span><span class="string">E9:</span><span class="number">84</span> -w <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt ~<span class="comment">/*.cap</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>-a2 代表WPA握手包<br>-b 表示要破解的wifi 的BSSID<br>-w 指定字典文件<br>最后的是你抓取到的握手包的所在位置，在上面我们抓包的时候把它放在了根目录下.<br>可以看到我们已经破解得到了密码，KEY FOUND中显示的内容就是我们破解得到的密码(如果密码很简单，可以在很短的时间内破解掉)：<br><img src="http://ou7oiqoj6.bkt.clouddn.com/7.png" alt="9"></p>
</blockquote>
<p>测试成功的关键是有一个靠谱的字典文件，字典越全面，破解成功的可能性越大，电脑性能越好，破解速度越快。<br>关于如何防范最简单的方法就是把密码设置的足够复杂，足够长。<br>还有就是不要使用WEP加密方式，这种方式最容易被破解。</p>
<p>参考：<a href="http://topspeedsnail.com/kali-linux-crack-wifi-wpa/" target="_blank" rel="external">http://topspeedsnail.com/kali-linux-crack-wifi-wpa/</a></p>
<p>这里给出一个相对全面一点的字典下载地址：</p>
<p><a href="https://pan.baidu.com/s/1jIdmIHK?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0#list/path=/" target="_blank" rel="external">百度网盘下载地址</a></p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续写作！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Kali Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[把kali linux装在U盘里]]></title>
      <url>/2017/08/02/%E6%8A%8Akali-linux%E8%A3%85%E5%9C%A8U%E7%9B%98%E9%87%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2></blockquote>
<p>系统的安装有很多方法，安装系统的介质也有很多，比如机械硬盘，固态硬盘，移动硬盘，当然U盘也是可以的。Kali Linux是基于Debian的Linux发行版， 设计用于数字鉴识和渗透测试。由Offensive Security Ltd维护和资助。最先由Offensive Security的Mati Aharoni和Devon Kearns通过重写BackTrack来完成，BackTrack是他们之前写的用于取证的Linux发行版 。<br>Kali Linux预装了许多渗透测试软件，包括nmap（端口扫描工具）、Wireshark（数据包分析器）、John the Ripper（密码破解器）以及Aircrack-NG（一套用于对无线局域网进行渗透测试的软件）。 用户可通过硬盘、live CD或live USB运行Kali Linux。Metasploit的Metasploit Framework支持Kali Linux，Metasploit一套针对远程主机进行开发和执行Exploit代码的工具。<br>以上内容来自维基百科。<br>kali集合了大量的工具，是做渗透测试十分强大的一套系统，即使我们自己的电脑安装了kali系统，但是我们不可能永远都随身带着电脑，但是有时候我们在外的时候，需要进行一些渗透测试的时候，这时候能有一个随身的系统，随插随用就十分的方便，于是博主就把系统安装在U盘里面了，在其他机器上只要开机的时候选择从U盘进行启动，就可以进入我们的kali系统了。安装的过程可谓是崎岖艰难，几乎能遇到的问题，我都遇到了，整整折腾了我大半天时间，于是我打算写下这篇文章，希望能够帮到后来人吧。</p>
<hr>
<blockquote>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2></blockquote>
<p><strong>我使用的是VMware 12进行安装的</strong><br><strong>U盘是： USB3.0 32G 金士顿</strong><br>把kali安装到U盘的方式我知道的有两种，一种是通过Win32DiskImager把系统写进去，另一种是通过VMware作为中介进行安装<br>两种方法我都试了，两种方法在这里都介绍一下，首先先介绍使用Win32DiskImager进行安装(文末会给出下载链接)：<br>这是Win32Disklmager打开后的页面，插上U盘即会自动识别，然后你再选中你的kali系统所在位置，点击Write静静等待写入完成。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/1.PNG" alt="1"></p>
<p>然后开机选择从U盘启动，会看到如下安装画面，选择从Live USB Persistence启动即可。<br><img src="http://ou22pglma.bkt.clouddn.com/2.jpg" alt="2"></p>
<p>剩下的步骤我就不再介绍了，你可以参考<a href="https://betamao.me/kali-install-u.html" target="_blank" rel="external">这个网址</a></p>
<p>由于上面的方法，每次都需要选择，但是这种方法一举两得，既可以使用u盘启动kali，也可以作为kali系统的安装盘。</p>
<blockquote>
<h3 id="大众安装方法"><a href="#大众安装方法" class="headerlink" title="大众安装方法"></a>大众安装方法</h3></blockquote>
<p>博主只是打算做一个和普通系统没区别的系统，不想做成启动盘，于是就用了第二种方法，也就是使用VMware进行安装。<br>如果你先使用了第一种方法进行了安装，发现自己不喜欢那种启动方式，又想重新使用第二种方法进行安装，却发现U盘插电脑上不显示，针对这个问题，可以通过如下方式进行操作：<br>首先，在Windows下打开CMD：输入 diskpart 会看到如下画面：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/3.PNG" alt="4"></p>
<p>紧接着输入： <font color="Lime">list disk</font> 会显示你当前电脑上所有的存储设备，根据你U盘的大小，可以很清楚的找到哪个是你的U盘，一般是在最下面那个，由于我安装的有机械硬盘，固态硬盘，所有第三块才是我的U盘，你根据自己的情况进行判断。<br>下一步通过命令：<font color="Lime">seletc disk 2</font> 根据自己的实际情况进行选择，磁盘格式化是危险的操作，所以一定要谨慎，仔细看清楚选择的是不是U盘。<br>再通过：<font color="Lime">list disk</font> 查看，如果选中的话，在存储介质前面会有一个*号。<br>然后：<font color="Lime">clean</font> 这时候你的U盘就处于未分配状态</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/5.png" alt="5"></p>
<p>可以通过点击我的电脑右键–&gt;管理–&gt;磁盘管理–&gt;找到下面有一块未分配的介质，就是你的U盘了，你可以通过新建简单卷，下一步，下一步到最后完成就可以了(之所以显示的是7.5G是因为我32G的U盘安装好了，不想再重新安装了，很费时间，就拿这个8G的来截图，过程还是按照32G USB3.0进行操作的)。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/6.png" alt="6"></p>
<blockquote>
<h3 id="使用MiniTool进行分区"><a href="#使用MiniTool进行分区" class="headerlink" title="使用MiniTool进行分区"></a>使用MiniTool进行分区</h3></blockquote>
<p>我更推荐使用这种方法对U盘进行分区操作，因为在后面的安装Kali的过程中，分区的时候，会把U盘格式设置为Ext4格式，使用上面的方法给U盘分区，默认使用的是FAT格式，这就有可能在后面的安装中分区哪一步会出现“在scs11(sda)设备的第1分区上创建ext4文件系统失败”这样的错误，所以，我们在安装的之前就先把U盘格式化成Ext4个格式，这样就确保不会出现上面的错误。<br>在Windows下使用MiniTool软件进行格式化，文末会给出下载链接。<br>软件安装好打开后是这个样子的，我框起来的地方就是我们的U盘</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/7.png" alt="7"></p>
<p>鼠标点击右键–&gt;create</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/8.png" alt="8"></p>
<p>接着划分大小以及格式，格式选择Ext4，Create As：Logical。大小根据你U盘的大小进行调整，但是要记得留出来2G的空间，分配给Linux Swap分区，剩下就都默认就可以了</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/9.png" alt="9"></p>
<p>然后相同的步骤创建Linux Swap分区</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/10.png" alt="10"></p>
<p>最后设置好后如下画面，最后点击Apply等待完成就可以了。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/11.png" alt="11"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/12.png" alt="12"></p>
<p>U盘的设置就全部完成了，下面就开始安装系统了。</p>
<blockquote>
<h3 id="使用VM创建系统"><a href="#使用VM创建系统" class="headerlink" title="使用VM创建系统"></a>使用VM创建系统</h3></blockquote>
<p>打开我们的VMware，选择新建虚拟机，典型安装即可：<br><img src="http://ou22pglma.bkt.clouddn.com/13.PNGhttp://ou22pglma.bkt.clouddn.com/12.png" alt="13"></p>
<p>然后选择你的kali系统。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/14.PNG" alt="14"></p>
<p>下面的安装图上的进行操作就行了：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/15.PNG" alt="15"></p>
<p>下面这一步选择安装位置，无所谓，随便选哪都行，这只是一个过程，后面我们还要把这个硬盘删掉，然后添加我们的U盘，作为安装介质：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/16.PNG" alt="16"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/17.PNG" alt="17"></p>
<p>点击完成即可：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/18.PNG" alt="18"></p>
<p>下面点击编辑虚拟机设置：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/19.png" alt="19"></p>
<p>把刚刚设置的20G硬盘移除，然后点添加新的硬盘：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/20.png" alt="20"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/21.png" alt="21"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/22.PNG" alt="22"></p>
<p>然后选择使用物理磁盘：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/23.png" alt="23"></p>
<p>然后选择你的U盘，如果你是按照上面的步骤一步一步做下来的，这里U盘的区分应该能够区分出来，因为上面也用到了。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/24.png" alt="24"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/25.PNG" alt="25"></p>
<p>通过这一步确定选择的是否是自己的U盘。</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/26.png" alt="26"></p>
<p>然后开启虚拟机选择图形化安装：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/27.png" alt="27"></p>
<p>然后选择中文简体，汉语，中国，时区，设置主机名，域名（随便写，不写也可以），密码，设置时钟都比较简单，就不再截图浪费时间了：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/28.png" alt="28"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/29.PNG" alt="29"></p>
<p>下面会检测硬盘，如果你是严格按照上面的步骤来的，这一步会出现如下画面，选择使用整个磁盘：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/30.PNG" alt="30"></p>
<p>下面会显示你的U盘：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/31.png" alt="31"></p>
<p>下一步，新手的话使用推荐就可以了：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/32.PNG" alt="32"></p>
<p>点击分区设定结束并将修改写入磁盘–&gt;继续：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/33.PNG" alt="33"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/34.png" alt="34"></p>
<p>下面这一步就是把分区格式成Ext4格式，如果你在前面按照步骤(使用MiniTool把U盘格式化为Ext4格式)，就已经提前把分区格式化成Etx4格式了，这一步将非常的快：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/35.PNG" alt="35"></p>
<p>下面就真的开始往U盘里面写入数据了，可能过程有点长（不要看进度条不动就以为出问题了），这很正常，往U盘里写数据本来就慢，所以静静的等着完成就好了：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/36.PNG" alt="36"></p>
<p>下面是安装过程中需要点击的选项：</p>
<p><img src="http://ou22pglma.bkt.clouddn.com/37.png" alt="37"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/38.png" alt="38"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/39.png" alt="39"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/40.png" alt="40"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/41.png" alt="41"></p>
<p><img src="http://ou22pglma.bkt.clouddn.com/42.png" alt="42"></p>
<p>安装到这里就全部完成了，只需要开机的时候设置从U盘启动就可以了。</p>
<blockquote>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3></blockquote>
<p><a href="http://ou22pglma.bkt.clouddn.com/Win32Disklmager.rar" target="_blank" rel="external">Win32Diskimager下载</a><br><a href="http://ou22pglma.bkt.clouddn.com/MiniTool.rar" target="_blank" rel="external">MiniTool下载</a></p>
<blockquote>
<p>码字不易，如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏，支持博主继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Kali Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[论备份的重要性！！！]]></title>
      <url>/2017/07/28/%E8%AE%BA%E5%A4%87%E4%BB%BD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%EF%BC%81%EF%BC%81%EF%BC%81/</url>
      <content type="html"><![CDATA[<h2 id="程序员一定要有备份的意识！！！"><a href="#程序员一定要有备份的意识！！！" class="headerlink" title="程序员一定要有备份的意识！！！"></a><font color="rad">程序员一定要有备份的意识！！！</font></h2><h2 id="程序员一定要有备份的意识！！！-1"><a href="#程序员一定要有备份的意识！！！-1" class="headerlink" title="程序员一定要有备份的意识！！！"></a><font color="rad">程序员一定要有备份的意识！！！</font></h2><h2 id="程序员一定要有备份的意识！！！-2"><a href="#程序员一定要有备份的意识！！！-2" class="headerlink" title="程序员一定要有备份的意识！！！"></a><font color="rad">程序员一定要有备份的意识！！！</font></h2><blockquote>
<h2 id="悲惨经历"><a href="#悲惨经历" class="headerlink" title="悲惨经历"></a>悲惨经历</h2></blockquote>
<p>无论是什么，特别是数据，一定要记得备份，还要记得不要备份在一个地方。云盘，网盘，硬盘，U盘都要备份。不要等到数据丢失的时候再后悔。讲一下博主今天的经历吧。</p>
<p>今天，下午我照常登录我的服务器（Ubuntu14.04），然后我看有一条提示，匆匆看到了更新两个字，就把命令打上运行了，也没多想。运行的过程中我才意识到，我刚刚运行的命令是在更新系统，从Ubuntu14.04 —&gt; Ubuntu16.06。我逐渐意识到事情的严重性，因为我的博客就是以Ubuntu14.04为基础进行搭建的，当然Ubuntu16.04也可以搭建。但是这种升级升上去的，很多配置都会改变，特别有一点是在Ubuntu14.04下，使用的是PHP5-FPM,而在Ubuntu16.04下使用的是PHP7.0，并且默认没有PHP5-FPM。看着升级完的系统，我尝试搜索我的博客，打开后提示404 Not Found。我就知道会出现问题。但是我还是冷静了下来，思考着解决办法。<br>我的思路是这样的：首先，Ubuntu16.04也是可以搭建WordPress的，唯一的区别在于PHP版本的不同，以及配置的不同，我打算重新配置PHP，使新系统和我的WordPress能够成功连接。于是我就查找一些按照Ubuntu16.04的方法搭建wordpress的方法，再进行到一步防火墙的配置的时候。按照他的方法进行配置的，结果把我自己也给拦到墙外面了 <img class="github-emoji" title="cry" alt="cry" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f622.png?v7" height="20" width="20"> ，真是欲哭无泪啊。然后自己就死活连接不上服务器。通过Digitalocean的管理页面的Console连接上了服务器，也把防火墙关掉了，但是在其他地方还是连接不上服务器。也没法进行操作，无奈之下，我只好把服务器rebuild了 </p>
<blockquote>
<h2 id="补救措施"><a href="#补救措施" class="headerlink" title="补救措施"></a>补救措施</h2></blockquote>
<p>我用最短的时间把博客进行了恢复，从零开始恢复。<br>这多亏了，我之前的备份，我重新搭建了LEMP环境，重新安装WordPress，我把我之前备份的WordPress文件对新安装的文件进行了替换。这样只能把原先的插件以及主题，网站配置恢复，数据还是没法恢复。因为数据是存放在数据库里面的。<br>数据库在之前我也进行了备份，可以安装PHPMyAdmin，通过它把数据库文件导出，恢复的时候，只需要还使用它进行导入就可以了。这样你的数据，文章，评论，等等都可以恢复原样了。<br>虽然我有备份文件，但是恢复的时候还是少了两篇文章 <img class="github-emoji" title="cry" alt="cry" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f622.png?v7" height="20" width="20"> 。之所以少，是因为我备份的时候，这两篇文章还没有写，不过我会尽快补上的。<br>给大家推荐一个WordPress备份的神器：backupwordpress<br>这个可以设置定时备份，还支持备份完发送到邮箱，还可以直接下载到本地（推荐），强烈推荐，不定时手工备份，然后随手下载到本地，以备不时之需。博主就是下载到本地，这次恢复真是有惊无险。</p>
<blockquote>
<h3 id="再次强调，一定要进行备份！"><a href="#再次强调，一定要进行备份！" class="headerlink" title="再次强调，一定要进行备份！"></a>再次强调，一定要进行备份！</h3></blockquote>
<p>因为意外可能随时都会发生，唯有做了备份，才能把损失降到最小，备份也是有原则的，备份至少要分三份，不要备份在同一个地方，如果你都备份在电脑里面，如果电脑损坏了，备份再多份也没用，最好在电脑、U盘、网盘各备份一份。这样最为保险。</p>
<p>特别是站长，服务器管理者，备份是首要任务，试想一下，自己辛辛苦苦经营的网站，因为某些未知错误，从这个世界上消失了（如果你没有备份的话），你自己想一下这该是怎样的一种心情？</p>
<blockquote>
<p>做好备份也很简单，首先安装backupwordpress，把网站所有文件和数据库一起备份，然后下载到本地。<br>在服务器上安装PHPMyAdmin，把数据库再进行导出。<br>如果你的服务器出现问题，你需要重建，只需要把WordPress文件进行替换，当然替换后文件相应的权限还是需要更改的，然后安装PHPMyAdmin，把数据库进行导入。你的网站就可以在很短的时间内进行恢复了。</p>
</blockquote>
<hr>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPMyAdmin </tag>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Python对账单进行分析（续）]]></title>
      <url>/2017/07/24/%E4%BD%BF%E7%94%A8Python%E5%AF%B9%E8%B4%A6%E5%8D%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%88%E7%BB%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前两天给自己挖过坑之后，今天就来填上。上篇文章《<a href="http://bbiao.me/2017/07/23/%E4%BD%BF%E7%94%A8Python%E5%AF%B9%E8%B4%A6%E5%8D%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/" target="_blank" rel="external">使用Python对账单进行分析</a>》，这篇文章里面写了使用python对账单进行分析，并画出了饼图。<br>这里我们再进一步分析，饼图可以清晰的看出不同种类的消费所占的比例，但是具体的数额不是很清晰。这里我们使用柱状图来对账单进行进一步的分析。<br>数据还是使用的上篇文章所给数据。</p>
<h2 id="要用到的库函数"><a href="#要用到的库函数" class="headerlink" title="要用到的库函数"></a>要用到的库函数</h2></blockquote>
<ol>
<li>json库：<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p02_read-write_json_data.html" target="_blank" rel="external">json模块</a>是一个非常好用的模块，上篇文章也对json模块进行了简单的介绍，这里就不再多说了。</li>
<li>numpy库：NumPy是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。可以说numpy就是一个专门用来做数学的一个函数库。</li>
<li>matplotlib模块：是一个python专门用来画图的库函数（上篇文章有介绍）</li>
</ol>
<blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></blockquote>
<p>可以看到只要涉及到编程的文章，我大部分会把思路列出了，只有思路清晰，才能够一步步实现目标。<br>这里我们要画柱状图，当然这里和我们上篇文章里画饼图的思路差不多。</p>
<ul>
<li>第一步：对数据进行处理</li>
<li>第二步：把数据读取进来</li>
<li>第三步，对数据进行分析</li>
<li>第四步：画图</li>
</ul>
<p>有了思路，下面就可以一步一步的进行实现了。</p>
<blockquote>
<h3 id="前两步跟上篇文章画饼图的操作一样，我们直接从第三步开始分析："><a href="#前两步跟上篇文章画饼图的操作一样，我们直接从第三步开始分析：" class="headerlink" title="前两步跟上篇文章画饼图的操作一样，我们直接从第三步开始分析："></a>前两步跟上篇文章画饼图的操作一样，我们直接从第三步开始分析：</h3></blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">path = <span class="string">'D:/交流账单.txt'</span></div><div class="line">records = [json.loads(<span class="built_in">line</span>) <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">open</span>(path)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">705</span>):</div><div class="line">    <span class="keyword">items</span> = records[i]</div><div class="line">    <span class="keyword">if</span> <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'餐饮'</span>:</div><div class="line">        food += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'花钱'</span>:</div><div class="line">        spend_money += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'交通'</span>:</div><div class="line">        traffic += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'水果'</span>:</div><div class="line">        fruit += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'电影'</span>:</div><div class="line">        movies += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'话费'</span>:</div><div class="line">        bill += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'零食'</span>:</div><div class="line">        snacks += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'服饰'</span>:</div><div class="line">        clothes += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'日用品'</span>:</div><div class="line">        daily_necessities += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div></pre></td></tr></table></figure>
<p>上面通过json.loads()把账单一行一行的读取进来并放在python的列表中，并把这个列表赋值给records变量。<br>这样我们就可以通过records[i]来访问具体的行：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/1.PNG" alt="3"></p>
<p>然后通过一个简单的循环，把每一行都通过遍历的方式进行访问。<br>我们首先是按照账目分类进行统计，如果该行的“账目分类”是“餐饮”，我们就把该行的账目金额进行累加。<br>其他分类同理，所以我们需要把每一行的“账目分类”单拿出来。<br>我们使用变量 items[‘账目分类’] ，把records[i]下的“账目分类”单拿出来。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'餐饮'</span>:</div><div class="line">        food += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div></pre></td></tr></table></figure>
<p>如果账目分类是“餐饮”，那么该行的“账目金额”就进行累加，并赋值给food变量。使用float是把字符型强制转换成浮点型，读进来的是文本内容，不进行转换是没办法计算的。<br>其他的类型与这个同理。</p>
<blockquote>
<p>第三步的分析，我们都做了哪些东西：</p>
</blockquote>
<ul>
<li><p>首先把数据按行读取赋给records，并且把每一行的“账目分类”通过items进行访问.</p>
</li>
<li><p>然后使用for循环对没一行的数据进行统计，如果它属于某一个分类，就把它的“账目金额”累加到这个分类里面。</p>
</li>
<li>最终会把所有的分类的具体金额统计出来，下一步就是使用这里统计的数据进行画图。</li>
</ul>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] </div><div class="line"># plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=False   #如果有负号，加上这一行代码</div><div class="line"><span class="keyword">size</span> = <span class="number">9</span></div><div class="line">x = np.arange(<span class="keyword">size</span>)</div><div class="line">labels = [<span class="string">'餐饮'</span>,<span class="string">'其他'</span>,<span class="string">'交通'</span>,<span class="string">'电影'</span>,<span class="string">'话费'</span>,<span class="string">'零食'</span>,<span class="string">'水果'</span>,<span class="string">'服饰'</span>,<span class="string">'日用品'</span>]</div><div class="line">y = [<span class="keyword">abs</span>(<span class="keyword">int</span>(food)),<span class="keyword">abs</span>(<span class="keyword">int</span>(spend_money)),<span class="keyword">abs</span>(<span class="keyword">int</span>(traffic)),<span class="keyword">abs</span>(<span class="keyword">int</span>(movies)),<span class="keyword">abs</span>(<span class="keyword">int</span>(bill)),<span class="keyword">abs</span>(<span class="keyword">int</span>(snacks)),<span class="keyword">abs</span>(<span class="keyword">int</span>(fruit)),<span class="keyword">abs</span>(<span class="keyword">int</span>(clothes)),<span class="keyword">abs</span>(<span class="keyword">int</span>(daily_necessities))]</div><div class="line">colors = [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'gold'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'lightcoral'</span>,<span class="string">'lightgray'</span>,<span class="string">'lime'</span>,<span class="string">'skyblue'</span>]</div><div class="line">plt.title(u<span class="string">'交流消费账单统计图\n'</span>)</div><div class="line">plt.bar(range(len(y)),y,width=<span class="number">0.8</span>,tick_label=labels,<span class="keyword">color</span>=colors)</div><div class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> zip(x,y):</div><div class="line">    plt.<span class="keyword">text</span>(a, b+<span class="number">0.8</span>, <span class="string">'%.0f元'</span> %b, ha=<span class="string">'center'</span>, va = <span class="string">'bottom'</span>, fontsize=<span class="number">10</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p>matplotlib默认是不支持中文的，如果想使用中文的标签，需要加上第一行行代码。</p>
</blockquote>
<hr>
<blockquote>
<h3 id="画柱状图需要的一些参数"><a href="#画柱状图需要的一些参数" class="headerlink" title="画柱状图需要的一些参数"></a>画柱状图需要的一些参数</h3></blockquote>
<p>size ： 设置有几个柱状，就是你分类的个数<br>labels :标签，显示在柱状图下面<br>y ：这个y是变量，可以换成其他字母，但是一般用y表示纵轴范围，x表示横轴范围<br>title :图的标题<br>color :柱状的颜色，也可以使用’rgb’来表示“red”，‘green’，‘blue’<br>bar ：柱状图的函数(x的范围,y的范围,柱状图的宽度，使用自定义的标签，使用自定义的颜色)，如果是饼图的话就是pie。<br>zip()函数：这个是用来在柱状图上面添加文字信息的，比如把具体的数额显示在柱状图上方，其中plt.text()就是自定义内容，(a,b+0.8, ‘%.0f元’ %b, ha=’center’, va = ‘bottom’, fontsize=10)表示在x轴每个柱状图上方上移0.8的位置处，添加上具体的数据，居中显示，字号是10）<br>show :如果想让图显示出来，需要加上show</p>
<p>附上效果图：<br><img src="http://othwobwlu.bkt.clouddn.com/%E6%9F%B1%E7%8A%B6%E5%9B%BE.PNG" alt="4"></p>
<blockquote>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3></blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env <span class="keyword">python3</span></div><div class="line"># -*- codin<span class="variable">g:utf</span>-<span class="number">8</span> -*-</div><div class="line"> </div><div class="line">import json</div><div class="line">import numpy <span class="keyword">as</span> np</div><div class="line">import matplotlib.pyplot <span class="keyword">as</span> plt </div><div class="line"> </div><div class="line">food = spend_money = traffic = fruit = movies = bill = snacks = clothes = daily_necessities = <span class="number">0</span></div><div class="line"> </div><div class="line">path = <span class="string">'D:/交流账单.txt'</span></div><div class="line">records = [json.loads(<span class="built_in">line</span>) <span class="keyword">for</span> <span class="built_in">line</span> in <span class="keyword">open</span>(path)]</div><div class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">705</span>):</div><div class="line">    <span class="built_in">items</span> = records[i]</div><div class="line">    <span class="keyword">if</span> <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'餐饮'</span>:</div><div class="line">        food += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'花钱'</span>:</div><div class="line">        spend_money += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'交通'</span>:</div><div class="line">        traffic += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'水果'</span>:</div><div class="line">        fruit += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'电影'</span>:</div><div class="line">        movies += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'话费'</span>:</div><div class="line">        bill += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'零食'</span>:</div><div class="line">        snacks += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'服饰'</span>:</div><div class="line">        clothes += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'日用品'</span>:</div><div class="line">        daily_necessities += float(<span class="built_in">items</span>[<span class="string">'账目金额'</span>])</div><div class="line"> </div><div class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] </div><div class="line">size = <span class="number">9</span></div><div class="line"><span class="keyword">x</span> = np.arange(size)</div><div class="line">labels = [<span class="string">'餐饮'</span>,<span class="string">'其他'</span>,<span class="string">'交通'</span>,<span class="string">'电影'</span>,<span class="string">'话费'</span>,<span class="string">'零食'</span>,<span class="string">'水果'</span>,<span class="string">'服饰'</span>,<span class="string">'日用品'</span>]</div><div class="line"><span class="keyword">y</span> = [<span class="built_in">abs</span>(<span class="keyword">int</span>(food)),<span class="built_in">abs</span>(<span class="keyword">int</span>(spend_money)),<span class="built_in">abs</span>(<span class="keyword">int</span>(traffic)),<span class="built_in">abs</span>(<span class="keyword">int</span>(movies)),<span class="built_in">abs</span>(<span class="keyword">int</span>(bill)),<span class="built_in">abs</span>(<span class="keyword">int</span>(snacks)),<span class="built_in">abs</span>(<span class="keyword">int</span>(fruit)),<span class="built_in">abs</span>(<span class="keyword">int</span>(clothes)),<span class="built_in">abs</span>(<span class="keyword">int</span>(daily_necessities))]</div><div class="line">colors = [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'gold'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'lightcoral'</span>,<span class="string">'lightgray'</span>,<span class="string">'lime'</span>,<span class="string">'skyblue'</span>]</div><div class="line">plt.title(<span class="keyword">u</span><span class="string">'交流消费账单统计图\n'</span>)</div><div class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(<span class="keyword">y</span>)),<span class="keyword">y</span>,width=<span class="number">0.8</span>,tick_label=labels,color=colors)</div><div class="line"><span class="keyword">for</span> <span class="keyword">a</span>,<span class="keyword">b</span> in zip(<span class="keyword">x</span>,<span class="keyword">y</span>):</div><div class="line">    plt.text(<span class="keyword">a</span>, <span class="keyword">b</span>+<span class="number">0.8</span>, <span class="string">'%.0f元'</span> %<span class="keyword">b</span>, <span class="keyword">ha</span>=<span class="string">'center'</span>, va = <span class="string">'bottom'</span>, fontsize=<span class="number">10</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="数据按月统计"><a href="#数据按月统计" class="headerlink" title="数据按月统计"></a>数据按月统计</h2></blockquote>
<p>这只是显示了每一种类的统计，我还对每个月份的消费进行了统计。<br>先上效果图：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/%E6%9C%88%E4%BB%BD%E7%BB%9F%E8%AE%A1%E5%9B%BE.png" alt="5"></p>
<blockquote>
<h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3></blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"> </div><div class="line">import json</div><div class="line">import numpy <span class="keyword">as</span> np</div><div class="line">import matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"> </div><div class="line">Aug_16 = Sup_16 = Oct_16 = Noc_16 = Dec_16 = Jan_17 = Feb_17 = Mar_17 = Apr_17 = May_17 = Jun_17 = <span class="number">0</span></div><div class="line">path = <span class="string">'/交流账单.txt'</span></div><div class="line">records = [json.loads(<span class="built_in">line</span>) <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">open</span>(path)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">705</span>):</div><div class="line">    <span class="keyword">items</span> = records[i]</div><div class="line">    <span class="built_in">time</span> = <span class="keyword">items</span>[<span class="string">'时间'</span>]</div><div class="line">    <span class="keyword">if</span> <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2016'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'08'</span>:</div><div class="line">        Aug_16 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2016'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'09'</span>:</div><div class="line">        Sup_16 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2016'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'10'</span>:</div><div class="line">        Oct_16 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2016'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'11'</span>:</div><div class="line">        Noc_16 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2016'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'12'</span>:</div><div class="line">        Dec_16 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'01'</span>:</div><div class="line">        Jan_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'02'</span>:</div><div class="line">        Feb_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'03'</span>:</div><div class="line">        Mar_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'04'</span>:</div><div class="line">        Apr_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'05'</span>:</div><div class="line">        May_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="built_in">time</span>[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">'2017'</span> <span class="keyword">and</span> <span class="built_in">time</span>[<span class="number">5</span>:<span class="number">7</span>] == <span class="string">'06'</span>:</div><div class="line">        Jun_17 += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line"> </div><div class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</div><div class="line">size = <span class="number">11</span></div><div class="line">x = np.arange(size)</div><div class="line">plt.title(<span class="string">'2016至2017交流账单统计图'</span>)</div><div class="line">labels = [<span class="string">'八月'</span>,<span class="string">'九月'</span>,<span class="string">'十月'</span>,<span class="string">'十一月'</span>,<span class="string">'十二月'</span>,<span class="string">'一月'</span>,<span class="string">'二月'</span>,<span class="string">'三月'</span>,<span class="string">'四月'</span>,<span class="string">'五月'</span>,<span class="string">'六月'</span>]</div><div class="line">y = [<span class="built_in">abs</span>(int(Aug_16)),<span class="built_in">abs</span>(int(Sup_16)),<span class="built_in">abs</span>(int(Oct_16)),<span class="built_in">abs</span>(int(Noc_16)),<span class="built_in">abs</span>(int(Dec_16)),<span class="built_in">abs</span>(int(Jan_17)),<span class="built_in">abs</span>(int(Feb_17)),<span class="built_in">abs</span>(int(Mar_17)),<span class="built_in">abs</span>(int(Apr_17)),<span class="built_in">abs</span>(int(May_17)),<span class="built_in">abs</span>(int(Jun_17))]</div><div class="line">colors = [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'gold'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'lightcoral'</span>,<span class="string">'lightgray'</span>,<span class="string">'lime'</span>,<span class="string">'skyblue'</span>,<span class="string">'red'</span>,<span class="string">'green'</span>]</div><div class="line">plt.bar(range(<span class="built_in">len</span>(y)),y,width=<span class="number">0.8</span>,tick_label=labels,color=colors)</div><div class="line"><span class="keyword">for</span> <span class="keyword">a</span>,b <span class="keyword">in</span> zip(x,y):</div><div class="line">    plt.<span class="keyword">text</span>(<span class="keyword">a</span>,b+<span class="number">0.8</span>,<span class="string">'%.0f元'</span> %b, ha = <span class="string">'center'</span>, va = <span class="string">'bottom'</span>,fontsize = <span class="number">10</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>这里的思路以及代码和上面的大同小异，这里不再进行多余的分析。如果有不理解或不正确的地方，欢迎给博主留言，与博主进行交流。</p>
<p>完整的项目我会提交到<a href="https://github.com/Tactful-biao/billing_analysis" target="_blank" rel="external">我的GitHub</a>上，感兴趣的朋友可以去看看。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Python对账单进行分析]]></title>
      <url>/2017/07/23/%E4%BD%BF%E7%94%A8Python%E5%AF%B9%E8%B4%A6%E5%8D%95%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h2></blockquote>
<p>python是一门十分灵活的语言，你可以用Python做很多你想做的事情，Python可以像excel一样对数据进行处理，Python有专门用来做科学计算的模块。</p>
<h3 id="有人会问为什么不直接用excel对数据而选择Python对数据进行处理？"><a href="#有人会问为什么不直接用excel对数据而选择Python对数据进行处理？" class="headerlink" title="有人会问为什么不直接用excel对数据而选择Python对数据进行处理？"></a><strong><em>有人会问为什么不直接用excel对数据而选择Python对数据进行处理？</em></strong></h3><p>excel处理小规模的数据固然很方便，但是当数据规模达到一定程度的时候，excel就有点乏力了。</p>
<h3 id="有人还会问当数据规模打到一定程度为什么不选择sql而选择Python？"><a href="#有人还会问当数据规模打到一定程度为什么不选择sql而选择Python？" class="headerlink" title="有人还会问当数据规模打到一定程度为什么不选择sql而选择Python？"></a><strong><em>有人还会问当数据规模打到一定程度为什么不选择sql而选择Python？</em></strong></h3><p>因为Python比较灵活，Python可以提供一整套的数据采集，清洗，分析的工具。Python是一门多功能的语言。数据统计是更多是通过第三方包来实现的。</p>
<blockquote>
<h2 id="Python-数据分析常用库函数"><a href="#Python-数据分析常用库函数" class="headerlink" title="Python 数据分析常用库函数"></a>Python 数据分析常用库函数</h2></blockquote>
<h3 id="1-pandas"><a href="#1-pandas" class="headerlink" title="1. pandas"></a>1. pandas</h3><p>Pandas包含高级数据结构，以及和让数据分析变得快速、简单的工具。它建立在NumPy之上，使以NumPy为中心的应用变得简单。<br>Pandas是进行数据清洗/整理（data munging）的最好工具。<br>详情请参考<a href="http://pandas.pydata.org/pandas-docs/stable/10min.html" target="_blank" rel="external">这里</a></p>
<h3 id="2-numpy"><a href="#2-numpy" class="headerlink" title="2. numpy"></a>2. numpy</h3><p>对于科学计算，它是Python创建的所有更高层工具的基础，NumPy不提供高级数据分析功能，但有了对NumPy数组和面向数组的计算的理解，能帮助你更有效地使用像Pandas之类的工具。<br>参考<a href="https://vimeo.com/77263537" target="_blank" rel="external">视频教程</a> </p>
<h3 id="3-scripy"><a href="#3-scripy" class="headerlink" title="3. scripy"></a>3. scripy</h3><p>Scipy库依赖于NumPy，它提供便捷和快速的N维向量数组操作。SciPy库的建立就是和NumPy数组一起工作，并提供许多对用户友好的和有效的数值例程，如：数值积分和优化。SciPy提供模块用于优化、线性代数、积分以及其它数据科学中的通用任务。<br><a href="https://docs.scipy.org/doc/scipy/reference/tutorial/" target="_blank" rel="external">参考教程</a></p>
<h3 id="4-matplotlib"><a href="#4-matplotlib" class="headerlink" title="4. matplotlib"></a>4. matplotlib</h3><p>Matlplotlib是Python的一个可视化模块。它让你方便地制作线条图、饼图、柱状图以及其它专业图形。使用Matplotlib，你可以定制所做图表的任一方面。在IPython中使用时，Matplotlib有一些互动功能，如：缩放和平移。它支持所有的操作系统下不同的GUI后端（back ends），并且可以将图形输出为常见地矢量图和图形格式，如：PDF、SVG、JPG、PNG、BMP和GIF等。</p>
<h3 id="5-Scikit-learn"><a href="#5-Scikit-learn" class="headerlink" title="5. Scikit-learn"></a>5. Scikit-learn</h3><p>Scikit-learn是一个用于机器学习的Python模块。它建立在Scipy之上，提供了一套常用机器学习算法，让使用者通过一个统一的接口来使用。Scikit-learn有助于你迅速地在你的数据集上实现流行的算法。<br>内置各<a href="http://scikit-learn.org/stable/user_guide.html" target="_blank" rel="external">算法教程</a>  </p>
<blockquote>
<h2 id="数据分析IDE"><a href="#数据分析IDE" class="headerlink" title="数据分析IDE"></a>数据分析IDE</h2></blockquote>
<h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p><strong><em>为什么选择IPython？</em></strong><br>IPython集合了Python的交互界面，最主要的是IPython集合了许多用来科学计算的工具，使用其他非常的方便。</p>
<p><strong><em>IPython安装可以<a href="https://ipython.org/install.html" target="_blank" rel="external">参考这里</a></em></strong></p>
<blockquote>
<h2 id="本文由来"><a href="#本文由来" class="headerlink" title="本文由来"></a>本文由来</h2></blockquote>
<p>博主大二这一年是在中科大度过的，因为从小到大都是自己一个人在外面上学，生活费都是家里给，平时也没多注意，开学的时候突然有个念头，打算正好利用这一年，做一个统计。看看自己这一年到底能化多少钱。这就是账单的由来，全部数据都是真是的，博主没进行一笔花费，就会进行一次记录。从入学的那一天，一直到离校的那一天。<br>账单的目的当初只是打算统计一下自己这一年期间到底能花多少钱，后来打算既然有账单，何不对账单分析一下呢，本来打算用Excel对这一年的账单进行分析的。但是随着对Python的学习，就打算使用Python对自己的账单进行分析，正好也加深自己对Python的理解。于是就有了这个小程序，上一篇《<a href="http://bbiao.me/2017/07/21/%E4%BD%BF%E7%94%A8python%E7%BC%96%E5%86%99%E5%A4%A9%E6%B0%94%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%A8%8B%E5%BA%8F" target="_blank" rel="external">使用Python编写天气查询小程序</a>》就是在编写这个小程序的过程中突发灵感，才有了那个小程序。</p>
<blockquote>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2></blockquote>
<p>编程思路很重要，一定要有清晰的思路，才能够一步一步地去解决问题。</p>
<ul>
<li>对数据进行处理</li>
<li>把数据读取进来</li>
<li>对数据进行分析</li>
<li>画图</li>
</ul>
<p>既然有了思路，下面就是一步一步按照步骤来就可以了。</p>
<blockquote>
<h3 id="第一步：对数据进行处理"><a href="#第一步：对数据进行处理" class="headerlink" title="第一步：对数据进行处理"></a>第一步：对数据进行处理</h3></blockquote>
<p>我们使用Python的<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p02_read-write_json_data.html" target="_blank" rel="external">json模块</a><br>所以第一步，我们需要把数据进行处理，把数据处理成可以通过json进行读取转换的格式，Python的元组可以和json的数据结构进行转换</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/json2tuple" alt="8"></p>
<p>可以使用一个在线转网址，直接把数据粘贴进去，就可以进行转换了。<br><a href="https://shancarter.github.io/mr-data-converter/" target="_blank" rel="external">在线转换网址</a></p>
<p>下面是excel中的数据：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-103504_348x789_scrot.png" alt="10"></p>
<p>下面是把需要进行数据分析的内容进行转换(当然python也有支持直接对csv数据进行直接处理的库，博主做爬虫经常会跟json数据打交道，所以选择转换成json格式)：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-104137_1081x722_scrot.png" alt="11"></p>
<p>将下面转换好的数据复制出来，保存在本地，保存成txt格式，然后再通过查找替换把 }, —&gt; } 并且把开头的”[“和结尾的”]” 删掉，这样就成了标准的数据文件。<br><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-103504_348x789_scrot.png" alt="12"></p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-105324_1320x692_scrot.png" alt="13"></p>
<p>这是最终的数据类型：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-105448_788x764_scrot.png" alt="14"></p>
<blockquote>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3></blockquote>
<p><strong>python文件读取</strong><br>Python的文件读取函数open函数，十分的灵活和方便，对于文件的读取，只需要一句简单的语句就可以实现，再一次证明了Python的简单与强大。<br>open 多数时间会和with进行搭配（和with进行搭配不需要考虑文件的关闭，with会自动处理）<br>读取操作有一下几种常用的模式：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'something.txt'</span>,<span class="string">"r"</span>)            <span class="comment">#以只读的方式对文件进行读取，不能写入（第二个参数如果不写的话，默认是以“r”的模式打开）</span></div><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"something.txt"</span>,<span class="string">"w"</span>)         <span class="comment">#以写的方式对文件进行读取，可以写入</span></div><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"something.txt"</span>,<span class="string">"rb"</span>)        <span class="comment">#以二进制的方式进行读取</span></div><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"something.txt"</span>.<span class="string">"wb"</span>)       <span class="comment">#以二进制的方式进行写入</span></div></pre></td></tr></table></figure>
<p>以上是对文件读取常用的方法，当然还有其他的读写方式，open的使用比较灵活。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">path</span> = <span class="string">'/root/下载/交流账单.txt'</span>       #文件所在路径</div><div class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="built_in">path</span>)]       #通过<span class="built_in">open</span>(<span class="built_in">path</span>)读取内容，然后通过<span class="keyword">for</span>循环依次把内容转换成标准的json数据。再把数据放在一个Python的列表中</div></pre></td></tr></table></figure>
<p>通过上面的代码，就可以对数据进行一行一行的读取了：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-111541_942x375_scrot.png" alt="15"></p>
<blockquote>
<h3 id="第三步：对数据进行分析"><a href="#第三步：对数据进行分析" class="headerlink" title="第三步：对数据进行分析"></a>第三步：对数据进行分析</h3></blockquote>
<p>上一步，我们已经把数据读取进来了，这一步就开始对数据进行分析，我们最终目的是要把数据进行整合，然后进行分析，我们是以“账目分类”来作为统计的标准的。这里我们先做一个“饼图”，因为饼图比较直观，后面我们再做折线图（先给自己挖坑）。制作饼图，需要分块，账目分类有好几种，我们通过饼图可以看出来在哪一种类上，我们的消费最多。<br>因为我们的数据都是整行的，通过txt文本就可以直接看到数据有多少行：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">705</span>):             <span class="comment">#把所有的数据都读一遍</span></div><div class="line">    <span class="keyword">items</span> = records[i]           <span class="comment">#首先把每一行的数据首先赋值给items</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'餐饮'</span>:             <span class="comment">#如果这一行的账目分类是餐饮的话，就把这一行下的账目金额加起来放到food这个变量里</span></div><div class="line">        food += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])      <span class="comment"># float的作用是把读取进来的“账目金额”强制转换成浮点型，因为读取进来默认是字符型，不转换没法计算</span></div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'花钱'</span>:       <span class="comment"># 与上面同理，下面的也都一样</span></div><div class="line">        spend_money += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'交通'</span>:</div><div class="line">        traffic += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'水果'</span>:</div><div class="line">        fruit += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'电影'</span>:</div><div class="line">        movies += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'话费'</span>:</div><div class="line">        bill += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'零食'</span>:</div><div class="line">        snacks += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'服饰'</span>:</div><div class="line">        clothes += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div><div class="line">    elif <span class="keyword">items</span>[<span class="string">'账目分类'</span>] == <span class="string">'日用品'</span>:</div><div class="line">        daily_necessities += float(<span class="keyword">items</span>[<span class="string">'账目金额'</span>])</div></pre></td></tr></table></figure>
<p>然后就可以通过print打印出来统计好的每项的金额。通过如下命令可以打印结果：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(<span class="built_in">int</span>(food)))      #<span class="built_in">abs</span>是去绝对值函数（因为数据中消费是用负数表示的），<span class="built_in">int</span>的作用是把计算出来的浮点类型，转换成我们所熟悉的整型</div></pre></td></tr></table></figure>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-112914_868x698_scrot.png" alt="16"></p>
<blockquote>
<h3 id="最后一步：画图"><a href="#最后一步：画图" class="headerlink" title="最后一步：画图"></a>最后一步：画图</h3></blockquote>
<p><strong>Matplotlib 画图</strong><br>前面已经对数据进行了处理，读取，分析。下面就是利用这些处理分析好的数据进行画图。<br>matplotlib是Python的画图利器，关于matplotlib具体介绍可以<a href="https://baike.baidu.com/item/Matplotlib/20436231?fr=aladdin" target="_blank" rel="external">参考这里</a><br>利用matplotlib可以画出来很多精美的图片：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/path_patch_demo.png" alt="18"></p>
<p><img src="http://othwobwlu.bkt.clouddn.com/custom_shaded_3d_surface.png" alt="19"></p>
<p>想看更多关于matplotlib制作的精美图片，请到<a href="https://matplotlib.org/examples/mplot3d/custom_shaded_3d_surface.html" target="_blank" rel="external">这里</a></p>
<blockquote>
<p><strong>关于制作饼图经常用到的一些参数：</strong></p>
</blockquote>
<p>title ：饼图的标题<br>label ：每一块区域的标签<br>sizes ：每一块区域的大小<br>colors ：每一块区域的颜色<br>explode ：讲某些部分突出处理<br>figure ：调整饼图的长、宽、高<br>axis(‘equal’) ：确保画出来的是一个圆<br>show ：把画的图显示出来</p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">labels = <span class="string">u'餐饮'</span>,<span class="string">u'花钱'</span>,<span class="string">u'交通'</span>,<span class="string">u'水果'</span>,<span class="string">u'电影'</span>,<span class="string">u'话费'</span>,<span class="string">u'零食'</span>,<span class="string">u'服饰'</span>,<span class="string">u'日用品'</span>     <span class="comment">#饼图的标签</span></div><div class="line">sizes = [abs(int(food)),abs(int(spend_money)),abs(int(traffic)),abs(int(fruit)),abs(int(movies)),abs(int(bill)),abs(int(snacks)),abs(int(clothes)),abs(int(daily_necessities))]    <span class="comment">#饼图每一块区域的大小是根据我们刚刚统计出来的数据</span></div><div class="line">colors = [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'gold'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'lightcoral'</span>,<span class="string">'lightgray'</span>,<span class="string">'lime'</span>,<span class="string">'skyblue'</span>]    <span class="comment">#每一块区域的颜色</span></div><div class="line">explode=(<span class="number">0.05</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)        <span class="comment">#我们把餐饮这一块突出出来</span></div><div class="line">plt.title(<span class="string">u'交流消费账单统计图'</span>)   <span class="comment">#饼图的标题</span></div><div class="line"> </div><div class="line">plt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct=<span class="string">'%1.1f%%'</span>,shadow=<span class="keyword">True</span>,startangle=<span class="number">90</span>)    <span class="comment">#把上述参数应用于饼图</span></div><div class="line">plt.axis(<span class="string">'equal'</span>)      <span class="comment">#确保最后画成一个圆形</span></div><div class="line">plt.legend()       <span class="comment">#把种类在旁边另外显示出来</span></div><div class="line">plt.show()      <span class="comment">#把图展现出来</span></div></pre></td></tr></table></figure>
<p>附上效果图：</p>
<p><img src="http://othwobwlu.bkt.clouddn.com/2017-07-23-120255_1076x794_scrot.png" alt="21"></p>
<p>到这里，我们利用Python对我们的账单进行分析，并制作饼图就已经完成了，后面我们还会继续分析的，这里只能看到消费的大致比例，看不到具体的数额，具体的数额我们打算通过折线图进行分析。这里只介绍饼图。<br>通过这个小程序，我们对Python对json数据的处理，利用Python进行科学计算，以及通过matplotlib画图有所了解。</p>
<blockquote>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </div><div class="line"> </div><div class="line">food = spend_money = traffic = fruit = movies = bill = snacks = clothes = daily_necessities = <span class="number">0</span></div><div class="line">path = <span class="string">'/root/下载/交流账单.txt'</span></div><div class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> open(path)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">705</span>):</div><div class="line">    items = records[i]</div><div class="line">    <span class="keyword">if</span> items[<span class="string">'账目分类'</span>] == <span class="string">'餐饮'</span>:</div><div class="line">        food += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'花钱'</span>:</div><div class="line">        spend_money += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'交通'</span>:</div><div class="line">        traffic += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'水果'</span>:</div><div class="line">        fruit += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'电影'</span>:</div><div class="line">        movies += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'话费'</span>:</div><div class="line">        bill += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'零食'</span>:</div><div class="line">        snacks += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'服饰'</span>:</div><div class="line">        clothes += float(items[<span class="string">'账目金额'</span>])</div><div class="line">    <span class="keyword">elif</span> items[<span class="string">'账目分类'</span>] == <span class="string">'日用品'</span>:</div><div class="line">        daily_necessities += float(items[<span class="string">'账目金额'</span>])</div><div class="line">      </div><div class="line">labels = <span class="string">u'餐饮'</span>,<span class="string">u'花钱'</span>,<span class="string">u'交通'</span>,<span class="string">u'电影'</span>,<span class="string">u'话费'</span>,<span class="string">u'零食'</span>,<span class="string">u'水果'</span>,<span class="string">u'服饰'</span>,<span class="string">u'日用品'</span></div><div class="line">sizes = [abs(int(food)),abs(int(spend_money)),abs(int(traffic)),abs(int(movies)),abs(int(bill)),abs(int(snacks)),abs(int(fruit)),abs(int(clothes)),abs(int(daily_necessities))]</div><div class="line">colors = [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'gold'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'lightcoral'</span>,<span class="string">'lightgray'</span>,<span class="string">'lime'</span>,<span class="string">'skyblue'</span>]</div><div class="line">explode=(<span class="number">0.05</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">u'交流消费账单统计图'</span>)</div><div class="line"> </div><div class="line">plt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct=<span class="string">'%1.1f%%'</span>,shadow=<span class="keyword">True</span>,startangle=<span class="number">90</span>)</div><div class="line">plt.axis(<span class="string">'equal'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>完整的项目在<a href="https://github.com/Tactful-biao/billing_analysis" target="_blank" rel="external">我的GitHub上</a>，感兴趣的朋友可以去看一下。</p>
<p>另外账单我提供了两种编码格式的，一种是Linux下的，另外一种是Windows格式的。<br>Linux格式：<a href="http://othwobwlu.bkt.clouddn.com/%E4%BA%A4%E6%B5%81%E8%B4%A6%E5%8D%95.txt" target="_blank" rel="external">点击下载</a><br>Windows格式：<a href="http://othwobwlu.bkt.clouddn.com/Windows%E7%89%88%E4%BA%A4%E6%B5%81%E8%B4%A6%E5%8D%95.txt" target="_blank" rel="external">点击下载</a></p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Mateplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xml-rpc攻击]]></title>
      <url>/2017/07/22/xml-rpc%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2></blockquote>
<p>最近两天发现我的博客经常出现404 Not Found的错误，我仔细想了一下不应该啊。因为我刚更换的服务器，1G的内存，对于我这种刚搭建的博客来说，访问量不大，足够用了。可是为什么会出现这种问题呢，遇到问题当然是找解决方法了，在digitalocean的服务器后台发现我的服务器的CPU一直处于高负载的状态：</p>
<p><img src="http://otgyv5nhv.bkt.clouddn.com/cpu.PNG" alt="1"></p>
<p>可是我又没进行什么高消耗的操作，还出现这种情况，我就意识到事情没那么简单，于是去查看系统日志，发现果然不是那么简单（日志文件内都是如下内容）：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017/07/22 09:20:39 [<span class="builtin-name">error</span>] 1302#0: <span class="number">*22381</span> connect() <span class="keyword">to</span> unix:/var/run/php5-fpm.sock failed (11:<span class="built_in"> Resource </span>temporarily unavailable) <span class="keyword">while</span>      connecting <span class="keyword">to</span> upstream, client: 185.188.204.14, server: bbiao.me, request: <span class="string">"POST /xmlrpc.php HTTP/1.0"</span>, upstream: <span class="string">"fastcgi://unix:/var/r     un/php5-fpm.sock:"</span>, host: <span class="string">"128.199.131.59"</span></div><div class="line">2017/07/22 09:20:39 [<span class="builtin-name">error</span>] 1302#0: <span class="number">*22383</span> connect() <span class="keyword">to</span> unix:/var/run/php5-fpm.sock failed (11:<span class="built_in"> Resource </span>temporarily unavailable) <span class="keyword">while</span>      connecting <span class="keyword">to</span> upstream, client: 185.188.204.9, server: bbiao.me, request: <span class="string">"POST /xmlrpc.php HTTP/1.0"</span>, upstream: <span class="string">"fastcgi://unix:/var/ru     n/php5-fpm.sock:"</span>, host: <span class="string">"128.199.131.59"</span></div><div class="line">2017/07/22 09:20:39 [<span class="builtin-name">error</span>] 1302#0: <span class="number">*22385</span> connect() <span class="keyword">to</span> unix:/var/run/php5-fpm.sock failed (11:<span class="built_in"> Resource </span>temporarily unavailable) <span class="keyword">while</span>      connecting <span class="keyword">to</span> upstream, client: 185.188.204.15, server: bbiao.me, request: <span class="string">"POST /xmlrpc.php HTTP/1.0"</span>, upstream: <span class="string">"fastcgi://unix:/var/r     un/php5-fpm.sock:"</span>, host: <span class="string">"128.199.131.59"</span></div><div class="line">2017/07/22 09:20:39 [<span class="builtin-name">error</span>] 1302#0: <span class="number">*22387</span> connect() <span class="keyword">to</span> unix:/var/run/php5-fpm.sock failed (11:<span class="built_in"> Resource </span>temporarily unavailable) <span class="keyword">while</span>      connecting <span class="keyword">to</span> upstream, client: 185.188.204.20, server: bbiao.me, request: <span class="string">"POST /xmlrpc.php HTTP/1.0"</span>, upstream: <span class="string">"fastcgi://unix:/var/r     un/php5-fpm.sock:"</span>, host: <span class="string">"128.199.131.59"</span></div><div class="line">2017/07/22 09:20:39 [<span class="builtin-name">error</span>] 1302#0: <span class="number">*22389</span> connect() <span class="keyword">to</span> unix:/var/run/php5-fpm.sock failed (11:<span class="built_in"> Resource </span>temporarily unavailable) <span class="keyword">while</span>      connecting <span class="keyword">to</span> upstream, client: 185.188.204.8, server: bbiao.me, request: <span class="string">"POST /xmlrpc.php HTTP/1.0"</span>, upstream: <span class="string">"fastcgi://unix:/var/ru     n/php5-fpm.sock:"</span>, host: <span class="string">"128.199.131.59"</span></div></pre></td></tr></table></figure></p>
<p><img src="http://otgyv5nhv.bkt.clouddn.com/%E6%94%BB%E5%87%BB.PNG" alt="2"></p>
<p>查询了一下，发现自己的服务器正在被攻击，可能不是专门的指定的攻击，更像是一种批量的攻击，毕竟我和别人无缘无仇的，之所以攻击我，可能是想拿下我的服务器，然后把我的服务器当做肉鸡再对其他的地方进行攻击。既然知道别人在攻击咱们，咱们当然要做点什么了，至少要阻止它对我们的进一步攻击吧。</p>
<blockquote>
<h2 id="XML-RPC攻击"><a href="#XML-RPC攻击" class="headerlink" title="XML-RPC攻击"></a>XML-RPC攻击</h2></blockquote>
<p>首先，先简单介绍一下XML-RPC拒绝服务攻击是什么吧<br>xmlrpc 是 WordPress 中进行远程调用的接口，而使用 xmlrpc 调用接口进行账号爆破在很早之前就被提出并加以利用。近日 SUCURI 发布文章介绍了如何利用 xmlrpc 调用接口中的 system.multicall 来提高爆破效率，使得成千上万次的帐号密码组合尝试能在一次请求完成，极大的压缩请求次数，在一定程度上能够躲避日志的检测。<br>早在2012 年 12 月 17 日一些采用 PHP 的知名博客程序 WordPress被曝光存在严重的漏洞，该漏洞覆盖WordPress 全部已发布的版本（包括WordPress 3.8.1）。该漏洞的 WordPress 扫描工具也在很多论坛和网站发布出来。工具可以利用 WordPress 漏洞来进行扫描，也可以发起DDoS 攻击。经过测试，漏洞影响存在 xmlrpc.php 文件的全部版本。</p>
<blockquote>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3></blockquote>
<p>WordPress 中关于 xmlrpc 服务的定义代码主要位于 wp-includes/class-IXR.php 和 wp-includes/class-wp-xmlrpc-server.php 中。基类 IXR_Server 中定义了三个内置的调用方法，分别为 system.getCapabilities，system.listMethods 和 system.multicall，其调用映射位于 IXR_Server 基类定义中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCallbacks</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;callbacks[<span class="string">'system.getCapabilities'</span>] = <span class="string">'this:getCapabilities'</span>;</div><div class="line">    <span class="keyword">$this</span>-&gt;callbacks[<span class="string">'system.listMethods'</span>] = <span class="string">'this:listMethods'</span>;</div><div class="line">    <span class="keyword">$this</span>-&gt;callbacks[<span class="string">'system.multicall'</span>] = <span class="string">'this:multiCall'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而基类在初始化时，调用 setCallbacks() 绑定了调用映射关系：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">( $callbacks = false, $data = false, $wait = false )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;setCapabilities();</div><div class="line">    <span class="keyword">if</span> ($callbacks) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;callbacks = $callbacks;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;setCallbacks();  <span class="comment">// 绑定默认的三个基本调用映射</span></div><div class="line">    <span class="keyword">if</span> (!$wait) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;serve($data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再来看看 system.multicall 对应的处理函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiCall</span><span class="params">($methodcalls)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// See http://www.xmlrpc.com/discuss/msgReader$1208</span></div><div class="line">    $return = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span> ($methodcalls <span class="keyword">as</span> $call) &#123;</div><div class="line">        $method = $call[<span class="string">'methodName'</span>];</div><div class="line">        $params = $call[<span class="string">'params'</span>];</div><div class="line">        <span class="keyword">if</span> ($method == <span class="string">'system.multicall'</span>) &#123;</div><div class="line">            $result = <span class="keyword">new</span> IXR_Error(<span class="number">-32600</span>, <span class="string">'Recursive calls to system.multicall are forbidden'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $result = <span class="keyword">$this</span>-&gt;call($method, $params);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (is_a($result, <span class="string">'IXR_Error'</span>)) &#123;</div><div class="line">            $return[] = <span class="keyword">array</span>(</div><div class="line">                <span class="string">'faultCode'</span> =&gt; $result-&gt;code,</div><div class="line">                <span class="string">'faultString'</span> =&gt; $result-&gt;message</div><div class="line">            );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $return[] = <span class="keyword">array</span>($result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $return;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以从代码中看出，程序会解析请求传递的 XML，遍历多重调用中的每一个接口调用请求，并会将最终有调用的结果合在一起返回给请求端。<br>通过阅读 WordPress 中 xmlrpc 相关处理的代码，能大量的 xmlrpc 调用都验证了用户名和密码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !$user = <span class="keyword">$this</span>-&gt;login($username, $password) )</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error;</div></pre></td></tr></table></figure></p>
<p>这里是用参数传递最少获取信息最直接的 wp.getUsersBlogs 进行测试，将两次帐号密码尝试包含在同一次请求里，构造 XML 请求内容为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>system.multicall<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">params</span>&gt;</span><span class="tag">&lt;<span class="name">param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>methodName<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>wp.getUsersBlogs<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>params<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>admin888<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>methodName<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>wp.getUsersBlogs<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>params<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>test<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="tag">&lt;/<span class="name">params</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将上面包含两个子调用的 XML 请求发送至 xmlrpc 服务端入口，若目标开启了 xmlrpc 服务会返回类似如下的信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">methodResponse</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">params</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>isAdmin<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">boolean</span>&gt;</span>1<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://172.16.96.130/xampp/wordpress-4.3.1/<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>blogid<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>blogName<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>WordPress 4.3.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>xmlrpc<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://172.16.96.130/xampp/wordpress-4.3.1/xmlrpc.php<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">struct</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>faultCode<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">int</span>&gt;</span>403<span class="tag">&lt;/<span class="name">int</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">member</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>faultString<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>用户名或密码不正确。<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">member</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struct</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">params</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">methodResponse</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>从结果中可以看到在同一次请求里面处理了两种帐号密码组合，并以集中形式将结果返回，通过该种方式可以极大地提高帐号爆破效率。</p>
<blockquote>
<h3 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a>简而言之</h3></blockquote>
<p>简单点说，就是有人通过xml-rpc漏洞再对我的WordPress管理员密码进行爆破，爆破成功的话，我的WordPress就会沦为僵尸机，这对我来说，是很糟糕的事情。查询了一些解决办法。<br>网上给出的办法主要有以下三种：</p>
<ol>
<li>通过配置 Apache、Nginx 等 Web 服务器来限制 xmlrpc.php 文件的访问;</li>
<li>在不影响站点运行的情况下可以直接删除 xmlrpc.php 文件;</li>
<li>从官方插件库中安装JetPack 并启用;</li>
<li>添加代码 add_filter(‘xmlrpc_enabled’, ‘__return_false’); 至 WordPress 配置文件 wp-config.php;<br>上面的方法，前三种我都试了，发现对我目前的情况来看，并不起作用，可能是我的打开方式不对。我观察了一下攻击者的IP地址，主要是这一个范围（185.188.204.7/12）的IP地址在频繁的对我的服务器通过XML-RPC进行POST请求（1秒钟4~5次），难怪我的服务器受不了，我就1G的内存，怎么能够承受得了这么频繁请求 :mad: 。查了一下，发现这一个网段的IP地址都是属于俄罗斯的：</li>
</ol>
<p><img src="http://otgyv5nhv.bkt.clouddn.com/ip.PNG" alt="3"></p>
<p>一想到俄罗斯的黑客这么厉害，我就有点紧张。但是也没有办法啊，别人在攻击自己，不想被攻陷，只能找解决办法呀。<br>网上提供的办法，都没有解决我的问题，后来我发现这些进攻的IP都是一个网段的，我能不能把这一个网段的IP都封掉，禁止它对我们的服务器进行访问，然后我就想到了防火墙。通过防火墙，把这一个网段的IP都封掉，拒绝给这个网段的IP提供服务。于是就开始配置防火墙。</p>
<blockquote>
<p>启动防火墙<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables <span class="literal">start</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>提示iptables：unrecognized service的错误。</p>
<blockquote>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3></blockquote>
<p>解决思路很明了，就是首先确定linux是否安装了 iptables 。<br><figure class="highlight plain"><figcaption><span>iptables status```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">如果已经安装的话，会显示安装路径，一般都会默认安装的吧。</div><div class="line">如果没有安装的话，通过如下命令进行安装：</div></pre></td></tr></table></figure></p>
<p>yum install iptables #CentOS系统<br>apt-get install iptables #Debian系统<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">在ubuntu中由于不存在 /etc/init.d/iptales文件，所以无法使用service等命令来启动iptables，需要用modprobe命令。</div><div class="line"></div><div class="line">&gt;启动iptables：</div><div class="line">modprobe ip_tables</div><div class="line">关闭iptables（关闭命令要比启动复杂）</div><div class="line">iptables -F</div><div class="line">iptables -<span class="keyword">X</span></div><div class="line">iptables -<span class="keyword">Z</span></div><div class="line">iptables -<span class="keyword">P</span> INPUT <span class="keyword">ACC</span>EPT</div><div class="line">iptables -<span class="keyword">P</span> OUTPUT <span class="keyword">ACC</span>EPT</div><div class="line">iptables -<span class="keyword">P</span> FORWARD <span class="keyword">ACC</span>EPT</div><div class="line">modprobe -r ip_tables</div><div class="line"></div><div class="line">依次执行以上命令即可关闭iptables，否则在执行modproble -r ip_tables时将会提示</div><div class="line">FATAL: Module ip_tables is in use.</div><div class="line">开启之后就可以通过防火墙对IP进行封杀了。</div><div class="line">封杀单个IP：</div><div class="line">```iptables -I INPUT -s ***.***.***.*** -j DROP</div></pre></td></tr></table></figure></p>
<p>解封这个IP：<br><figure class="highlight plain"><figcaption><span>-D INPUT -s ***.***.***.*** -j DROP```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">封杀一个网段的IP：</div><div class="line">```iptables -I INPUT -s 121.0.0.0/8 -j DROP</div></pre></td></tr></table></figure></p>
<p><code>iptables -F   全部解封</code><br>通过命令封杀掉这一个网段的IP地址，通过iptables -L 可以查看你封掉的IP都有哪些：</p>
<p><img src="http://otgyv5nhv.bkt.clouddn.com/define.PNG" alt="4"></p>
<p>再去查看CPU发现，CPU已经开始恢复正常了,日志文件也没有出现新的攻击动态了。：</p>
<p><img src="http://otgyv5nhv.bkt.clouddn.com/cpud.PNG" alt="5"></p>
<blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3></blockquote>
<ul>
<li>：<a href="https://www.digitalocean.com/community/tutorials/how-to-protect-wordpress-from-xml-rpc-attacks-on-ubuntu-14-04" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-protect-wordpress-from-xml-rpc-attacks-on-ubuntu-14-04</a></li>
<li>：<a href="http://rickgray.me/2015/10/09/wordpress-xmlrpc-brute-force-in-one-request.html" target="_blank" rel="external">http://rickgray.me/2015/10/09/wordpress-xmlrpc-brute-force-in-one-request.html</a></li>
<li>：<a href="http://www.freebuf.com/vuls/81331.html" target="_blank" rel="external">http://www.freebuf.com/vuls/81331.html</a></li>
<li>：<a href="http://blog.csdn.net/feeltouch/article/details/21830541" target="_blank" rel="external">http://blog.csdn.net/feeltouch/article/details/21830541</a></li>
</ul>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> FireWall </tag>
            
            <tag> XML-RPC </tag>
            
            <tag> 攻击 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用python编写天气查询小程序]]></title>
      <url>/2017/07/21/%E4%BD%BF%E7%94%A8python%E7%BC%96%E5%86%99%E5%A4%A9%E6%B0%94%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h2></blockquote>
<p>这个小程序是博主之前突然灵感爆发的产物。为什么这样说呢？是因为博主本意是打算利用python写一个对账单进行分析画图的程序，在实际的操作过程中，遇到问题，在寻找解决办法的时候，突发灵感才有了这个小程序。</p>
<blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2></blockquote>
<p>开发语言及版本：Python 3.6<br>图形化工具：QT5<br>EXE打包工具：pyinstaller</p>
<blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2></blockquote>
<p>主要利用api接口，获得json数据，对数据进行整理，然后再提取我们想要的数据，通过图形化展示出来，最后再连图形化一块打包成可执行文件。</p>
<p>让你做一个天气查询的可执行程序（可以直接在Windows 10上点击就可以运行），听起来感觉很难，但是其实一点都不难，真正去做的时候，你就能发现了。从零到一很难，但是从一到二就会简单很多，当你下定决心去做一件事情的时候，你就已经成功三分之一了。<br>废话不多说，下面开始我们的小程序</p>
<blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2></blockquote>
<p>第一步：我们需要先用代码实现基本功能。<br>第二步：给我们的程序穿上衣服（图形化）<br>第三步：打包成可执行文件。</p>
<hr>
<p>大思路就上面三步，然后我们再一步一步的去实现。</p>
<h3 id="第一步：使用基本代码实现"><a href="#第一步：使用基本代码实现" class="headerlink" title="第一步：使用基本代码实现"></a>第一步：使用基本代码实现</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3           #这行代码在<span class="symbol">Windows</span>平台会自动忽略，写这行代码主要是考虑到linux平台</div><div class="line"># -*- encoding:utf<span class="number">-8</span> -*-          #这行是对代码的编码方式，python3对这个要求不是很严格，但是还是希望大家能够保持住这个习惯</div><div class="line"> </div><div class="line">import json           #导入json模块，因为我们接收到的数据是以json类型返回的，所以对json数据进行处理，需要导入相应的模块</div><div class="line">import requests    #我们利用api接口进行编程的时候，需要对该接口进行访问，需要使用requests库</div><div class="line">import datetime    #datetime模块是一个时间处理的模块，因为天气处理的时候，我们要返回时间</div><div class="line"> </div><div class="line">keyword = input(<span class="string">'请输入您要查询的城市：'</span>)     # 接收用户查询的城市名称</div><div class="line"> </div><div class="line">try:</div><div class="line">    api = requests.get(<span class="string">"http://www.xxxxx.com/open/api/weather/json.shtml?city="</span> + keyword)      # api接口</div><div class="line">    data = api.json()            </div><div class="line">    datainfo = data[<span class="string">'data'</span>]</div><div class="line">    forecast = datainfo[<span class="string">'forecast'</span>]</div><div class="line">    wendu = datainfo[<span class="string">'wendu'</span>]</div><div class="line">    tishi = datainfo[<span class="string">'ganmao'</span>]</div><div class="line">    today = datetime.date.today()</div><div class="line">    today_high = forecast[<span class="number">0</span>][<span class="string">'high'</span>]</div><div class="line">    today_low = forecast[<span class="number">0</span>][<span class="string">'low'</span>]</div><div class="line">    tomorrow_high = forecast[<span class="number">1</span>][<span class="string">'high'</span>]</div><div class="line">    tomorrow_low = forecast[<span class="number">1</span>][<span class="string">'low'</span>]</div><div class="line">    the_day_after_tomorrow_high = forecast[<span class="number">2</span>][<span class="string">'high'</span>]</div><div class="line">    the_day_after_tomorrow_low = forecast[<span class="number">2</span>][<span class="string">'low'</span>]</div><div class="line">    </div><div class="line">    </div><div class="line">    print(<span class="string">'城市：'</span>,datainfo[<span class="string">'city'</span>])</div><div class="line">    print(<span class="string">'今天的天气情况:'</span>)</div><div class="line">    print(<span class="string">'时间：'</span>,today)</div><div class="line">    print(<span class="string">'天气类型：'</span>,forecast[<span class="number">0</span>][<span class="string">'type'</span>])</div><div class="line">    print(<span class="string">'风力：'</span>,forecast[<span class="number">0</span>][<span class="string">'fengli'</span>])</div><div class="line">    print(<span class="string">'温度：'</span>,today_high[<span class="number">3</span>:],<span class="string">'-'</span>,today_low[<span class="number">3</span>:])</div><div class="line">    print(<span class="string">'当前温度：'</span>,wendu)</div><div class="line">    print(<span class="string">'最高温度：'</span>,forecast[<span class="number">0</span>][<span class="string">'high'</span>])</div><div class="line">    print(<span class="string">'最低温度：'</span>,forecast[<span class="number">0</span>][<span class="string">'low'</span>])</div><div class="line">    print(<span class="string">'风向：'</span>,forecast[<span class="number">0</span>][<span class="string">'fengxiang'</span>])</div><div class="line">    print(<span class="string">''</span>)</div><div class="line">    print(<span class="string">'明天的天气情况:'</span>)</div><div class="line">    print(<span class="string">'时间：'</span>,today + datetime.timedelta(days=<span class="number">1</span>))</div><div class="line">    print(<span class="string">'天气类型：'</span>,forecast[<span class="number">1</span>][<span class="string">'type'</span>])</div><div class="line">    print(<span class="string">'风力：'</span>,forecast[<span class="number">1</span>][<span class="string">'fengli'</span>])</div><div class="line">    print(<span class="string">'温度：'</span>,tomorrow_high[<span class="number">3</span>:],<span class="string">'-'</span>,tomorrow_low[<span class="number">3</span>:])</div><div class="line">    print(<span class="string">'最高温度：'</span>,forecast[<span class="number">1</span>][<span class="string">'high'</span>])</div><div class="line">    print(<span class="string">'最低温度：'</span>,forecast[<span class="number">1</span>][<span class="string">'low'</span>])</div><div class="line">    print(<span class="string">'风向：'</span>,forecast[<span class="number">1</span>][<span class="string">'fengxiang'</span>])</div><div class="line">    print(<span class="string">''</span>)</div><div class="line">    print(<span class="string">'后天的天气情况:'</span>)</div><div class="line">    print(<span class="string">'时间：'</span>,today + datetime.timedelta(days=<span class="number">2</span>))</div><div class="line">    print(<span class="string">'天气类型：'</span>,forecast[<span class="number">2</span>][<span class="string">'type'</span>])</div><div class="line">    print(<span class="string">'风力：'</span>,forecast[<span class="number">2</span>][<span class="string">'fengli'</span>])</div><div class="line">    print(<span class="string">'温度：'</span>,the_day_after_tomorrow_high[<span class="number">3</span>:],<span class="string">'-'</span>,the_day_after_tomorrow_low[<span class="number">3</span>:])</div><div class="line">    print(<span class="string">'最高温度：'</span>,forecast[<span class="number">2</span>][<span class="string">'high'</span>])</div><div class="line">    print(<span class="string">'最低温度：'</span>,forecast[<span class="number">2</span>][<span class="string">'low'</span>])</div><div class="line">    print(<span class="string">'风向：'</span>,forecast[<span class="number">2</span>][<span class="string">'fengxiang'</span>])</div><div class="line">    print(<span class="string">''</span>)</div><div class="line">    print(<span class="string">'温馨提示：'</span>,tishi)</div><div class="line">except <span class="symbol">KeyError</span> as e:</div><div class="line">    print(<span class="string">'请输入正确的中文名称进行查询！'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>代码解读<br>关于<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p02_read-write_json_data.html" target="_blank" rel="external">json模块</a>的详细介绍；<br>关于<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">pythonrequests库</a>的详细介绍；<br>关于<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p12_convert_days_to_seconds_and_others.html" target="_blank" rel="external">datetime模块</a>的详细介绍；<br>代码的第12到23行是对接收到的json数据进行处理，分别把风力，温度，当前温度，最高温度，最低温度，风向，和温馨提示提取出来。第26行到55行只是对数据进行一个打印输出。<br>这样，一个简单的天气查询的程序就写出来了，代码总共57行，核心代码就13行，是不是特别简单。<br>运行一下，会得到如下结果：</p>
</blockquote>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/1.PNG" alt="4"></p>
<p>当然，有句话叫永远不能相信用户。因为你永远不知道用户会输入什么，我们想让客户输入城市进行查询，可能客户会输入一些其他的乱七八糟的东西，如果我们不做处理，这样程序的客户体验就不是很好，所以我们在代码里加入了try catch语句块，对那些非法的值就行检测，当用户输入的不是正确的城市的时候，就会告诉用户“请输入正确的中文名称进行查询！”。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/2.PNG" alt="5"></p>
<blockquote>
<h3 id="第二步：给程序穿上衣服（图形化）"><a href="#第二步：给程序穿上衣服（图形化）" class="headerlink" title="第二步：给程序穿上衣服（图形化）"></a>第二步：给程序穿上衣服（图形化）</h3></blockquote>
<h3 id="python做GUI的库有很多，比较常用的有："><a href="#python做GUI的库有很多，比较常用的有：" class="headerlink" title="python做GUI的库有很多，比较常用的有："></a>python做GUI的库有很多，比较常用的有：</h3><ol>
<li>PyQt：PyQt是Python语言的GUI编程解决方案之一。可以用来代替Python内置的Tkinter。其它替代者还有PyGTK、wxPython等。与Qt一样，PyQt是一个自由软件。PyQt是PyKDE的基础。</li>
<li>Tkinter： Tkinter模块(“Tk 接口”)是Python的标准Tk GUI工具包的接口.Tk和Tkinter可以在大多数的Unix平台下使用,同样可以应用在Windows和Macintosh系统里.,Tk8.0的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。</li>
<li>wxPython：wxPython 是一款开源软件，是 Python 语言的一套优秀的 GUI 图形库，允许 Python 程序员很方便的创建完整的、功能键全的 GUI 用户界面。<br>Jython：Jython程序可以和Java无缝集成。除了一些标准模块，Jython使用Java的模块。Jython几乎拥有标准的Python中不依赖于C语言的全部模块。比如，Jython的用户界面将使用Swing，AWT或者SWT。Jython可以被动态或静态地编译成Java字节码。<br>以上是python最常用的做图形化的库函数了。<br>这里我们使用PyQT直接进行设计，我认为PyQt是最简单的，直接就可以上手，如果不是经常做图形化，我感觉pyqt就够用了，因为它操作简单。<br>这里提供QT所有支持平台的下载链接：<a href="https://www.qt.io/download-open-source/#section-2" target="_blank" rel="external">这里</a><br>可以根据自己的操作系统下载相应的版本，下载安装就不多说了。<br>我们直接开始使用。</li>
</ol>
<p>打开qt designer.exe可以看到如下画面：</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/3.PNG" alt="6"></p>
<p>我们接下来就需要通过使用qt designer进行设计，直接通过拖动窗口部件进行GUI设计，几分钟就可以设计一个十分复杂的GUI界面。<br>直接点击上一步的创建，即可看到如下画面：<br><img src="http://otfmjzrrt.bkt.clouddn.com/4.PNG" alt="8"></p>
<p>首先我们心中要清楚我们要设计一个什么样的GUI，就跟盖房子的一样，首先要有图纸，不然也没法去盖。<br>我们设计的是一个天气查询的GUI，你可以添加一个标签用来写你的程序是干什么的，要有一个用户输入城市的输入框以及一个输入完之后进行确认的按钮，还要有一个显示查询结果的输出框，只需要有这四个部件即可。<br>既然清楚了我们的目标，下一步就是进行设计。<br>这是我们设计的界面其中Widget Box这一列都是部件，你需要什么样的部件，直接把该部件拖出来放在画布上就行了，拖出来的部件都是默认大小的，你可以根据自己的习惯调整（我相信使用过Word编辑过图片的人都能够直接搞定），字体大小在右侧的属性那里进行调整：</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/5.png" alt="9"></p>
<p>下面我们还需要对按钮进行链接，不然你按按钮之后，按钮怎么知道下一步该干什么，这里就用到了<a href="https://wiki.qt.io/How_to_Use_Signals_and_Slots/zh" target="_blank" rel="external">QT的信号与槽的处理机制</a>，感兴趣的可以自己去了解。<br>这里首先对输入框进行处理，一般很多人输入完成之后喜欢直接按回车键进行确认操作而不喜欢再通过鼠标按按钮进行确认，我们这一步的处理就是对回车操作进行定义。这里我们还需要定义自己的函数，因为我们最终的结果是当用户输入完城市之后，无论是回车还是点击按钮，能够显示查询的结果。所以我们需要定义一个show_weather的函数。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/10.png" alt="11"></p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/11.png" alt="12"></p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/12.png" alt="13"></p>
<p>下面再对按钮进行连接就可以了。跟回车连接一样，这里就不再赘述。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/13.png" alt="14"></p>
<p>设计完成之后，保存成.ui的文件，我们的GUI设计就完成了。<br>当然，我们也可以给我们的GUI界面设计背景图片，都是可以的，这里我就不介绍了，感兴趣的朋友可以自己研究研究，或者在下面留言，自己动手收获才能更大。<br>然后把.ui文件通过pyuic5 直接转换成.py的文件</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/7.PNG" alt="14"></p>
<p>然后就可以看到该目录下会多出来一个python文件，该文件就是刚刚生成的。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/8.PNG" alt="16"></p>
<p>打开后可以看到如下内容（目前还没法直接运行）：</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/14.PNG" alt="17"></p>
<p>下面我们需要添加我们的自定义函数show_weather：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">def show_weather(self):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        keyword = self.lineEdit.<span class="built_in">text</span>()</div><div class="line">        api = requests.<span class="built_in">get</span>(<span class="string">"http://www.sojson.com/open/api/weather/json.shtml?city="</span> + keyword)</div><div class="line">        data = api.json()</div><div class="line">        datainfo = data[<span class="string">'data'</span>]</div><div class="line">        forecast = datainfo[<span class="string">'forecast'</span>]</div><div class="line">        wendu = datainfo[<span class="string">'wendu'</span>]</div><div class="line">        tishi = datainfo[<span class="string">'ganmao'</span>]</div><div class="line">        today = datetime.date.today()</div><div class="line">        today_high = forecast[<span class="number">0</span>][<span class="string">'high'</span>]</div><div class="line">        today_low = forecast[<span class="number">0</span>][<span class="string">'low'</span>]</div><div class="line">        tomorrow_high = forecast[<span class="number">1</span>][<span class="string">'high'</span>]</div><div class="line">        tomorrow_low = forecast[<span class="number">1</span>][<span class="string">'low'</span>]</div><div class="line">        the_day_after_tomorrow_high = forecast[<span class="number">2</span>][<span class="string">'high'</span>]</div><div class="line">        the_day_after_tomorrow_low = forecast[<span class="number">2</span>][<span class="string">'low'</span>]</div><div class="line">        tomorrow = today + datetime.timedelta(days=<span class="number">1</span>)</div><div class="line">        the_day_after_tomorrow = today + datetime.timedelta(days=<span class="number">2</span>)</div><div class="line">    except KeyError as e:</div><div class="line">        self.textEdit.<span class="built_in">clear</span>()</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'请输入正确的中文城市名称！'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.textEdit.<span class="built_in">clear</span>()</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'城市：'</span> + datainfo[<span class="string">'city'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'今天的天气情况:'</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'时间：'</span>+ <span class="built_in">str</span>(today.<span class="built_in">year</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(today.<span class="built_in">month</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(today.<span class="built_in">day</span>))</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'天气类型：'</span>+ forecast[<span class="number">0</span>][<span class="string">'type'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'温度：'</span>+ today_low[<span class="number">3</span>:<span class="number">6</span>] + <span class="string">'-'</span>+ today_high[<span class="number">3</span>:<span class="number">6</span>])            </div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'当前温度：'</span> + wendu)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最高温度：'</span> + forecast[<span class="number">0</span>][<span class="string">'high'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最低温度：'</span> + forecast[<span class="number">0</span>][<span class="string">'low'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风力：'</span> + forecast[<span class="number">0</span>][<span class="string">'fengli'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风向：'</span> + forecast[<span class="number">0</span>][<span class="string">'fengxiang'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">''</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'明天的天气情况:'</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'时间：'</span>+ <span class="built_in">str</span>(tomorrow.<span class="built_in">year</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(tomorrow.<span class="built_in">month</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(tomorrow.<span class="built_in">day</span>))</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'天气类型：'</span> + forecast[<span class="number">1</span>][<span class="string">'type'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'温度：'</span>+ tomorrow_low[<span class="number">3</span>:<span class="number">6</span>] + <span class="string">'-'</span> + tomorrow_high[<span class="number">3</span>:<span class="number">6</span>])            </div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最高温度：'</span> + forecast[<span class="number">1</span>][<span class="string">'high'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最低温度：'</span> + forecast[<span class="number">1</span>][<span class="string">'low'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风力：'</span> + forecast[<span class="number">1</span>][<span class="string">'fengli'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风向：'</span> + forecast[<span class="number">1</span>][<span class="string">'fengxiang'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">''</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'后天的天气情况:'</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'时间：'</span> + <span class="built_in">str</span>(the_day_after_tomorrow.<span class="built_in">year</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(the_day_after_tomorrow.<span class="built_in">month</span>) + <span class="string">'-'</span> + <span class="built_in">str</span>(the_day_after_tomorrow.<span class="built_in">day</span>))</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'天气类型：'</span> + forecast[<span class="number">2</span>][<span class="string">'type'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'温度：'</span>+ the_day_after_tomorrow_low[<span class="number">3</span>:<span class="number">6</span>] + <span class="string">'-'</span> + the_day_after_tomorrow_high[<span class="number">3</span>:<span class="number">6</span>])            </div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最高温度：'</span> + forecast[<span class="number">2</span>][<span class="string">'high'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'最低温度：'</span> + forecast[<span class="number">2</span>][<span class="string">'low'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风力：'</span> + forecast[<span class="number">2</span>][<span class="string">'fengli'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'风向：'</span> + forecast[<span class="number">2</span>][<span class="string">'fengxiang'</span>])</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">''</span>)</div><div class="line">        self.textEdit.<span class="built_in">append</span>(<span class="string">'温馨提示：'</span> + tishi)</div><div class="line">def <span class="built_in">clear</span>(self):</div><div class="line">    self.textEdit.<span class="built_in">clear</span>()</div></pre></td></tr></table></figure>
<p>还需要在最下面添加如下内容，就可以运行了</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">   import sys</div><div class="line">   app = QtWidgets.QApplication(sys.argv)</div><div class="line">   widget = QtWidgets.QWidget()</div><div class="line">   ui = Ui_Form()</div><div class="line">   ui.setupUi(widget)</div><div class="line">   widget.show()</div><div class="line">   sys.<span class="keyword">exit</span>(app.exec_())</div></pre></td></tr></table></figure>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/15.PNG" alt="18"></p>
<p>这里有我之前做的一个带有背景图片的（是不是感觉顺眼了很多):</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/16.PNG" alt="19"></p>
<blockquote>
<h3 id="最后一步：-打包成exe的文件"><a href="#最后一步：-打包成exe的文件" class="headerlink" title="最后一步： 打包成exe的文件"></a>最后一步： 打包成exe的文件</h3></blockquote>
<p>使用python的pyinstaller模块，首次使用需要安装：<br>直接在cmd窗口下输入（前提是你安装python的时候加入到了环境变量）：<font color="Lime">pip install pyinstaller</font><br>如果没有添加环境变量，你需要到你的python安装目录下再运行：<font color="Lime">pip install pyinstaller</font><br>pyinstaller的<a href="https://www.bbsmax.com/A/gVdnmL775W/" target="_blank" rel="external">详细参数</a></p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/17.PNG" alt="21"></p>
<blockquote>
<p>这里我们只介绍一下我们经常用到的参数:<br>-F : 打包成一个单独的可执行文件，这个文件可以单独拿出来使用<br>-p : 导入配置文件的路径，有些py文件比如qt设计的就需要导入PyQt的配置文件<br>-w： 这个参数如果不加的话，每次运行可执行文件，就会弹出来Windows的cmd窗口，加上就不会弹出<br>-i ：可以给你对可执行文件设置图标，就是通过这个参数（icon）<br>下面我们就使用如下命令进行打包就可以了（其中pyth是你的PyQt5的bin文件的绝对路径）：<br>pyinstaller –path D:\Python_windows\Lib\site-packages\PyQt5\Qt\bin -F -w weacher.py<br>稍等片刻，如果出现如下画面，即表示已经成功了。</p>
</blockquote>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/18.PNG" alt="22"></p>
<p>会在你的目录下生成三个文件夹，你的可执行文件就在dist这个文件夹里面。可以单独拿出来在其他地方运行，当然也可以在任何Windows10系统下运行（其他Windows系列的系统中没有进行测试）。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/19.PNG" alt="23"></p>
<p>打开dist文件夹即可看到我们的可执行程序：</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/20.PNG" alt="24"></p>
<p>双击我们的可执行文件，和我们的图形化界面是一样的，唯一不同的地方，是在其他没有安装python环境的Windows机器上，也可以直接运行。</p>
<p><img src="http://otfmjzrrt.bkt.clouddn.com/21.PNG" alt="25"></p>
<p>到这里，文章就要结束了，是不是感觉很简单。思路很重要，只有思路清晰，一步一步往下做就是了。有问题可以在文章下面评论，大家一起交流。</p>
<p>完整的项目我已经提交在<a href="https://github.com/Tactful-biao/weather_forecast" target="_blank" rel="external">我的GitHub</a>上了，感兴趣的朋友可以参考一下。<br>生成的可执行文件点击下载即可下载：</p>
<p><a href="http://otfmjzrrt.bkt.clouddn.com/forecast.exe" target="_blank" rel="external">点击下载</a></p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyinstaller </tag>
            
            <tag> QT5 </tag>
            
            <tag> 天气查询 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生苦短，我用Python]]></title>
      <url>/2017/07/20/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/</url>
      <content type="html"><![CDATA[<blockquote>
<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2></blockquote>
<p>相信很多人刚学编程的时候都会有这样一种疑惑，编程语言五花八门，我应该选择哪一种呢？<br>编程语言分为机器语言，汇编语言，高级语言三大类。<br>机器语言就是纯粹的机器代码，可以由计算机直接执行，效率最高，但是通用性不强，通俗点说就是不适合人用来编程。<br>汇编语言为8086汇编、Win32汇编、.NET的汇编，效率比机器语言稍微要低一点，通过简单的助记符来替代繁琐而枯燥的0,1代码。同样通用性不强，需要的硬件知识很多，但是不是说汇编就不重要，在某些行业中，汇编得到了广泛的应用。</p>
<blockquote>
<h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2></blockquote>
<p>高级语言是我们经常能接触到的，也是我们用的最多的。高级语言有Python、Java、Basic、Pascal、Object Pascal、C、C++、C#、ASP、ASP.NET、Perl、PHP、SQL、FoRTRAN 等等（都是纯粹的编程语言）；Visual Basic、Visual Basic.NET、Delphi、Visual C++、C++ Builder、C# Builder、Visual Foxpro 等等（都是经过发展过后的编程语言）<br>通过人类可以识别的自然语言（主要是英语）来进行编程，效率再次降低，但是程序编制难度和可读性大幅提高。可移植性好，实用性较好。比较适合大规模开发，是现在大多数人选择的语言。而且Java语言和.NET平台的出现在一定程度上解决了由于平台的不同所导致的移植困难的情况。<br>编程语言五花八门，他们的作用都是简化程序员的工作，他们最终都是把高级语言转化成机器能够识别的机器语言，虽然可能语法上有所不同，但是思想上都是差不多的，虽然有面向过程和面向对象之分。语言可以学很多门，但是必须要掌握或者精通至少一门编程语言。<br>相信很多人第一门接触的编程语言都是C语言，C是一种通用的编程语言，广泛用于系统软件与应用软件的开发。于1969年至1973年间，为了移植与开发UNIX操作系统，由丹尼斯·里奇与肯·汤普逊，以B语言为基础，在贝尔实验室设计、开发出来。<br>C语言具有高效、灵活、功能丰富、表达力强和较高的可移植性等特点，在程序员中备受青睐，成为最近25年使用最为广泛的编程语言<a href="http://otdjoxwnb.bkt.clouddn.com/1.png" target="_blank" rel="external">2</a>。目前，C语言编译器普遍存在于各种不同的操作系统中，例如Microsoft Windows, Mac OS X, Linux, Unix等。后来发展的很多的高级语言也都是参考C语言进行编写的。当然C语言也有自己的弊端，C语言很繁琐，很多东西都需要自己去实现，用起来不是很方便，具体可参考这本书《<a href="http://wenjing.ytu.edu.cn/dianzi/jpkc/ziliaoxz/C.pdf" target="_blank" rel="external">C陷阱与缺陷</a>》。</p>
<blockquote>
<h2 id="关于python"><a href="#关于python" class="headerlink" title="关于python"></a>关于python</h2></blockquote>
<p>Python是一种面向对象、解释型计算机程序设计语言，由Guido van Rossum于1989年圣诞节为打发无聊时间，而开发的一个新的脚本解释程序，可以感觉下什么叫牛人，是ABC语言的一种继承，至于为什么选中python作为语言名字，是因为他是一叫Monty Python的喜剧团体的爱好者，第一个公开发行版发行于1991年。作为一门新兴的语言，拥有大量的使用者。<br>Python的设计哲学是：<br>“优雅”<br>“明确”<br>“简单”<br>所以这门语言特别适合初学者去学习。关于python的详细介绍，请点这里，虽然Python是一门年轻的语言，但是它的潜质不容小视，就在今年IEEE Spectrum 2017 编程语言排行：Python 夺冠，作为一门新兴的语言，这是多么值得骄傲的地方，</p>
<p><img src="http://otdjoxwnb.bkt.clouddn.com/1.png" alt="2"></p>
<blockquote>
<p><strong><em>很多人会问为什么用Python？</em></strong></p>
</blockquote>
<p>选择一门语言需要考虑它的软件质量，开发效率，程序的可移植性，标准库的支持，组件集成，编程中的乐趣。<br>python作为一门高级语言，完成同样的要求，代码量更小，维护成本低，编程效率高。<br>解决同一个问题，一般情况下Python是Java代码量的1/5。所以经常说“人生苦短我用Python”。<br>就拿编程界的金句“Hello Word”来举例吧：<br>使用C语言代码需要：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"Hello Word"</span>);</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Java代码如下(文件创建过程之类的忽略，需要创建一个名为HelloWord.java的文件)：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Python代码如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print “Hello Word”    <span class="selector-id">#Python2</span>.x版本</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Hello Word"</span>)</span></span>      <span class="selector-id">#Python3</span>.x版本</div></pre></td></tr></table></figure></p>
<p>你没有看错，是不是感觉Python特别简单。这时候就可以说“人生苦短，我用Python！”<br>Python还有很多特别的地方，从它的设计哲学就能发现，“简单”，“优雅”，“明确”。</p>
<hr>
<blockquote>
<p><strong><em>你可能还会问Python可以用来做什么？</em></strong></p>
</blockquote>
<p>Python还被称为是胶水语言，因为它可以很好的把其他语言粘合在一起，使用python可以进行web开发，大数据，科学计算，硬件开发，软件开发，安全领域。几乎所有领域Python都有所涉及，你应该问，python不可以做什么更加合适。</p>
<blockquote>
<p><strong><em>初学者是选择Python2还是选择Python3？</em></strong></p>
</blockquote>
<p>个人推荐python3，首先，博主本人就是从Python3开始学习的，人总要往前看嘛，因为更新是会一直往后继续下去的，以后python3肯定会是重点，以后的模块开发也会更加倾向于python3。说不定哪一天python就不再支持python2了也不一定，这个是完全有可能的。所以还是推荐初学者选择python3，既然都是从头选择，为何不选择一个新的学习呢？</p>
<p>关于python还有很多很多的东西，这个只有当你真正接触的时候才能体会到吧。毕竟我只是简单介绍一下。<br>零基础的并且喜欢看视频的朋友可以点击这里《零基础入门学习Python》，视频是免费的，但是需要注册一个网易云课堂的账户。<br>如果嫌视频教程比较慢的，网上也有很多在线教程比如：<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">《廖雪峰的Python教程》</a><br><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="external">《Python3菜鸟教程》</a><br>跟着教程走一遍，对python就会有一个初步的了解了。<br>后面再一步一步的进阶，再看自己喜欢什么方向，具体去学习。</p>
<p>如果你有什么疑问，或者不清楚的地方，可以在文章下方进行评论，或者给博主发邮件都是可以的，如果发现文章有什么错误的地方，还请多多指正。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提供下载！！分享一个实用的小工具]]></title>
      <url>/2017/07/18/%E6%8F%90%E4%BE%9B%E4%B8%8B%E8%BD%BD%EF%BC%81%EF%BC%81%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇干货，赠人玫瑰，手有余香。</p>
</blockquote>
<p>很多人肯定都有过这样的烦恼“当我们在百度上搜索到一篇文章，却没法复制。下载不是需要下载券就是需要开通vip”。对于很多人来说又不是经常下载东西，偶尔用到一次，充个VIP十分不划算，于是这个小工具的作用就凸显出来了，使用这个工具支持下载百度文库、豆丁网、道客巴巴、电器天下、it168、mbalib、max.book118、open-open、金字塔医学、大桔灯的文章。操作简单，十分方便。（下载按钮在文章底部）<br>我们演示一下操作过程：<br>这是软件安装后打开的样子：</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/8.PNG" alt="1"></p>
<p>我们下拿百度文库举个例子，假如我们要下载一篇《计算机一级考试试题汇总》的文章，而该文章是vip才能免费下载，其他人需要一个下载券：</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/2.PNG" alt="2"></p>
<p>我们只需要把该页面的网址链接复制下来，粘贴到冰点文库下载器里面（当你打开冰点文库之后，你复制的内容会自动粘贴到冰点文库指定的页面）：</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/3.PNG" alt="3"></p>
<p>然后点击下载就可以了，文章可以在左侧的已下载里看到，双击它就可以打开文件所在位置，保存了两种格式 pdf 和 txt十分的方便。</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/4.PNG" alt="4"></p>
<p>我们再来演示一个对豆丁文章的下载：</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/5.PNG" alt="5"></p>
<p>复制文章链接，粘贴到冰点文库下载器里面，点击下载：</p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/6.PNG" alt="6"></p>
<p><img src="http://ota4ckew7.bkt.clouddn.com/7.PNG" alt="7"></p>
<p>其他的就不演示了，操作都一样。是不是特别简单又特别实用呢！赶紧下载吧（Windows平台的哦）</p>
<blockquote>
<p>点击下方软件下载按钮进行下载</p>
</blockquote>
<p><a href="http://ota4ckew7.bkt.clouddn.com/%E5%86%B0%E7%82%B9%E6%96%87%E5%BA%93%E4%B8%8B%E8%BD%BD%20v3.0.rar" target="_blank" rel="external">软件下载</a></p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 干货 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WordPress安装环境与配置的选择]]></title>
      <url>/2017/07/18/WordPress%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<p>最近在折腾WordPress搭建博客，关于WordPress搭建博客，总结一些心得。</p>
<blockquote>
<p>##关于WordPress（以下内容摘自百度百科）</p>
</blockquote>
<ul>
<li>WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。</li>
<li>WordPress是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和MySQL数据库开发的。用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。<br>WordPress有许多第三方开发的免费模板，安装方式简单易用。不过要做一个自己的模板，则需要你有一定的专业知识。比如你至少要懂的标准通用标记语言下的一个应用HTML代码、CSS、PHP等相关知识。</li>
<li>由于WordPress用的人很多，后台管理方便，安装等等也不是特别麻烦，所以博主就选择WordPress作为自己博客的首选。</li>
</ul>
<blockquote>
<h2 id="wordpress-的安装"><a href="#wordpress-的安装" class="headerlink" title="wordpress 的安装"></a>wordpress 的安装</h2></blockquote>
<p>安装WordPress首先需要有一个web服务器，需要一个存储博客内容以及评论等等的数据库(MySQL)，需要PHP（PHP: Hypertext Preprocessor超文本预处理器）对网页进行处理。安装WordPress有很多种方式，首先分平台（Windows，Linux，Mac），不同操作系统安装不同，其次是网页服务器的选择，UNIX和Linux下经常使用Apache和Nginx作为web服务器，而Windows经常使用IIS作为web服务器。<br>而服务器端多用Linux作为服务器，所以大多数都是使用Apache或Nginx作为web服务器，我们这里也就只介绍这两种web服务器。</p>
<blockquote>
<h3 id="Apache-和-Nginx的区别"><a href="#Apache-和-Nginx的区别" class="headerlink" title="Apache 和 Nginx的区别"></a>Apache 和 Nginx的区别</h3></blockquote>
<ul>
<li>作为 Web 服务器：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。在高连接并发的情况下，Nginx是Apache服务器不错的替代品: Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一. 能够支持高达 50000 个并发连接数的响应, 感谢Nginx为我们选择了 epoll and kqueue 作为开发模型。<br>Nginx作为负载均衡服务器: Nginx 既可以在内部直接支持 Rails 和 PHP 程序对外进行服务, 也可以支持作为 HTTP代理 服务器对外进行服务. Nginx采用C进行编写, 不论是系统资源开销还是CPU使用效率都比 Perlbal 要好很多.</li>
<li>Nginx 配置简洁, Apache 复杂 ，Nginx 启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动. 你还能够不间断服务的情况下进行软件版本的升级 . Nginx 静态处理性能比 Apache 高 3倍以上 ，Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端来使用 ,Apache 的组件比 Nginx 多.</li>
<li>最核心的区别在于apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程 .</li>
<li>nginx的优势是处理静态请求，cpu内存使用率低，apache适合处理动态请求，所以现在一般前端用nginx作为反向代理抗住压力，apache作为后端处理动态请求。</li>
</ul>
<hr>
<p>所以是选择Nginx还是选择Apache作为web服务器，需要看你的站点是用来做什么的。Nginx适合做静态，简单，效率高。Apache适合做动态，稳定，功能强。Nginx负载能力特别强，随着web服务器的发展，Nginx的地位越来越高，而Nginx并发性好，CPU内存占用地，十分适合个人博客这样配置不是很高的站点。博主就选择了Nginx作为WordPress的web服务器。</p>
<p>一般安装WordPress可以使用LAMP（Linux+Apache+MySQL+PHP）环境进行搭建安装，还可以使用LEMP（Linux+Nginx+MySQL+PHP）环境进行搭建安装。这两个环境博主都进行了安装测试。博主刚开始选择的是使用CentOS7 + Apache + MySQL + PHP 搭建WordPress（<a href="http://bbiao.me/2017/07/16/%E4%BD%BF%E7%94%A8linux-apache-mysql-php-lamp%E6%90%AD%E5%BB%BAwordpress/" target="_blank" rel="external">看这篇文章</a>），由于经常会出现“Error Establishing a Database Connection”错误(这是因为博主的服务器的内存较小的原因)，博主换成了LEMP环境，重新搭建了一个。后来还是会出现这种错误，但是没有LAMP环境那么频繁。</p>
<blockquote>
<p>###为什么会出现Error Establishing a Database Connection？</p>
</blockquote>
<p>这个错误表示WordPress无法建立数据库连接，出现这种问题原因一般有以下三点：</p>
<ul>
<li>数据库进行了更改（比如数据库名称发生了变化），没有及时在WordPress的配置文件wp-config.php中手动同步更改数据库名称</li>
<li>可能你的数据库已损坏，这样也会出现该错误</li>
<li>你的服务器无响应（也就是常说的宕机）<br>如果是第一种情况的话，你只需要登录你的远程主机，然后更改你的配置文件（wp-config.php），将如下文件对应的数据库，数据库用户，和密码更正后保存即可解决问题。<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">define</span>(‘<span class="section">DB_NAME</span>’, ‘your_database’);</div><div class="line"><span class="keyword">define</span>(‘<span class="section">DB_USER</span>’, ‘your_database_user’);</div><div class="line"><span class="keyword">define</span>(‘<span class="section">DB_PASSWORD</span>’, ‘your_password’);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果是第二种情况，并且你的网站首页和/wp-admin/都是相同的错误，那你可以登录你的远程主机，在你的WordPress配置文件（wp-config.php）中添加如下代码，然后通过访问<a href="http://Your_domain_name_OR_IP/wp-admin/maint/repair.php" target="_blank" rel="external">http://Your_domain_name_OR_IP/wp-admin/maint/repair.php</a> 就可以开启修复模式。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">define</span></span>(‘WP_ALLOW_REPAIR’, <span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>如果是第三种错误（最常见的错误），即你什么都没有做，刚开始还用着好好的，突然就不能用了（报出这个错误），首先遇到错误不要慌，出现这种情况，很大的可能是你的虚拟主机的内存不够用了，解决这个问题最简单的方法是重启虚拟主机。最根本的解决办法是更换内存更大的虚拟主机，要相信一分钱一分货。博主刚开始就是选择的最低配置，安装了WordPress，现在还没有多少人访问呢，就经常宕机，那要是以后人慢慢多了，那还不是就开不了机了，于是长痛不如短痛，博主一狠心，更换了一个内存更大，当然价格更贵的虚拟主机上。</p>
<blockquote>
<h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2></blockquote>
<p>关于网站已经数据库备份的问题。一点要有备份的意识。</p>
<h2 id="数据备份十分的重要！"><a href="#数据备份十分的重要！" class="headerlink" title="数据备份十分的重要！"></a>数据备份十分的重要！</h2><h2 id="数据备份十分的重要！-1"><a href="#数据备份十分的重要！-1" class="headerlink" title="数据备份十分的重要！"></a>数据备份十分的重要！</h2><h2 id="数据备份十分的重要！-2"><a href="#数据备份十分的重要！-2" class="headerlink" title="数据备份十分的重要！"></a>数据备份十分的重要！</h2><p>如果你以后经营个人网站也好，管理大型服务器也罢，一定要记得经常备份数据。谁也不能保证电脑不出意外，既然是意外就是没法预测的，自己的网站，就跟自己的家一样，辛辛苦苦经营那么长时间，如果突然倒塌了，是谁都受不了，但是如果你备份了，就算是崩塌了，也可以很快的恢复原样，为了避免悲剧的发生，请一定要备份。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续创作。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vps </tag>
            
            <tag> WordPress </tag>
            
            <tag> Lamp </tag>
            
            <tag> Lemp </tag>
            
            <tag> 经验 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大学感悟]]></title>
      <url>/2017/07/16/%E5%A4%A7%E5%AD%A6%E6%84%9F%E6%82%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="博客也已经搭建好了，下一步就是坚持写文章了。其实，我搭建这个博客的目的主要是用来记录自己的学习，总结一下学习过程中的收获，加深一下学习后的成果，写写生活中的感悟。以前一直都想搭建一个属于自己的博客，但是没有时间也没有实力去搭建。"><a href="#博客也已经搭建好了，下一步就是坚持写文章了。其实，我搭建这个博客的目的主要是用来记录自己的学习，总结一下学习过程中的收获，加深一下学习后的成果，写写生活中的感悟。以前一直都想搭建一个属于自己的博客，但是没有时间也没有实力去搭建。" class="headerlink" title="博客也已经搭建好了，下一步就是坚持写文章了。其实，我搭建这个博客的目的主要是用来记录自己的学习，总结一下学习过程中的收获，加深一下学习后的成果，写写生活中的感悟。以前一直都想搭建一个属于自己的博客，但是没有时间也没有实力去搭建。"></a>博客也已经搭建好了，下一步就是坚持写文章了。其实，我搭建这个博客的目的主要是用来记录自己的学习，总结一下学习过程中的收获，加深一下学习后的成果，写写生活中的感悟。以前一直都想搭建一个属于自己的博客，但是没有时间也没有实力去搭建。</h3><h3 id="博主是一名普通大学生，再开学就是大三了，大学生活过的飞快，不知不觉中都已经过去一大半了，自己不想碌碌无为，也不想荒废了这四年，不满足于现状，希望通过自己的努力去改变自己的未来。"><a href="#博主是一名普通大学生，再开学就是大三了，大学生活过的飞快，不知不觉中都已经过去一大半了，自己不想碌碌无为，也不想荒废了这四年，不满足于现状，希望通过自己的努力去改变自己的未来。" class="headerlink" title="博主是一名普通大学生，再开学就是大三了，大学生活过的飞快，不知不觉中都已经过去一大半了，自己不想碌碌无为，也不想荒废了这四年，不满足于现状，希望通过自己的努力去改变自己的未来。"></a>博主是一名普通大学生，再开学就是大三了，大学生活过的飞快，不知不觉中都已经过去一大半了，自己不想碌碌无为，也不想荒废了这四年，不满足于现状，希望通过自己的努力去改变自己的未来。</h3><h3 id="我的大学经历算是比较特殊的，高中成绩不怎么样，一直属于班级靠后的那部分人，高考超长发挥才比二本分数线高十几分，我的家在安徽省，脑子发热报了一所新疆的大学，学的是网络工程专业，刚步入大学和其他大学生一样，迷茫，还沉浸在高考后的喜悦中和老师们灌输的“到了大学就轻松了，到了大学就解放了”的思想中没有清醒过来，大一刚开学的大家都比较兴奋，比较新奇，感觉换了一个身份，换了一个环境。大一刚开学因为赶上新疆成立六十周年，所有的官兵都去维护治安了，导致军训都被推迟了。开学第一个月，发现大学并不是像自己高中时想象的那样，更不像是老师说的那样。没有天天的图书馆，没有一周几节课的体验，感觉每天都是满满的课，而且老师讲课也没有高中的时候那么认真投入。同学也都不是很认真的听，周围的氛围十分的慵懒，几乎没有学习的。开学一个月后，阴差阳错的自己成了班级里的学习委员，为了起到表率作用，虽然周围没有什么学习的氛围，但是自己还是会强迫着自己学点东西。千里马再好，如果没有伯乐，也会被埋没。而我们的班主任正是这位伯乐，在开学不久，我们班主任就“强迫”我们到实验室去自学，后来统一要求我们自学C语言，遇到不会的让我们互相讨论，他也会来指导我们。这算是我在计算机这个领域的入门，但是本人本来自律性就不是很好（高中逼的了），虽然知道班主任这样做是对自己好，但是自己当时对计算机的兴趣不是特别浓厚，特别是刚学代码，各种错误，特别考验人，但是随着慢慢的学习，慢慢有所进步。但是还是没有真正的喜欢上计算机这个领域。后来第一学期就过去了，回想一下也就是在老班组织的实验室里学到了一些东西，其他还真没学到什么东西。我相信很多同学都和我大一的时候一样，一学期结束了，想想自己，一学期除了考试周认真预习了，其他那么多时间都在干什么？自己这一学期又都学到了什么东西？"><a href="#我的大学经历算是比较特殊的，高中成绩不怎么样，一直属于班级靠后的那部分人，高考超长发挥才比二本分数线高十几分，我的家在安徽省，脑子发热报了一所新疆的大学，学的是网络工程专业，刚步入大学和其他大学生一样，迷茫，还沉浸在高考后的喜悦中和老师们灌输的“到了大学就轻松了，到了大学就解放了”的思想中没有清醒过来，大一刚开学的大家都比较兴奋，比较新奇，感觉换了一个身份，换了一个环境。大一刚开学因为赶上新疆成立六十周年，所有的官兵都去维护治安了，导致军训都被推迟了。开学第一个月，发现大学并不是像自己高中时想象的那样，更不像是老师说的那样。没有天天的图书馆，没有一周几节课的体验，感觉每天都是满满的课，而且老师讲课也没有高中的时候那么认真投入。同学也都不是很认真的听，周围的氛围十分的慵懒，几乎没有学习的。开学一个月后，阴差阳错的自己成了班级里的学习委员，为了起到表率作用，虽然周围没有什么学习的氛围，但是自己还是会强迫着自己学点东西。千里马再好，如果没有伯乐，也会被埋没。而我们的班主任正是这位伯乐，在开学不久，我们班主任就“强迫”我们到实验室去自学，后来统一要求我们自学C语言，遇到不会的让我们互相讨论，他也会来指导我们。这算是我在计算机这个领域的入门，但是本人本来自律性就不是很好（高中逼的了），虽然知道班主任这样做是对自己好，但是自己当时对计算机的兴趣不是特别浓厚，特别是刚学代码，各种错误，特别考验人，但是随着慢慢的学习，慢慢有所进步。但是还是没有真正的喜欢上计算机这个领域。后来第一学期就过去了，回想一下也就是在老班组织的实验室里学到了一些东西，其他还真没学到什么东西。我相信很多同学都和我大一的时候一样，一学期结束了，想想自己，一学期除了考试周认真预习了，其他那么多时间都在干什么？自己这一学期又都学到了什么东西？" class="headerlink" title="我的大学经历算是比较特殊的，高中成绩不怎么样，一直属于班级靠后的那部分人，高考超长发挥才比二本分数线高十几分，我的家在安徽省，脑子发热报了一所新疆的大学，学的是网络工程专业，刚步入大学和其他大学生一样，迷茫，还沉浸在高考后的喜悦中和老师们灌输的“到了大学就轻松了，到了大学就解放了”的思想中没有清醒过来，大一刚开学的大家都比较兴奋，比较新奇，感觉换了一个身份，换了一个环境。大一刚开学因为赶上新疆成立六十周年，所有的官兵都去维护治安了，导致军训都被推迟了。开学第一个月，发现大学并不是像自己高中时想象的那样，更不像是老师说的那样。没有天天的图书馆，没有一周几节课的体验，感觉每天都是满满的课，而且老师讲课也没有高中的时候那么认真投入。同学也都不是很认真的听，周围的氛围十分的慵懒，几乎没有学习的。开学一个月后，阴差阳错的自己成了班级里的学习委员，为了起到表率作用，虽然周围没有什么学习的氛围，但是自己还是会强迫着自己学点东西。千里马再好，如果没有伯乐，也会被埋没。而我们的班主任正是这位伯乐，在开学不久，我们班主任就“强迫”我们到实验室去自学，后来统一要求我们自学C语言，遇到不会的让我们互相讨论，他也会来指导我们。这算是我在计算机这个领域的入门，但是本人本来自律性就不是很好（高中逼的了），虽然知道班主任这样做是对自己好，但是自己当时对计算机的兴趣不是特别浓厚，特别是刚学代码，各种错误，特别考验人，但是随着慢慢的学习，慢慢有所进步。但是还是没有真正的喜欢上计算机这个领域。后来第一学期就过去了，回想一下也就是在老班组织的实验室里学到了一些东西，其他还真没学到什么东西。我相信很多同学都和我大一的时候一样，一学期结束了，想想自己，一学期除了考试周认真预习了，其他那么多时间都在干什么？自己这一学期又都学到了什么东西？"></a>我的大学经历算是比较特殊的，高中成绩不怎么样，一直属于班级靠后的那部分人，高考超长发挥才比二本分数线高十几分，我的家在安徽省，脑子发热报了一所新疆的大学，学的是网络工程专业，刚步入大学和其他大学生一样，迷茫，还沉浸在高考后的喜悦中和老师们灌输的“到了大学就轻松了，到了大学就解放了”的思想中没有清醒过来，大一刚开学的大家都比较兴奋，比较新奇，感觉换了一个身份，换了一个环境。大一刚开学因为赶上新疆成立六十周年，所有的官兵都去维护治安了，导致军训都被推迟了。开学第一个月，发现大学并不是像自己高中时想象的那样，更不像是老师说的那样。没有天天的图书馆，没有一周几节课的体验，感觉每天都是满满的课，而且老师讲课也没有高中的时候那么认真投入。同学也都不是很认真的听，周围的氛围十分的慵懒，几乎没有学习的。开学一个月后，阴差阳错的自己成了班级里的学习委员，为了起到表率作用，虽然周围没有什么学习的氛围，但是自己还是会强迫着自己学点东西。千里马再好，如果没有伯乐，也会被埋没。而我们的班主任正是这位伯乐，在开学不久，我们班主任就“强迫”我们到实验室去自学，后来统一要求我们自学C语言，遇到不会的让我们互相讨论，他也会来指导我们。这算是我在计算机这个领域的入门，但是本人本来自律性就不是很好（高中逼的了），虽然知道班主任这样做是对自己好，但是自己当时对计算机的兴趣不是特别浓厚，特别是刚学代码，各种错误，特别考验人，但是随着慢慢的学习，慢慢有所进步。但是还是没有真正的喜欢上计算机这个领域。后来第一学期就过去了，回想一下也就是在老班组织的实验室里学到了一些东西，其他还真没学到什么东西。我相信很多同学都和我大一的时候一样，一学期结束了，想想自己，一学期除了考试周认真预习了，其他那么多时间都在干什么？自己这一学期又都学到了什么东西？</h3><h3 id="大一这一年匆匆就过去了，发现自己和刚进入大学的时候没啥多大的区别，真要说区别的话，就是学会了用U盘傻瓜式装系统，对计算机专业有了一点浅薄的认识。但是自己心里那股“大学四年不能荒废，我的未来我要自己创造”的信念，越来越强烈，当我荒废的时候，当我享乐的时候，我会不安心。我清楚的知道这个社会有多么的残酷，按照这种状态下去，别说是改变命运，毕业不失业就是万幸了。"><a href="#大一这一年匆匆就过去了，发现自己和刚进入大学的时候没啥多大的区别，真要说区别的话，就是学会了用U盘傻瓜式装系统，对计算机专业有了一点浅薄的认识。但是自己心里那股“大学四年不能荒废，我的未来我要自己创造”的信念，越来越强烈，当我荒废的时候，当我享乐的时候，我会不安心。我清楚的知道这个社会有多么的残酷，按照这种状态下去，别说是改变命运，毕业不失业就是万幸了。" class="headerlink" title="大一这一年匆匆就过去了，发现自己和刚进入大学的时候没啥多大的区别，真要说区别的话，就是学会了用U盘傻瓜式装系统，对计算机专业有了一点浅薄的认识。但是自己心里那股“大学四年不能荒废，我的未来我要自己创造”的信念，越来越强烈，当我荒废的时候，当我享乐的时候，我会不安心。我清楚的知道这个社会有多么的残酷，按照这种状态下去，别说是改变命运，毕业不失业就是万幸了。"></a>大一这一年匆匆就过去了，发现自己和刚进入大学的时候没啥多大的区别，真要说区别的话，就是学会了用U盘傻瓜式装系统，对计算机专业有了一点浅薄的认识。但是自己心里那股“大学四年不能荒废，我的未来我要自己创造”的信念，越来越强烈，当我荒废的时候，当我享乐的时候，我会不安心。我清楚的知道这个社会有多么的残酷，按照这种状态下去，别说是改变命运，毕业不失业就是万幸了。</h3><h3 id="下面事情发生转机，学校有一个交流项目，我们专业有六个名额，分别是去中国科学技术大学、大连理工、北师大珠海分校。机缘巧合，阴差阳错，经过考试，面试等等一系列过程，我得到了前往中科大交流学习一年的机会。这一年对我来说是一个转变，大二这一年我在中科大。这一年的真是煎熬与丰收并存。煎熬主要是因为自己基础太差，所以很辛苦，丰收是因为高压之下自己并没有放弃，坚持下来就是胜利。这一年经历了太多的压力，很多东西都不会，主要是基础跟不上，再加上大一这一年被拉开的差距越来越大，此消彼长。我感觉科大的学生压力真的挺大的，我经常开玩笑说来科大上了一年高四。科大的老师在搞科研这方面都很优秀。老师对同学们的要求也特别的高，考试考的也都特别难。虽然科大老师都特别优秀，但是可以说这一年我几乎没有从科大老师那里学到什么东西。但是有一点可能是其他学校教不了我的，那就是自学的能力。科大给了我很多的压力，加上我不服输的信念，培养了我自学的能力。我知道这一年完全需要靠自己，只有自己才可以拯救自己，我也清楚的知道没有不付出就有的收获。很多人往往只看到别人成功的时候，而没想过别人的努力与付出。别人成功的时候你羡慕别人能成功而不是自己，但是别人努力的时候，你在干什么？我相信任何付出都是对自己的未来的投资。"><a href="#下面事情发生转机，学校有一个交流项目，我们专业有六个名额，分别是去中国科学技术大学、大连理工、北师大珠海分校。机缘巧合，阴差阳错，经过考试，面试等等一系列过程，我得到了前往中科大交流学习一年的机会。这一年对我来说是一个转变，大二这一年我在中科大。这一年的真是煎熬与丰收并存。煎熬主要是因为自己基础太差，所以很辛苦，丰收是因为高压之下自己并没有放弃，坚持下来就是胜利。这一年经历了太多的压力，很多东西都不会，主要是基础跟不上，再加上大一这一年被拉开的差距越来越大，此消彼长。我感觉科大的学生压力真的挺大的，我经常开玩笑说来科大上了一年高四。科大的老师在搞科研这方面都很优秀。老师对同学们的要求也特别的高，考试考的也都特别难。虽然科大老师都特别优秀，但是可以说这一年我几乎没有从科大老师那里学到什么东西。但是有一点可能是其他学校教不了我的，那就是自学的能力。科大给了我很多的压力，加上我不服输的信念，培养了我自学的能力。我知道这一年完全需要靠自己，只有自己才可以拯救自己，我也清楚的知道没有不付出就有的收获。很多人往往只看到别人成功的时候，而没想过别人的努力与付出。别人成功的时候你羡慕别人能成功而不是自己，但是别人努力的时候，你在干什么？我相信任何付出都是对自己的未来的投资。" class="headerlink" title="下面事情发生转机，学校有一个交流项目，我们专业有六个名额，分别是去中国科学技术大学、大连理工、北师大珠海分校。机缘巧合，阴差阳错，经过考试，面试等等一系列过程，我得到了前往中科大交流学习一年的机会。这一年对我来说是一个转变，大二这一年我在中科大。这一年的真是煎熬与丰收并存。煎熬主要是因为自己基础太差，所以很辛苦，丰收是因为高压之下自己并没有放弃，坚持下来就是胜利。这一年经历了太多的压力，很多东西都不会，主要是基础跟不上，再加上大一这一年被拉开的差距越来越大，此消彼长。我感觉科大的学生压力真的挺大的，我经常开玩笑说来科大上了一年高四。科大的老师在搞科研这方面都很优秀。老师对同学们的要求也特别的高，考试考的也都特别难。虽然科大老师都特别优秀，但是可以说这一年我几乎没有从科大老师那里学到什么东西。但是有一点可能是其他学校教不了我的，那就是自学的能力。科大给了我很多的压力，加上我不服输的信念，培养了我自学的能力。我知道这一年完全需要靠自己，只有自己才可以拯救自己，我也清楚的知道没有不付出就有的收获。很多人往往只看到别人成功的时候，而没想过别人的努力与付出。别人成功的时候你羡慕别人能成功而不是自己，但是别人努力的时候，你在干什么？我相信任何付出都是对自己的未来的投资。"></a>下面事情发生转机，学校有一个交流项目，我们专业有六个名额，分别是去中国科学技术大学、大连理工、北师大珠海分校。机缘巧合，阴差阳错，经过考试，面试等等一系列过程，我得到了前往中科大交流学习一年的机会。这一年对我来说是一个转变，大二这一年我在中科大。这一年的真是煎熬与丰收并存。煎熬主要是因为自己基础太差，所以很辛苦，丰收是因为高压之下自己并没有放弃，坚持下来就是胜利。这一年经历了太多的压力，很多东西都不会，主要是基础跟不上，再加上大一这一年被拉开的差距越来越大，此消彼长。我感觉科大的学生压力真的挺大的，我经常开玩笑说来科大上了一年高四。科大的老师在搞科研这方面都很优秀。老师对同学们的要求也特别的高，考试考的也都特别难。虽然科大老师都特别优秀，但是可以说这一年我几乎没有从科大老师那里学到什么东西。但是有一点可能是其他学校教不了我的，那就是自学的能力。科大给了我很多的压力，加上我不服输的信念，培养了我自学的能力。我知道这一年完全需要靠自己，只有自己才可以拯救自己，我也清楚的知道没有不付出就有的收获。很多人往往只看到别人成功的时候，而没想过别人的努力与付出。别人成功的时候你羡慕别人能成功而不是自己，但是别人努力的时候，你在干什么？我相信任何付出都是对自己的未来的投资。</h3><h3 id="以前经常听身边的人说“环境不重要，关键还是看自己，如果自己认真学，在哪都是学”，之前我也是这样认为的，但是我现在不这样认为，我认为环境能够改变人。不是所有的人生来都是自制能力很强的，这需要后天的培养，后天怎么培养，环境。周围的人自制能力都很强，自己的自制力慢慢的也会变强。在新疆我晚上学到十一点半我感觉我学的已经够晚的了，别人都在玩。在科大我学到十一点半，我感觉自己学的还不够，别人都还在学。在新疆我早上九点起来感觉起的也不晚，在科大我早上九点起来，看看宿舍空无一人，就会又有一种愧疚感。这难道不是环境影响人吗？有人说“你未来的收入是你接触最频繁的5个人平均值”。"><a href="#以前经常听身边的人说“环境不重要，关键还是看自己，如果自己认真学，在哪都是学”，之前我也是这样认为的，但是我现在不这样认为，我认为环境能够改变人。不是所有的人生来都是自制能力很强的，这需要后天的培养，后天怎么培养，环境。周围的人自制能力都很强，自己的自制力慢慢的也会变强。在新疆我晚上学到十一点半我感觉我学的已经够晚的了，别人都在玩。在科大我学到十一点半，我感觉自己学的还不够，别人都还在学。在新疆我早上九点起来感觉起的也不晚，在科大我早上九点起来，看看宿舍空无一人，就会又有一种愧疚感。这难道不是环境影响人吗？有人说“你未来的收入是你接触最频繁的5个人平均值”。" class="headerlink" title="以前经常听身边的人说“环境不重要，关键还是看自己，如果自己认真学，在哪都是学”，之前我也是这样认为的，但是我现在不这样认为，我认为环境能够改变人。不是所有的人生来都是自制能力很强的，这需要后天的培养，后天怎么培养，环境。周围的人自制能力都很强，自己的自制力慢慢的也会变强。在新疆我晚上学到十一点半我感觉我学的已经够晚的了，别人都在玩。在科大我学到十一点半，我感觉自己学的还不够，别人都还在学。在新疆我早上九点起来感觉起的也不晚，在科大我早上九点起来，看看宿舍空无一人，就会又有一种愧疚感。这难道不是环境影响人吗？有人说“你未来的收入是你接触最频繁的5个人平均值”。"></a>以前经常听身边的人说“环境不重要，关键还是看自己，如果自己认真学，在哪都是学”，之前我也是这样认为的，但是我现在不这样认为，我认为环境能够改变人。不是所有的人生来都是自制能力很强的，这需要后天的培养，后天怎么培养，环境。周围的人自制能力都很强，自己的自制力慢慢的也会变强。在新疆我晚上学到十一点半我感觉我学的已经够晚的了，别人都在玩。在科大我学到十一点半，我感觉自己学的还不够，别人都还在学。在新疆我早上九点起来感觉起的也不晚，在科大我早上九点起来，看看宿舍空无一人，就会又有一种愧疚感。这难道不是环境影响人吗？有人说“你未来的收入是你接触最频繁的5个人平均值”。</h3><h3 id="在科大另一件对我影响很大的事情就是培养了我对计算机这个专业的兴趣，以前对计算机这个专业好奇大于兴趣。现在是真的感兴趣，有自己喜欢的东西。能够安安静静的坐下来，心平气和的敲代码，面对一大堆BUG，能够内心毫无波澜的一个一个调试。心态改变了很多。有了一个大致的方向，迈着坚定的步子，一步一个脚印的走着。"><a href="#在科大另一件对我影响很大的事情就是培养了我对计算机这个专业的兴趣，以前对计算机这个专业好奇大于兴趣。现在是真的感兴趣，有自己喜欢的东西。能够安安静静的坐下来，心平气和的敲代码，面对一大堆BUG，能够内心毫无波澜的一个一个调试。心态改变了很多。有了一个大致的方向，迈着坚定的步子，一步一个脚印的走着。" class="headerlink" title="在科大另一件对我影响很大的事情就是培养了我对计算机这个专业的兴趣，以前对计算机这个专业好奇大于兴趣。现在是真的感兴趣，有自己喜欢的东西。能够安安静静的坐下来，心平气和的敲代码，面对一大堆BUG，能够内心毫无波澜的一个一个调试。心态改变了很多。有了一个大致的方向，迈着坚定的步子，一步一个脚印的走着。"></a>在科大另一件对我影响很大的事情就是培养了我对计算机这个专业的兴趣，以前对计算机这个专业好奇大于兴趣。现在是真的感兴趣，有自己喜欢的东西。能够安安静静的坐下来，心平气和的敲代码，面对一大堆BUG，能够内心毫无波澜的一个一个调试。心态改变了很多。有了一个大致的方向，迈着坚定的步子，一步一个脚印的走着。</h3><h3 id="科大有许多值得赞誉的地方，无论是教育水平，管理方式都是十分优秀的。科大的同学们也都十分的努力，大家都对自己很负责，我看了科大毕业生月平均收入都是10K-。确实，他们很优秀，但是他们也很努力，天赋加上汗水，他们怎么会不成功？"><a href="#科大有许多值得赞誉的地方，无论是教育水平，管理方式都是十分优秀的。科大的同学们也都十分的努力，大家都对自己很负责，我看了科大毕业生月平均收入都是10K-。确实，他们很优秀，但是他们也很努力，天赋加上汗水，他们怎么会不成功？" class="headerlink" title="科大有许多值得赞誉的地方，无论是教育水平，管理方式都是十分优秀的。科大的同学们也都十分的努力，大家都对自己很负责，我看了科大毕业生月平均收入都是10K+。确实，他们很优秀，但是他们也很努力，天赋加上汗水，他们怎么会不成功？"></a>科大有许多值得赞誉的地方，无论是教育水平，管理方式都是十分优秀的。科大的同学们也都十分的努力，大家都对自己很负责，我看了科大毕业生月平均收入都是10K+。确实，他们很优秀，但是他们也很努力，天赋加上汗水，他们怎么会不成功？</h3><h3 id="开学又要回新疆了，大三这一年是过的特别快的，希望自己能够不忘初心。大学是给自己增加资本最好的时光，大学给了大多数人同样的四年时间，谁能把握住，谁就是赢家。大四上学期就要出去实习了，希望实习的时候自己能够有选择权。只有自己有资本了，才有选择权。"><a href="#开学又要回新疆了，大三这一年是过的特别快的，希望自己能够不忘初心。大学是给自己增加资本最好的时光，大学给了大多数人同样的四年时间，谁能把握住，谁就是赢家。大四上学期就要出去实习了，希望实习的时候自己能够有选择权。只有自己有资本了，才有选择权。" class="headerlink" title="开学又要回新疆了，大三这一年是过的特别快的，希望自己能够不忘初心。大学是给自己增加资本最好的时光，大学给了大多数人同样的四年时间，谁能把握住，谁就是赢家。大四上学期就要出去实习了，希望实习的时候自己能够有选择权。只有自己有资本了，才有选择权。"></a>开学又要回新疆了，大三这一年是过的特别快的，希望自己能够不忘初心。大学是给自己增加资本最好的时光，大学给了大多数人同样的四年时间，谁能把握住，谁就是赢家。大四上学期就要出去实习了，希望实习的时候自己能够有选择权。只有自己有资本了，才有选择权。</h3></blockquote>
<h2 id="送给大家一句自己很喜欢的一句话“不要在最能吃苦的年纪选择了安逸。"><a href="#送给大家一句自己很喜欢的一句话“不要在最能吃苦的年纪选择了安逸。" class="headerlink" title="送给大家一句自己很喜欢的一句话“不要在最能吃苦的年纪选择了安逸。"></a><em>送给大家一句自己很喜欢的一句话“不要在最能吃苦的年纪选择了安逸。</em></h2>]]></content>
      
        <categories>
            
            <category> 感悟 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用linux-apache-mysql-php-lamp搭建wordpress]]></title>
      <url>/2017/07/16/%E4%BD%BF%E7%94%A8linux-apache-mysql-php-lamp%E6%90%AD%E5%BB%BAwordpress/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近一直在折腾服务器，博客搭建，今天就写一篇关于使用WordPress搭建个人博客的文章吧。</p>
</blockquote>
<h3 id="开始之前，我们需要购买一个虚拟主机，虚拟主机的注册及购买请参考我的令一篇文章Digital-Ocean注册和虚拟主机的创建。我们目的是想要安装WordPress在我们的虚拟主机上，但是搭建WordPress依赖于LAMP的环境，当然还有其他的环境可以搭建WordPress，我们现在先讲LAMP的搭建方法，我们选择的是CentOS7作为虚拟主机。"><a href="#开始之前，我们需要购买一个虚拟主机，虚拟主机的注册及购买请参考我的令一篇文章Digital-Ocean注册和虚拟主机的创建。我们目的是想要安装WordPress在我们的虚拟主机上，但是搭建WordPress依赖于LAMP的环境，当然还有其他的环境可以搭建WordPress，我们现在先讲LAMP的搭建方法，我们选择的是CentOS7作为虚拟主机。" class="headerlink" title="开始之前，我们需要购买一个虚拟主机，虚拟主机的注册及购买请参考我的令一篇文章Digital Ocean注册和虚拟主机的创建。我们目的是想要安装WordPress在我们的虚拟主机上，但是搭建WordPress依赖于LAMP的环境，当然还有其他的环境可以搭建WordPress，我们现在先讲LAMP的搭建方法，我们选择的是CentOS7作为虚拟主机。"></a>开始之前，我们需要购买一个虚拟主机，虚拟主机的注册及购买请参考我的令一篇文章<a href="http://bbiao.me/2017/07/15/digital-ocean%E6%B3%A8%E5%86%8C%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%88%9B%E5%BB%BA/" target="_blank" rel="external">Digital Ocean注册和虚拟主机的创建</a>。我们目的是想要安装WordPress在我们的虚拟主机上，但是搭建WordPress依赖于LAMP的环境，当然还有其他的环境可以搭建WordPress，我们现在先讲LAMP的搭建方法，我们选择的是CentOS7作为虚拟主机。</h3><h3 id="首先我们远程登录到我们的vps上："><a href="#首先我们远程登录到我们的vps上：" class="headerlink" title="首先我们远程登录到我们的vps上："></a>首先我们远程登录到我们的vps上：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/1.PNG" alt="1"></p>
<h2 id="第一步，我们首先安装Apache作为web服务器："><a href="#第一步，我们首先安装Apache作为web服务器：" class="headerlink" title="第一步，我们首先安装Apache作为web服务器："></a>第一步，我们首先安装<a href="http://baike.baidu.com/link?url=b2lEqNV_6tSQMMKhFB4yMX7BtG5m1X82kcy0hC-e8GNAfi53m_Mq8wJNtKilyIs8aL7WYn1lZV0TtBF0PrBj6K" target="_blank" rel="external">Apache</a>作为web服务器：</h2><ul>
<li>使用如下命令：<font color="Lime">yum install httpd</font><br> 命令中间提示Is this ok [y/d/N]:<br> 直接输入y即可。<br><img src="http://ot60tdaq4.bkt.clouddn.com/2.PNG" alt="2"></li>
</ul>
<h3 id="一旦命令正确无误执行，现在你就已经成功安装Apache服务了，使用如下命令重启你的Apache服务：-systemctl-start-httpd-service"><a href="#一旦命令正确无误执行，现在你就已经成功安装Apache服务了，使用如下命令重启你的Apache服务：-systemctl-start-httpd-service" class="headerlink" title="一旦命令正确无误执行，现在你就已经成功安装Apache服务了，使用如下命令重启你的Apache服务： systemctl start httpd.service"></a>一旦命令正确无误执行，现在你就已经成功安装Apache服务了，使用如下命令重启你的Apache服务： <font color="Lime">systemctl start httpd.service</font></h3><ul>
<li><strong><em>输入<a href="http://your_server_IP_address(你的虚拟主机的IP地址)/" target="_blank" rel="external">http://your_server_IP_address(你的虚拟主机的IP地址)/</a></em></strong><h3 id="即可看到如下画面（看到则表示成功安装了Apache服务）："><a href="#即可看到如下画面（看到则表示成功安装了Apache服务）：" class="headerlink" title="即可看到如下画面（看到则表示成功安装了Apache服务）："></a>即可看到如下画面（看到则表示成功安装了Apache服务）：</h3><img src="http://ot60tdaq4.bkt.clouddn.com/4.PNG" alt="3"></li>
</ul>
<h3 id="你可能想要Apache服务开机就能够自己启动，这样如果我们把我们的博客放在Apache服务器上，如果服务器宕机了，我们直接重启就可以了，如果Apache服务设置了自动启动，那么就不需要我们自己去再启动Apache服务了。"><a href="#你可能想要Apache服务开机就能够自己启动，这样如果我们把我们的博客放在Apache服务器上，如果服务器宕机了，我们直接重启就可以了，如果Apache服务设置了自动启动，那么就不需要我们自己去再启动Apache服务了。" class="headerlink" title="你可能想要Apache服务开机就能够自己启动，这样如果我们把我们的博客放在Apache服务器上，如果服务器宕机了，我们直接重启就可以了，如果Apache服务设置了自动启动，那么就不需要我们自己去再启动Apache服务了。"></a>你可能想要Apache服务开机就能够自己启动，这样如果我们把我们的博客放在Apache服务器上，如果服务器宕机了，我们直接重启就可以了，如果Apache服务设置了自动启动，那么就不需要我们自己去再启动Apache服务了。</h3><h3 id="加入开机启动项中只需要执行以下命令：systemctl-enable-httpd-service"><a href="#加入开机启动项中只需要执行以下命令：systemctl-enable-httpd-service" class="headerlink" title="加入开机启动项中只需要执行以下命令：systemctl enable httpd.service"></a>加入开机启动项中只需要执行以下命令：<font color="Lime">systemctl enable httpd.service</font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/4.PNG" alt="4"></p>
<h2 id="第二步-安装Mysql（MariaDB）"><a href="#第二步-安装Mysql（MariaDB）" class="headerlink" title="第二步  安装Mysql（MariaDB）"></a>第二步  安装Mysql（MariaDB）</h2><h3 id="现在我们的Web服务器启动并运行了，继续安装MariaDB，这是一个MySQL插件。MariaDB是一个社区开发的MySQL关系数据库管理系统的分支。基本上，它将组织和访问我们的网站可以存储信息的数据库。"><a href="#现在我们的Web服务器启动并运行了，继续安装MariaDB，这是一个MySQL插件。MariaDB是一个社区开发的MySQL关系数据库管理系统的分支。基本上，它将组织和访问我们的网站可以存储信息的数据库。" class="headerlink" title="现在我们的Web服务器启动并运行了，继续安装MariaDB，这是一个MySQL插件。MariaDB是一个社区开发的MySQL关系数据库管理系统的分支。基本上，它将组织和访问我们的网站可以存储信息的数据库。"></a>现在我们的Web服务器启动并运行了，继续安装MariaDB，这是一个MySQL插件。MariaDB是一个社区开发的MySQL关系数据库管理系统的分支。基本上，它将组织和访问我们的网站可以存储信息的数据库。</h3><h3 id="通过以下命令安装mariadb：yum-install-mariadb-server-mariadb"><a href="#通过以下命令安装mariadb：yum-install-mariadb-server-mariadb" class="headerlink" title="通过以下命令安装mariadb：yum install mariadb-server mariadb"></a>通过以下命令安装mariadb：<font color="Lime">yum install mariadb-server mariadb</font></h3><h3 id="遇到Is-this-ok-y-d-N-直接输入y"><a href="#遇到Is-this-ok-y-d-N-直接输入y" class="headerlink" title="遇到Is this ok [y/d/N]: 直接输入y"></a>遇到Is this ok [y/d/N]: 直接输入y</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/5.PNG" alt="5"></p>
<h3 id="安装完成后，我们需要使用以下命令启动MariaDB：systemctl-start-mariadb"><a href="#安装完成后，我们需要使用以下命令启动MariaDB：systemctl-start-mariadb" class="headerlink" title="安装完成后，我们需要使用以下命令启动MariaDB：systemctl start mariadb"></a>安装完成后，我们需要使用以下命令启动MariaDB：<font color="Lime">systemctl start mariadb<font></font></font></h3><h3 id="现在我们的MySQL数据库正在运行，我们给我们的mysql设置密码，并删除默认密码，运行以下命令：mysql-secure-installation"><a href="#现在我们的MySQL数据库正在运行，我们给我们的mysql设置密码，并删除默认密码，运行以下命令：mysql-secure-installation" class="headerlink" title="现在我们的MySQL数据库正在运行，我们给我们的mysql设置密码，并删除默认密码，运行以下命令：mysql_secure_installation"></a>现在我们的MySQL数据库正在运行，我们给我们的mysql设置密码，并删除默认密码，运行以下命令：<font color="Lime">mysql_secure_installation<font></font></font></h3><h3 id="首先输入mysql的默认密码（默认密码为空，直接按回车即可）："><a href="#首先输入mysql的默认密码（默认密码为空，直接按回车即可）：" class="headerlink" title="首先输入mysql的默认密码（默认密码为空，直接按回车即可）："></a>首先输入mysql的默认密码（默认密码为空，直接按回车即可）：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/6.PNG" alt="6"></p>
<h3 id="接下来会让你设置新的Mysql的密码，然后再输入一次新密码二次确认，剩下的一路输入y，回车即可："><a href="#接下来会让你设置新的Mysql的密码，然后再输入一次新密码二次确认，剩下的一路输入y，回车即可：" class="headerlink" title="接下来会让你设置新的Mysql的密码，然后再输入一次新密码二次确认，剩下的一路输入y，回车即可："></a>接下来会让你设置新的Mysql的密码，然后再输入一次新密码二次确认，剩下的一路输入y，回车即可：</h3><blockquote>
<p>   Enter current password for root (enter for none):<br>    OK, successfully used password, moving on…</p>
<p>   Setting the root password ensures that nobody can log into the MariaDB<br>    root user without the proper authorization.<br>    New password:<strong><em>password</em></strong><br>    Re-enter new password: <strong><em>password</em></strong><br>    Password updated successfully!<br>    Reloading privilege tables..<br>     … Success!</p>
</blockquote>
<p><img src="http://ot60tdaq4.bkt.clouddn.com/7.PNG" alt="7"></p>
<h3 id="最后，把Mysql的服务也加入到开机自启动项中就即可：systemctl-enable-mariadb-service"><a href="#最后，把Mysql的服务也加入到开机自启动项中就即可：systemctl-enable-mariadb-service" class="headerlink" title="最后，把Mysql的服务也加入到开机自启动项中就即可：systemctl enable mariadb.service"></a>最后，把Mysql的服务也加入到开机自启动项中就即可：<font color="Lime">systemctl enable mariadb.service<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/8.PNG" alt="8"></p>
<h2 id="第三步-安装PHP服务"><a href="#第三步-安装PHP服务" class="headerlink" title="第三步   安装PHP服务"></a>第三步   安装PHP服务</h2><h3 id="PHP是我们设置的组件，它将处理代码以显示动态内容。它可以运行脚本，连接到我们的MySQL数据库以获取信息，并将处理的内容交给我们的Web服务器进行显示。"><a href="#PHP是我们设置的组件，它将处理代码以显示动态内容。它可以运行脚本，连接到我们的MySQL数据库以获取信息，并将处理的内容交给我们的Web服务器进行显示。" class="headerlink" title="PHP是我们设置的组件，它将处理代码以显示动态内容。它可以运行脚本，连接到我们的MySQL数据库以获取信息，并将处理的内容交给我们的Web服务器进行显示。"></a>PHP是我们设置的组件，它将处理代码以显示动态内容。它可以运行脚本，连接到我们的MySQL数据库以获取信息，并将处理的内容交给我们的Web服务器进行显示。</h3><h3 id="使用如下命令：yum-install-php-php-mysql"><a href="#使用如下命令：yum-install-php-php-mysql" class="headerlink" title="使用如下命令：yum install php php-mysql"></a>使用如下命令：<font color="Lime">yum install php php-mysql<font></font></font></h3><blockquote>
<p>遇到Is this ok [y/d/N]:输入y回车即可<br> 为了增强PHP的功能，我们可以选择安装一些其他模块。</p>
<h3 id="yum-search-php"><a href="#yum-search-php" class="headerlink" title="yum search php- "></a><font color="Lime">yum search php- <font></font></font></h3><h3 id="会出现如下可安装的PHP模块："><a href="#会出现如下可安装的PHP模块：" class="headerlink" title="会出现如下可安装的PHP模块："></a>会出现如下可安装的PHP模块：</h3><p>php-bcmath.x86_64 : A module for PHP applications for using the bcmath library<br>php-cli.x86_64 : Command-line interface for PHP<br>php-common.x86_64 : Common files for PHP<br>php-dba.x86_64 : A database abstraction layer module for PHP applications<br>php-devel.x86_64 : Files needed for building PHP extensions<br>php-embedded.x86_64 : PHP library for embedding in applications<br>php-enchant.x86_64 : Enchant spelling extension for PHP applications<br>php-fpm.x86_64 : PHP FastCGI Process Manager<br>php-gd.x86_64 : A module for PHP applications for using the gd graphics library<br>php-intl.x86_64 : Internationalization extension for PHP applications<br>php-ldap.x86_64 : A module for PHP applications that use LDAP<br>php-mbstring.x86_64 : A module for PHP applications which need multi-byte string<br>                    : handling<br>php-mysql.x86_64 : A module for PHP applications that use MySQL databases<br>php-mysqlnd.x86_64 : A module for PHP applications that use MySQL databases<br>php-odbc.x86_64 : A module for PHP applications that use ODBC databases<br>php-pdo.x86_64 : A database access abstraction module for PHP applications<br>php-pear.noarch : PHP Extension and Application Repository framework<br>php-pecl-memcache.x86_64 : Extension to work with the Memcached caching daemon<br>php-pgsql.x86_64 : A PostgreSQL database module for PHP<br>php-process.x86_64 : Modules for PHP script using system process interfaces<br>php-pspell.x86_64 : A module for PHP applications for using pspell interfaces<br>php-recode.x86_64 : A module for PHP applications for using the recode library<br>php-snmp.x86_64 : A module for PHP applications that query SNMP-managed devices<br>php-soap.x86_64 : A module for PHP applications that use the SOAP protocol<br>php-xml.x86_64 : A module for PHP applications which use XML<br>php-xmlrpc.x86_64 : A module for PHP applications which use the XML-RPC protocol</p>
</blockquote>
<h3 id="可以通过：yum-info-package-name来查看要安装的具体的模块的信息："><a href="#可以通过：yum-info-package-name来查看要安装的具体的模块的信息：" class="headerlink" title="可以通过：yum info package_name来查看要安装的具体的模块的信息："></a>可以通过：<font color="Lime">yum info package_name<font>来查看要安装的具体的模块的信息：</font></font></h3><h3 id="比如我们想要查看php-fpm的信息，可以通过如下命令：yum-info-php-fpm"><a href="#比如我们想要查看php-fpm的信息，可以通过如下命令：yum-info-php-fpm" class="headerlink" title="比如我们想要查看php-fpm的信息，可以通过如下命令：yum info php-fpm"></a>比如我们想要查看php-fpm的信息，可以通过如下命令：<font color="Lime">yum info php-fpm<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/9.PNG" alt="9"></p>
<h3 id="我们需要安装php-fpm模块，通过如下命令：yum-install-php-fpm"><a href="#我们需要安装php-fpm模块，通过如下命令：yum-install-php-fpm" class="headerlink" title="我们需要安装php-fpm模块，通过如下命令：yum install php-fpm"></a>我们需要安装php-fpm模块，通过如下命令：<font color="Lime">yum install php-fpm<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/10.PNG" alt="10"></p>
<h3 id="当然我们可以通过-yum-install-package1-package2-…一次安装多个包。"><a href="#当然我们可以通过-yum-install-package1-package2-…一次安装多个包。" class="headerlink" title="当然我们可以通过 yum install package1 package2 …一次安装多个包。"></a>当然我们可以通过 <font color="Lime">yum install package1 package2 …<font>一次安装多个包。</font></font></h3><h3 id="到目前为止我们已经具备了L-CentOS7-A-Apache-M-Mysql-P-PHP-的环境了。接下来我们就测试一下我们的环境是否搭建成功。"><a href="#到目前为止我们已经具备了L-CentOS7-A-Apache-M-Mysql-P-PHP-的环境了。接下来我们就测试一下我们的环境是否搭建成功。" class="headerlink" title="到目前为止我们已经具备了L(CentOS7)A(Apache)M(Mysql)P(PHP)的环境了。接下来我们就测试一下我们的环境是否搭建成功。"></a>到目前为止我们已经具备了L(CentOS7)A(Apache)M(Mysql)P(PHP)的环境了。接下来我们就测试一下我们的环境是否搭建成功。</h3><h2 id="第四步：测试我们搭建的LAMP环境"><a href="#第四步：测试我们搭建的LAMP环境" class="headerlink" title="第四步：测试我们搭建的LAMP环境"></a>第四步：测试我们搭建的LAMP环境</h2><h3 id="我们将调用这个脚本info-php。为了使Apache能够找到文件并正确地提供该文件，它必须保存到一个特定的目录，这被称为“Web根目录”。"><a href="#我们将调用这个脚本info-php。为了使Apache能够找到文件并正确地提供该文件，它必须保存到一个特定的目录，这被称为“Web根目录”。" class="headerlink" title="我们将调用这个脚本info.php。为了使Apache能够找到文件并正确地提供该文件，它必须保存到一个特定的目录，这被称为“Web根目录”。"></a>我们将调用这个脚本info.php。为了使Apache能够找到文件并正确地提供该文件，它必须保存到一个特定的目录，这被称为“Web根目录”。</h3><h3 id="在CentOS-7中，此目录位于-var-www-html-。我们可以通过输入以下命令在该位置创建文件：vi-var-www-html-info-php"><a href="#在CentOS-7中，此目录位于-var-www-html-。我们可以通过输入以下命令在该位置创建文件：vi-var-www-html-info-php" class="headerlink" title="在CentOS 7中，此目录位于/var/www/html/。我们可以通过输入以下命令在该位置创建文件：vi /var/www/html/info.php"></a>在CentOS 7中，此目录位于/var/www/html/。我们可以通过输入以下命令在该位置创建文件：<font color="Lime">vi /var/www/html/info.php<font></font></font></h3><h3 id="这将打开一个空白文件。我们想在文件中放入以下文本，这是有效的PHP代码（使用的是vi编辑器，进入之后首先输入英文字母i进入编辑模式，写入模式下左下角有–INSERT–字样，这样才能写入东西。）："><a href="#这将打开一个空白文件。我们想在文件中放入以下文本，这是有效的PHP代码（使用的是vi编辑器，进入之后首先输入英文字母i进入编辑模式，写入模式下左下角有–INSERT–字样，这样才能写入东西。）：" class="headerlink" title="这将打开一个空白文件。我们想在文件中放入以下文本，这是有效的PHP代码（使用的是vi编辑器，进入之后首先输入英文字母i进入编辑模式，写入模式下左下角有–INSERT–字样，这样才能写入东西。）："></a>这将打开一个空白文件。我们想在文件中放入以下文本，这是有效的PHP代码（使用的是vi编辑器，进入之后首先输入英文字母i进入编辑模式，写入模式下左下角有–INSERT–字样，这样才能写入东西。）：</h3><pre><code>&lt;?php phpinfo(); ?&gt; 
</code></pre><p><img src="http://ot60tdaq4.bkt.clouddn.com/11.PNG" alt="11"></p>
<h3 id="写入完成之后保存退出（按Esc进入命令模式，输入-wq进行保存退出（冒号也是命令的一部分））"><a href="#写入完成之后保存退出（按Esc进入命令模式，输入-wq进行保存退出（冒号也是命令的一部分））" class="headerlink" title="写入完成之后保存退出（按Esc进入命令模式，输入:wq进行保存退出（冒号也是命令的一部分））"></a>写入完成之后保存退出（按Esc进入命令模式，输入:wq进行保存退出（冒号也是命令的一部分））</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/12.png" alt="12"></p>
<h3 id="现在我们可以测试我们的Web服务器是否可以正确显示PHP脚本生成的内容。要想这样做，我们只需要在我们的网络浏览器中访问这个页面。你只需要在你的浏览器中输入如下命令如果显示的是如下页面，则配置正确："><a href="#现在我们可以测试我们的Web服务器是否可以正确显示PHP脚本生成的内容。要想这样做，我们只需要在我们的网络浏览器中访问这个页面。你只需要在你的浏览器中输入如下命令如果显示的是如下页面，则配置正确：" class="headerlink" title="现在我们可以测试我们的Web服务器是否可以正确显示PHP脚本生成的内容。要想这样做，我们只需要在我们的网络浏览器中访问这个页面。你只需要在你的浏览器中输入如下命令如果显示的是如下页面，则配置正确："></a>现在我们可以测试我们的Web服务器是否可以正确显示PHP脚本生成的内容。要想这样做，我们只需要在我们的网络浏览器中访问这个页面。你只需要在你的浏览器中输入如下命令如果显示的是如下页面，则配置正确：</h3><p><strong><a href="http://your_server_IP_address(你的虚拟主机的IP地址)/info.php" target="_blank" rel="external">http://your_server_IP_address(你的虚拟主机的IP地址)/info.php</a></strong></p>
<p><img src="http://ot60tdaq4.bkt.clouddn.com/13.PNG" alt="13"></p>
<h3 id="出现这个页面即表示我们的LAMP环境已经成功搭建完成，通过以下命令把我们的测试文件删掉（info-php文件包含了网站大部分信息，测试的时候用一下可以，平常的时候不能让其他人可以直接查看到这个文件）：rm-var-www-html-info-php"><a href="#出现这个页面即表示我们的LAMP环境已经成功搭建完成，通过以下命令把我们的测试文件删掉（info-php文件包含了网站大部分信息，测试的时候用一下可以，平常的时候不能让其他人可以直接查看到这个文件）：rm-var-www-html-info-php" class="headerlink" title="出现这个页面即表示我们的LAMP环境已经成功搭建完成，通过以下命令把我们的测试文件删掉（info.php文件包含了网站大部分信息，测试的时候用一下可以，平常的时候不能让其他人可以直接查看到这个文件）：rm /var/www/html/info.php"></a>出现这个页面即表示我们的LAMP环境已经成功搭建完成，通过以下命令把我们的测试文件删掉（info.php文件包含了网站大部分信息，测试的时候用一下可以，平常的时候不能让其他人可以直接查看到这个文件）：<font color="Lime">rm /var/www/html/info.php<font></font></font></h3><h2 id="第五步：为WordPress创建数据库"><a href="#第五步：为WordPress创建数据库" class="headerlink" title="第五步：为WordPress创建数据库"></a>第五步：为WordPress创建数据库</h2><h3 id="首先，我们需要通过使用Mysql给我们的博客建立一个数据库，用来存放我们的博客的数据等等。"><a href="#首先，我们需要通过使用Mysql给我们的博客建立一个数据库，用来存放我们的博客的数据等等。" class="headerlink" title="首先，我们需要通过使用Mysql给我们的博客建立一个数据库，用来存放我们的博客的数据等等。"></a>首先，我们需要通过使用Mysql给我们的博客建立一个数据库，用来存放我们的博客的数据等等。</h3><h3 id="通过如下命令：mysql-u-root-p"><a href="#通过如下命令：mysql-u-root-p" class="headerlink" title="通过如下命令：mysql -u root -p"></a>通过如下命令：<font color="Lime">mysql -u root -p<font></font></font></h3><h3 id="会让你输入密码（输入你上面设置的Mysql的密码）。"><a href="#会让你输入密码（输入你上面设置的Mysql的密码）。" class="headerlink" title="会让你输入密码（输入你上面设置的Mysql的密码）。"></a>会让你输入密码（输入你上面设置的Mysql的密码）。</h3><h3 id="这就是我们进入Mysql的界面："><a href="#这就是我们进入Mysql的界面：" class="headerlink" title="这就是我们进入Mysql的界面："></a>这就是我们进入Mysql的界面：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/14.PNG" alt="14"></p>
<h3 id="通过如下命令创建一个数据库（数据库名称可以根据自己的喜好去取，这里演示就用wordpress作为数据库名称了，记住mysql的命令都是以分号结尾，命令结束记得输入分号）：CREATE-DATABASE-wordpress"><a href="#通过如下命令创建一个数据库（数据库名称可以根据自己的喜好去取，这里演示就用wordpress作为数据库名称了，记住mysql的命令都是以分号结尾，命令结束记得输入分号）：CREATE-DATABASE-wordpress" class="headerlink" title="通过如下命令创建一个数据库（数据库名称可以根据自己的喜好去取，这里演示就用wordpress作为数据库名称了，记住mysql的命令都是以分号结尾，命令结束记得输入分号）：CREATE DATABASE wordpress;"></a>通过如下命令创建一个数据库（数据库名称可以根据自己的喜好去取，这里演示就用wordpress作为数据库名称了，记住mysql的命令都是以分号结尾，命令结束记得输入分号）：<font color="Lime">CREATE DATABASE wordpress;<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/15.PNG" alt="15"></p>
<h3 id="接下来，我们将创建一个新的MySQL用户帐户，我们将专门用于在WordPress的新数据库上运行。创建一个专门的数据库和帐户是一个好主意，因为它可以更好地控制权限和其他安全需求。"><a href="#接下来，我们将创建一个新的MySQL用户帐户，我们将专门用于在WordPress的新数据库上运行。创建一个专门的数据库和帐户是一个好主意，因为它可以更好地控制权限和其他安全需求。" class="headerlink" title="接下来，我们将创建一个新的MySQL用户帐户，我们将专门用于在WordPress的新数据库上运行。创建一个专门的数据库和帐户是一个好主意，因为它可以更好地控制权限和其他安全需求。"></a>接下来，我们将创建一个新的MySQL用户帐户，我们将专门用于在WordPress的新数据库上运行。创建一个专门的数据库和帐户是一个好主意，因为它可以更好地控制权限和其他安全需求。</h3><h3 id="通过如下命令创建用户（wordpressuser），这里演示使用wordpressuser作为用户，password作为密码，但是在实际操作中用这样的用户和密码是不安全的，你可以更改成自己熟悉的用户名和密码：-CREATE-USER-wordpressuser-localhost-IDENTIFIED-BY-‘password’"><a href="#通过如下命令创建用户（wordpressuser），这里演示使用wordpressuser作为用户，password作为密码，但是在实际操作中用这样的用户和密码是不安全的，你可以更改成自己熟悉的用户名和密码：-CREATE-USER-wordpressuser-localhost-IDENTIFIED-BY-‘password’" class="headerlink" title="通过如下命令创建用户（wordpressuser），这里演示使用wordpressuser作为用户，password作为密码，但是在实际操作中用这样的用户和密码是不安全的，你可以更改成自己熟悉的用户名和密码： CREATE USER wordpressuser@localhost IDENTIFIED BY ‘password’;"></a>通过如下命令创建用户（wordpressuser），这里演示使用wordpressuser作为用户，password作为密码，但是在实际操作中用这样的用户和密码是不安全的，你可以更改成自己熟悉的用户名和密码：<font color="Lime"> CREATE USER wordpressuser@localhost IDENTIFIED BY ‘password’;<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/16.PNG" alt="16"></p>
<h3 id="现在我们已经有用户和数据库了，我们需要把这两个联系起来，这个用户就负责wordpress这个数据库：GRANT-ALL-PRIVILEGES-ON-wordpress-TO-wordpressuser-localhost-IDENTIFIED-BY-‘password’"><a href="#现在我们已经有用户和数据库了，我们需要把这两个联系起来，这个用户就负责wordpress这个数据库：GRANT-ALL-PRIVILEGES-ON-wordpress-TO-wordpressuser-localhost-IDENTIFIED-BY-‘password’" class="headerlink" title="现在我们已经有用户和数据库了，我们需要把这两个联系起来，这个用户就负责wordpress这个数据库：GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY ‘password’;"></a>现在我们已经有用户和数据库了，我们需要把这两个联系起来，这个用户就负责wordpress这个数据库：<font color="Lime">GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY ‘password’;<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/17.PNG" alt="17"></p>
<h3 id="下面我们需要刷新一下权限：FLUSH-PRIVILEGES"><a href="#下面我们需要刷新一下权限：FLUSH-PRIVILEGES" class="headerlink" title="下面我们需要刷新一下权限：FLUSH PRIVILEGES;"></a>下面我们需要刷新一下权限：<font color="Lime">FLUSH PRIVILEGES;<font></font></font></h3><h3 id="退出：exit"><a href="#退出：exit" class="headerlink" title="退出：exit"></a>退出：<font color="Lime">exit<font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/18.PNG" alt="18"></p>
<h2 id="最后一步：正式安装WordPress"><a href="#最后一步：正式安装WordPress" class="headerlink" title="最后一步：正式安装WordPress"></a>最后一步：正式安装WordPress</h2><h3 id="终于要安装了，前面说了那么多都是在为这最后一步安装WordPress做准备。"><a href="#终于要安装了，前面说了那么多都是在为这最后一步安装WordPress做准备。" class="headerlink" title="终于要安装了，前面说了那么多都是在为这最后一步安装WordPress做准备。"></a>终于要安装了，前面说了那么多都是在为这最后一步安装WordPress做准备。</h3><h3 id="在我们下载WordPress之前，我们需要安装一个PHP模块，以确保它能正常工作。没有这个模块，WordPress将无法调整图像大小来创建缩略图。"><a href="#在我们下载WordPress之前，我们需要安装一个PHP模块，以确保它能正常工作。没有这个模块，WordPress将无法调整图像大小来创建缩略图。" class="headerlink" title="在我们下载WordPress之前，我们需要安装一个PHP模块，以确保它能正常工作。没有这个模块，WordPress将无法调整图像大小来创建缩略图。"></a>在我们下载WordPress之前，我们需要安装一个PHP模块，以确保它能正常工作。没有这个模块，WordPress将无法调整图像大小来创建缩略图。</h3><h3 id="命令如下：yum-install-php-gd"><a href="#命令如下：yum-install-php-gd" class="headerlink" title="命令如下：yum install php-gd"></a>命令如下：<font color="Lime">yum install php-gd<font></font></font></h3><blockquote>
<p>遇到Is this ok [y/d/N]:  输入y回车即可</p>
</blockquote>
<h3 id="安装完新的模块之后，需要重启一下Apache服务，以便它能够识别新的模块：service-httpd-restart"><a href="#安装完新的模块之后，需要重启一下Apache服务，以便它能够识别新的模块：service-httpd-restart" class="headerlink" title="安装完新的模块之后，需要重启一下Apache服务，以便它能够识别新的模块：service httpd restart"></a>安装完新的模块之后，需要重启一下Apache服务，以便它能够识别新的模块：<font color="Lime">service httpd restart<font></font></font></h3><h3 id="我们现在可以从项目的网站下载并安装WordPress。幸运的是，WordPress团队始终将最新的稳定版本的软件链接到同一个URL，因此我们可以通过键入以下内容获得最新版本的WordPress：cd"><a href="#我们现在可以从项目的网站下载并安装WordPress。幸运的是，WordPress团队始终将最新的稳定版本的软件链接到同一个URL，因此我们可以通过键入以下内容获得最新版本的WordPress：cd" class="headerlink" title="我们现在可以从项目的网站下载并安装WordPress。幸运的是，WordPress团队始终将最新的稳定版本的软件链接到同一个URL，因此我们可以通过键入以下内容获得最新版本的WordPress：cd ~"></a>我们现在可以从项目的网站下载并安装WordPress。幸运的是，WordPress团队始终将最新的稳定版本的软件链接到同一个URL，因此我们可以通过键入以下内容获得最新版本的WordPress：<font color="Lime">cd ~<font></font></font></h3><h3 id="wget-http-wordpress-org-latest-tar-gz"><a href="#wget-http-wordpress-org-latest-tar-gz" class="headerlink" title="wget http://wordpress.org/latest.tar.gz"></a><font color="Lime">wget <a href="http://wordpress.org/latest.tar.gz" target="_blank" rel="external">http://wordpress.org/latest.tar.gz</a><font></font></font></h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/19.PNG" alt="19"></p>
<h3 id="这将下载压缩的归档文件，其中包含我们需要的所有WordPress文件。我们可以提取存档的文件来重建WordPress目录：tar-xzvf-latest-tar-gz"><a href="#这将下载压缩的归档文件，其中包含我们需要的所有WordPress文件。我们可以提取存档的文件来重建WordPress目录：tar-xzvf-latest-tar-gz" class="headerlink" title="这将下载压缩的归档文件，其中包含我们需要的所有WordPress文件。我们可以提取存档的文件来重建WordPress目录：tar xzvf latest.tar.gz"></a>这将下载压缩的归档文件，其中包含我们需要的所有WordPress文件。我们可以提取存档的文件来重建WordPress目录：<font color="Lime">tar xzvf latest.tar.gz<font></font></font></h3><h3 id="现在根目录下有一个wordpress目录。我们可以通过将解压缩的文件复制到Apache的文档根目录来完成安装，并将其提供给我们网站的访问者。我们可以复制我们的WordPress文件，使用rsync命令将保留文件的默认权限：rsync-avP-wordpress-var-www-html"><a href="#现在根目录下有一个wordpress目录。我们可以通过将解压缩的文件复制到Apache的文档根目录来完成安装，并将其提供给我们网站的访问者。我们可以复制我们的WordPress文件，使用rsync命令将保留文件的默认权限：rsync-avP-wordpress-var-www-html" class="headerlink" title="现在根目录下有一个wordpress目录。我们可以通过将解压缩的文件复制到Apache的文档根目录来完成安装，并将其提供给我们网站的访问者。我们可以复制我们的WordPress文件，使用rsync命令将保留文件的默认权限：rsync -avP ~/wordpress/ /var/www/html/"></a>现在根目录下有一个wordpress目录。我们可以通过将解压缩的文件复制到Apache的文档根目录来完成安装，并将其提供给我们网站的访问者。我们可以复制我们的WordPress文件，使用rsync命令将保留文件的默认权限：<font color="Lime">rsync -avP ~/wordpress/ /var/www/html/<font></font></font></h3><h3 id="rysnc将安全地将所有wordpress目录下的内容全都复制到博客的根目录-var-www-html-下。我们还需要为WordPress添加一个文件夹来存储上传的文件。我们可以用mkdir命令来做到这一点：mkdir-var-www-html-wp-content-uploads"><a href="#rysnc将安全地将所有wordpress目录下的内容全都复制到博客的根目录-var-www-html-下。我们还需要为WordPress添加一个文件夹来存储上传的文件。我们可以用mkdir命令来做到这一点：mkdir-var-www-html-wp-content-uploads" class="headerlink" title="rysnc将安全地将所有wordpress目录下的内容全都复制到博客的根目录/var/www/html/下。我们还需要为WordPress添加一个文件夹来存储上传的文件。我们可以用mkdir命令来做到这一点：mkdir /var/www/html/wp-content/uploads"></a>rysnc将安全地将所有wordpress目录下的内容全都复制到博客的根目录/var/www/html/下。我们还需要为WordPress添加一个文件夹来存储上传的文件。我们可以用mkdir命令来做到这一点：<font color="Lime">mkdir /var/www/html/wp-content/uploads<font></font></font></h3><h3 id="现在我们需要为我们的WordPress文件和文件夹分配正确的所有权和权限。这将增加安全性，同时仍然允许WordPress按预期的方式运行。为此，我们将使用chown向Apache的用户和组授予所有权："><a href="#现在我们需要为我们的WordPress文件和文件夹分配正确的所有权和权限。这将增加安全性，同时仍然允许WordPress按预期的方式运行。为此，我们将使用chown向Apache的用户和组授予所有权：" class="headerlink" title="现在我们需要为我们的WordPress文件和文件夹分配正确的所有权和权限。这将增加安全性，同时仍然允许WordPress按预期的方式运行。为此，我们将使用chown向Apache的用户和组授予所有权："></a>现在我们需要为我们的WordPress文件和文件夹分配正确的所有权和权限。这将增加安全性，同时仍然允许WordPress按预期的方式运行。为此，我们将使用chown向Apache的用户和组授予所有权：</h3><h3 id="通过如下命令将-var-www-html-文件下的所以文件的用户：所属组都改为了Apache，这样Apache就可以对该目录下的所有文件具有可读可写可执行的权限了。-chown-R-apache-apache-var-www-html"><a href="#通过如下命令将-var-www-html-文件下的所以文件的用户：所属组都改为了Apache，这样Apache就可以对该目录下的所有文件具有可读可写可执行的权限了。-chown-R-apache-apache-var-www-html" class="headerlink" title="通过如下命令将/var/www/html/文件下的所以文件的用户：所属组都改为了Apache，这样Apache就可以对该目录下的所有文件具有可读可写可执行的权限了。 chown -R apache:apache /var/www/html/* "></a>通过如下命令将/var/www/html/文件下的所以文件的用户：所属组都改为了Apache，这样Apache就可以对该目录下的所有文件具有可读可写可执行的权限了。<font color="Lime"> chown -R apache:apache /var/www/html/* <font></font></font></h3><h3 id="接下来是配置WordPress，告诉WordPress使用哪一个数据库呀等等配置："><a href="#接下来是配置WordPress，告诉WordPress使用哪一个数据库呀等等配置：" class="headerlink" title="接下来是配置WordPress，告诉WordPress使用哪一个数据库呀等等配置："></a>接下来是配置WordPress，告诉WordPress使用哪一个数据库呀等等配置：</h3><h3 id="首先进入安装WordPress的Apache根目录：cd-var-www-html"><a href="#首先进入安装WordPress的Apache根目录：cd-var-www-html" class="headerlink" title="首先进入安装WordPress的Apache根目录：cd /var/www/html"></a>首先进入安装WordPress的Apache根目录：<font color="Lime">cd /var/www/html<font></font></font></h3><blockquote>
<h3 id="调用WordPress所依赖的主配置文件wp-config-php。默认情况下包含与我们所需设置大部分匹配的示例配置文件。所有我们要做的是将其复制到默认配置文件位置，以便WordPress可以识别和使用该文件（如下命令会把wp-config-sample-php复制一份并重命名为wp-config-php）：cp-wp-config-sample-php-wp-config-php"><a href="#调用WordPress所依赖的主配置文件wp-config-php。默认情况下包含与我们所需设置大部分匹配的示例配置文件。所有我们要做的是将其复制到默认配置文件位置，以便WordPress可以识别和使用该文件（如下命令会把wp-config-sample-php复制一份并重命名为wp-config-php）：cp-wp-config-sample-php-wp-config-php" class="headerlink" title="调用WordPress所依赖的主配置文件wp-config.php。默认情况下包含与我们所需设置大部分匹配的示例配置文件。所有我们要做的是将其复制到默认配置文件位置，以便WordPress可以识别和使用该文件（如下命令会把wp-config-sample.php复制一份并重命名为wp-config.php）：cp wp-config-sample.php wp-config.php"></a>调用WordPress所依赖的主配置文件wp-config.php。默认情况下包含与我们所需设置大部分匹配的示例配置文件。所有我们要做的是将其复制到默认配置文件位置，以便WordPress可以识别和使用该文件（如下命令会把wp-config-sample.php复制一份并重命名为wp-config.php）：<font color="Lime">cp wp-config-sample.php wp-config.php<font></font></font></h3><h3 id="现在我们有一个配置文件可以使用，让我们在文本编辑器中打开它-vi使用跟上面提到的一样，按i进入编辑模式，编辑完成按Esc进入命令模式，-wq保存退出即可-：vi-wp-config-php"><a href="#现在我们有一个配置文件可以使用，让我们在文本编辑器中打开它-vi使用跟上面提到的一样，按i进入编辑模式，编辑完成按Esc进入命令模式，-wq保存退出即可-：vi-wp-config-php" class="headerlink" title="现在我们有一个配置文件可以使用，让我们在文本编辑器中打开它(vi使用跟上面提到的一样，按i进入编辑模式，编辑完成按Esc进入命令模式，:wq保存退出即可)：vi wp-config.php"></a>现在我们有一个配置文件可以使用，让我们在文本编辑器中打开它(vi使用跟上面提到的一样，按i进入编辑模式，编辑完成按Esc进入命令模式，:wq保存退出即可)：<font color="Lime">vi wp-config.php<font></font></font></h3></blockquote>
<p><img src="http://ot60tdaq4.bkt.clouddn.com/20.png" alt="20"><br><img src="http://ot60tdaq4.bkt.clouddn.com/21.png" alt="21"></p>
<h3 id="下面的步骤就不需要再使用命令行进行操作了，直接在浏览器进行剩下部分的安装。"><a href="#下面的步骤就不需要再使用命令行进行操作了，直接在浏览器进行剩下部分的安装。" class="headerlink" title="下面的步骤就不需要再使用命令行进行操作了，直接在浏览器进行剩下部分的安装。"></a>下面的步骤就不需要再使用命令行进行操作了，直接在浏览器进行剩下部分的安装。</h3><h3 id="在浏览器输入：http-server-domain-name-or-IP-你的虚拟主机的IP地址"><a href="#在浏览器输入：http-server-domain-name-or-IP-你的虚拟主机的IP地址" class="headerlink" title="在浏览器输入：http://server_domain_name_or_IP(你的虚拟主机的IP地址)"></a>在浏览器输入：<font color="Lime"><a href="http://server_domain_name_or_IP(你的虚拟主机的IP地址" target="_blank" rel="external">http://server_domain_name_or_IP(你的虚拟主机的IP地址</a>)<font></font></font></h3><h3 id="选择语言，继续之后。就来到了我们的WordPress初始配置页面，你将在其中创建一个初始管理员帐户："><a href="#选择语言，继续之后。就来到了我们的WordPress初始配置页面，你将在其中创建一个初始管理员帐户：" class="headerlink" title="选择语言，继续之后。就来到了我们的WordPress初始配置页面，你将在其中创建一个初始管理员帐户："></a>选择语言，继续之后。就来到了我们的WordPress初始配置页面，你将在其中创建一个初始管理员帐户：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/23.PNG" alt="22"></p>
<h3 id="设置好管理员账号之后："><a href="#设置好管理员账号之后：" class="headerlink" title="设置好管理员账号之后："></a>设置好管理员账号之后：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/24.PNG" alt="23"></p>
<h3 id="现在就进入了我们的博客后台，就可以自己安装主题，发表文章等等一系列操作了！"><a href="#现在就进入了我们的博客后台，就可以自己安装主题，发表文章等等一系列操作了！" class="headerlink" title="现在就进入了我们的博客后台，就可以自己安装主题，发表文章等等一系列操作了！"></a>现在就进入了我们的博客后台，就可以自己安装主题，发表文章等等一系列操作了！</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/25.PNG" alt="25"></p>
<h3 id="这时候别人还只能通过IP地址对你的博客进行访问，如果想通过域名进行访问的话，你还需要购买域名，对域名进行DNS解析，把博客的IP地址解析到你购买的域名上就好了。"><a href="#这时候别人还只能通过IP地址对你的博客进行访问，如果想通过域名进行访问的话，你还需要购买域名，对域名进行DNS解析，把博客的IP地址解析到你购买的域名上就好了。" class="headerlink" title="这时候别人还只能通过IP地址对你的博客进行访问，如果想通过域名进行访问的话，你还需要购买域名，对域名进行DNS解析，把博客的IP地址解析到你购买的域名上就好了。"></a>这时候别人还只能通过IP地址对你的博客进行访问，如果想通过域名进行访问的话，你还需要购买域名，对域名进行DNS解析，把博客的IP地址解析到你购买的域名上就好了。</h3><h3 id="这是通过IP地址访问博客显示的页面："><a href="#这是通过IP地址访问博客显示的页面：" class="headerlink" title="这是通过IP地址访问博客显示的页面："></a>这是通过IP地址访问博客显示的页面：</h3><p><img src="http://ot60tdaq4.bkt.clouddn.com/26.PNG" alt="26"></p>
<blockquote>
<h3 id="文章到这里就算结束了，如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"><a href="#文章到这里就算结束了，如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。" class="headerlink" title="文章到这里就算结束了，如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"></a><strong>文章到这里就算结束了，如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</strong></h3></blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Apache </tag>
            
            <tag> LEMP </tag>
            
            <tag> WordPress </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7-搭建shadowsocks科学上网]]></title>
      <url>/2017/07/16/centos7%E6%90%AD%E5%BB%BAshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="在国内访问Google越来越难了，免费的不安全，网速又太慢。花钱购买的话又不能保证安全性，于是索性自己搭一个梯子。我选择的是CentOS7搭建Shadowsocks，使用的是digitalocean创建的vps，详情可以查看我的这篇文章来查看。"><a href="#在国内访问Google越来越难了，免费的不安全，网速又太慢。花钱购买的话又不能保证安全性，于是索性自己搭一个梯子。我选择的是CentOS7搭建Shadowsocks，使用的是digitalocean创建的vps，详情可以查看我的这篇文章来查看。" class="headerlink" title="在国内访问Google越来越难了，免费的不安全，网速又太慢。花钱购买的话又不能保证安全性，于是索性自己搭一个梯子。我选择的是CentOS7搭建Shadowsocks，使用的是digitalocean创建的vps，详情可以查看我的这篇文章来查看。"></a>在国内访问Google越来越难了，免费的不安全，网速又太慢。花钱购买的话又不能保证安全性，于是索性自己搭一个梯子。我选择的是CentOS7搭建Shadowsocks，使用的是digitalocean创建的vps，详情可以查看我的<a href="http://localhost:4000/2017/07/15/digital-ocean%E6%B3%A8%E5%86%8C%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%88%9B%E5%BB%BA/" target="_blank" rel="external">这篇文章</a>来查看。</h3></blockquote>
<h3 id="首先，我们登录我们的远程桌面："><a href="#首先，我们登录我们的远程桌面：" class="headerlink" title="首先，我们登录我们的远程桌面："></a>首先，我们登录我们的远程桌面：</h3><p><img src="http://ot4elod26.bkt.clouddn.com/1.PNG" alt="1"></p>
<h3 id="下面的命令，需要一行一行的执行，每输入一行命令，回车执行，如果没有报错，即为执行成功，出现确认提示的时候，输入-y-后，回车即可。每行命令可以复制后在putty里右键粘贴，回车执行。"><a href="#下面的命令，需要一行一行的执行，每输入一行命令，回车执行，如果没有报错，即为执行成功，出现确认提示的时候，输入-y-后，回车即可。每行命令可以复制后在putty里右键粘贴，回车执行。" class="headerlink" title="下面的命令，需要一行一行的执行，每输入一行命令，回车执行，如果没有报错，即为执行成功，出现确认提示的时候，输入 y 后，回车即可。每行命令可以复制后在putty里右键粘贴，回车执行。"></a>下面的命令，需要一行一行的执行，每输入一行命令，回车执行，如果没有报错，即为执行成功，出现确认提示的时候，输入 y 后，回车即可。每行命令可以复制后在putty里右键粘贴，回车执行。</h3><blockquote>
<p>yum install epel-release<br> yum update<br> yum install python-setuptools m2crypto supervisor<br> easy_install pip<br> pip install shadowsocks</p>
</blockquote>
<h3 id="输入完上面的命令之后，继续执行命令：vi-etc-shadowsocks-json"><a href="#输入完上面的命令之后，继续执行命令：vi-etc-shadowsocks-json" class="headerlink" title="输入完上面的命令之后，继续执行命令：vi /etc/shadowsocks.json"></a>输入完上面的命令之后，继续执行命令：<font color="Violet">vi /etc/shadowsocks.json</font></h3><h3 id="此时按-i-键进入编辑模式，putty黑框的左下角会出现-–-INSERT-–-字样，然后一次性复制下面的内容（复制之前记得修改8388和yourpassword为你自己的端口号和密码，此端口号不是你的SSH端口号，而是你在手机或电脑上的shadowsocks客户端连接VPS上搭建的服务端的端口号，范围-1-65535-，只要不和现有的端口号如SSH端口冲突都可以，记下你修改的端口号和密码，待会儿在配置手机和电脑的客户端时还要用到），在putty里右键，此时复制的内容应该已经粘贴到了putty里"><a href="#此时按-i-键进入编辑模式，putty黑框的左下角会出现-–-INSERT-–-字样，然后一次性复制下面的内容（复制之前记得修改8388和yourpassword为你自己的端口号和密码，此端口号不是你的SSH端口号，而是你在手机或电脑上的shadowsocks客户端连接VPS上搭建的服务端的端口号，范围-1-65535-，只要不和现有的端口号如SSH端口冲突都可以，记下你修改的端口号和密码，待会儿在配置手机和电脑的客户端时还要用到），在putty里右键，此时复制的内容应该已经粘贴到了putty里" class="headerlink" title="此时按 i 键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，然后一次性复制下面的内容（复制之前记得修改8388和yourpassword为你自己的端口号和密码，此端口号不是你的SSH端口号，而是你在手机或电脑上的shadowsocks客户端连接VPS上搭建的服务端的端口号，范围 1 - 65535 ，只要不和现有的端口号如SSH端口冲突都可以，记下你修改的端口号和密码，待会儿在配置手机和电脑的客户端时还要用到），在putty里右键，此时复制的内容应该已经粘贴到了putty里"></a>此时按 i 键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，然后一次性复制下面的内容（复制之前记得修改8388和yourpassword为你自己的端口号和密码，此端口号不是你的SSH端口号，而是你在手机或电脑上的shadowsocks客户端连接VPS上搭建的服务端的端口号，范围 1 - 65535 ，只要不和现有的端口号如SSH端口冲突都可以，记下你修改的端口号和密码，待会儿在配置手机和电脑的客户端时还要用到），在putty里右键，此时复制的内容应该已经粘贴到了putty里</h3><p>—–以下为复制内容——-</p>
<p><font color="Lime">{<br>    “server”:”0.0.0.0”,<br>    “server_port”:8388,<br>    “local_port”:1080,<br>    “password”:”yourpassword”,<br>    “timeout”:600,<br>    “method”:”aes-256-cfb”<br>}</font><br>——以上为复制内容——–</p>
<p><img src="http://ot4elod26.bkt.clouddn.com/2.PNG" alt="2"></p>
<h3 id="复制完成后，按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。（“-”的输入方法为“Shift-字母L右侧的分号键”）"><a href="#复制完成后，按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。（“-”的输入方法为“Shift-字母L右侧的分号键”）" class="headerlink" title="复制完成后，按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。（“ : ”的输入方法为“Shift+字母L右侧的分号键”）"></a>复制完成后，按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。（“ : ”的输入方法为“Shift+字母L右侧的分号键”）</h3><p>###继续执行命令：<font color="Violet">vi /etc/supervisord.conf</font></p>
<h3 id="此时你应该能看到很多英文内容，按-i-键再次进入编辑模式，putty黑框的左下角会出现-—-INSERT-—-字样，用方向键将光标调整至文件尾部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里"><a href="#此时你应该能看到很多英文内容，按-i-键再次进入编辑模式，putty黑框的左下角会出现-—-INSERT-—-字样，用方向键将光标调整至文件尾部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里" class="headerlink" title="此时你应该能看到很多英文内容，按 i 键再次进入编辑模式，putty黑框的左下角会出现 — INSERT — 字样，用方向键将光标调整至文件尾部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里"></a>此时你应该能看到很多英文内容，按 i 键再次进入编辑模式，putty黑框的左下角会出现 — INSERT — 字样，用方向键将光标调整至文件尾部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里</h3><p>—–以下为粘贴内容—–</p>
<p><font size="4" color="Lime">[program:shadowsocks]<br>command=ssserver -c /etc/shadowsocks.json<br>autostart=true<br>autorestart=true<br>user=root<br>log_stderr=true<br>logfile=/var/log/shadowsocks.log</font><br>—–以上为粘贴内容—–<br><img src="http://ot4elod26.bkt.clouddn.com/3.PNG" alt="3"></p>
<h3 id="复制完成后，按下回车键给文件尾部留出空行，然后按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。"><a href="#复制完成后，按下回车键给文件尾部留出空行，然后按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。" class="headerlink" title="复制完成后，按下回车键给文件尾部留出空行，然后按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。"></a>复制完成后，按下回车键给文件尾部留出空行，然后按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。</h3><h3 id="继续执行命令：-vi-etc-rc-local"><a href="#继续执行命令：-vi-etc-rc-local" class="headerlink" title="继续执行命令： vi /etc/rc.local"></a>继续执行命令： <font color="Lime">vi /etc/rc.local</font></h3><h3 id="此时你应该能看到几行英文内容，按-i-键再次进入编辑模式，putty黑框的左下角会出现-—-INSERT-—-字样，用方向键将光标调整至文件中部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里"><a href="#此时你应该能看到几行英文内容，按-i-键再次进入编辑模式，putty黑框的左下角会出现-—-INSERT-—-字样，用方向键将光标调整至文件中部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里" class="headerlink" title="此时你应该能看到几行英文内容，按 i 键再次进入编辑模式，putty黑框的左下角会出现 — INSERT — 字样，用方向键将光标调整至文件中部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里"></a>此时你应该能看到几行英文内容，按 i 键再次进入编辑模式，putty黑框的左下角会出现 — INSERT — 字样，用方向键将光标调整至文件中部的空行处，然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里</h3><p>——以下为复制内容—–</p>
<p><font size="4" color="Lime">service supervisord start</font><br>——以上为复制内容—–<br><img src="http://ot4elod26.bkt.clouddn.com/4.PNG" alt="4"></p>
<h3 id="复制完成后，按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。"><a href="#复制完成后，按-Esc-键退出编辑模式，此时putty黑框左下角的-—-INSERT-—-字样消失，按下-键，输入-wq-后回车，此时文件保存完毕并退出了vi编辑器。" class="headerlink" title="复制完成后，按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。"></a>复制完成后，按 Esc 键退出编辑模式，此时putty黑框左下角的 — INSERT — 字样消失，按下 : 键，输入 wq 后回车，此时文件保存完毕并退出了vi编辑器。</h3><h3 id="最后执行命令：reboot"><a href="#最后执行命令：reboot" class="headerlink" title="最后执行命令：reboot"></a>最后执行命令：<font color="Lime">reboot</font></h3><h3 id="此时，你的VPS重新启动，服务端已经完全配置完毕，putty会弹出一个连接已断开的提示框，关闭即可-不是报错-。"><a href="#此时，你的VPS重新启动，服务端已经完全配置完毕，putty会弹出一个连接已断开的提示框，关闭即可-不是报错-。" class="headerlink" title="此时，你的VPS重新启动，服务端已经完全配置完毕，putty会弹出一个连接已断开的提示框，关闭即可(不是报错)。"></a>此时，你的VPS重新启动，服务端已经完全配置完毕，putty会弹出一个连接已断开的提示框，关闭即可(不是报错)。</h3><p><img src="http://ot4elod26.bkt.clouddn.com/5.PNG" alt="5"></p>
<blockquote>
<h2 id="Shadowsocks客户端配置"><a href="#Shadowsocks客户端配置" class="headerlink" title="Shadowsocks客户端配置"></a>Shadowsocks客户端配置</h2></blockquote>
<h3 id="至此，shadowsocks的服务端已经部署完成。剩下的就是下载客户端安装到你的手机和电脑上，记得修改客户端的相关设置保持和你的服务端参数一致哦。"><a href="#至此，shadowsocks的服务端已经部署完成。剩下的就是下载客户端安装到你的手机和电脑上，记得修改客户端的相关设置保持和你的服务端参数一致哦。" class="headerlink" title="至此，shadowsocks的服务端已经部署完成。剩下的就是下载客户端安装到你的手机和电脑上，记得修改客户端的相关设置保持和你的服务端参数一致哦。"></a>至此，shadowsocks的服务端已经部署完成。剩下的就是下载客户端安装到你的手机和电脑上，记得修改客户端的相关设置保持和你的服务端参数一致哦。</h3><h3 id="Android客户端下载链接"><a href="#Android客户端下载链接" class="headerlink" title="Android客户端下载链接"></a>Android客户端下载链接</h3><p><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.github.shadowsocks</a></p>
<h3 id="推荐在Google-Play下载，自动适配你的系统版本，以免出现问题。"><a href="#推荐在Google-Play下载，自动适配你的系统版本，以免出现问题。" class="headerlink" title="推荐在Google Play下载，自动适配你的系统版本，以免出现问题。"></a>推荐在Google Play下载，自动适配你的系统版本，以免出现问题。</h3><p><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-android/releases</a></p>
<h3 id="电脑客户端端下载链接（Windows、Mac-OS-X）"><a href="#电脑客户端端下载链接（Windows、Mac-OS-X）" class="headerlink" title="电脑客户端端下载链接（Windows、Mac OS X）"></a>电脑客户端端下载链接（Windows、Mac OS X）</h3><p><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a><br><strong>小提醒</strong>：Windows 7用户下载Shadowsocks-win-x.x.x.zip，Windows 8用户下载Shadowsocks-win-dotnet4.0-x.x.x.zip。</p>
<h3 id="iOS客户端端下载链接"><a href="#iOS客户端端下载链接" class="headerlink" title="iOS客户端端下载链接"></a>iOS客户端端下载链接</h3><p><a href="https://itunes.apple.com/cn/app/shadowsocks/id665729974?mt=8" target="_blank" rel="external">https://itunes.apple.com/cn/app/shadowsocks/id665729974?mt=8</a></p>
<h3 id="Android手机客户端配置示例（以上述服务端配置为例）："><a href="#Android手机客户端配置示例（以上述服务端配置为例）：" class="headerlink" title="Android手机客户端配置示例（以上述服务端配置为例）："></a>Android手机客户端配置示例（以上述服务端配置为例）：</h3><blockquote>
<p>注意：已经root手机的小伙伴请勿授予root权限，以免发生未知问题。<br>服务器：你的VPS IP地址（非0.0.0.0）<br>远程端口：8388<br>本地端口：1080<br>密码：yourpassword<br>加密方法：AES-256-CFB<br>路由：绕过局域网及中国大陆地址<br>全局代理：勾选<br>UDP转发：建议勾选，如有问题则取消勾选<br>自动连接：勾选</p>
</blockquote>
<h2 id="电脑客户端配置示例（以上述服务端配置为例）："><a href="#电脑客户端配置示例（以上述服务端配置为例）：" class="headerlink" title="电脑客户端配置示例（以上述服务端配置为例）："></a>电脑客户端配置示例（以上述服务端配置为例）：</h2><h3 id="（示例客户端版本：Shadowsocks-win-2-1-6-zip-144-9-kB-，系统Windows-7，如遇无法启动的情况，请右键以管理员身份运行）"><a href="#（示例客户端版本：Shadowsocks-win-2-1-6-zip-144-9-kB-，系统Windows-7，如遇无法启动的情况，请右键以管理员身份运行）" class="headerlink" title="（示例客户端版本：Shadowsocks-win-2.1.6.zip (144.9 kB)，系统Windows 7，如遇无法启动的情况，请右键以管理员身份运行）"></a>（示例客户端版本：Shadowsocks-win-2.1.6.zip (144.9 kB)，系统Windows 7，如遇无法启动的情况，请右键以管理员身份运行）</h3><blockquote>
<p>服务器 IP：你的VPS IP地址（非0.0.0.0）<br>服务器端口：8388<br>密码：yourpassword<br>加密：aes-256-cfb<br>代理端口：1080<br>备注：随便写</p>
</blockquote>
<h2 id="这里是电脑版的shadowsocks软件，安装好刚打开的样子。"><a href="#这里是电脑版的shadowsocks软件，安装好刚打开的样子。" class="headerlink" title="这里是电脑版的shadowsocks软件，安装好刚打开的样子。"></a>这里是电脑版的shadowsocks软件，安装好刚打开的样子。</h2><p>###填上你的vps的IP地址配置你的ss：<br><img src="http://ot4elod26.bkt.clouddn.com/7.png" alt="7"><br><img src="http://ot4elod26.bkt.clouddn.com/8.PNG8" alt="8"></p>
<h3 id="配置完成之后，鼠标放在ss客户端上点击鼠标右键，启动系统代理："><a href="#配置完成之后，鼠标放在ss客户端上点击鼠标右键，启动系统代理：" class="headerlink" title="配置完成之后，鼠标放在ss客户端上点击鼠标右键，启动系统代理："></a>配置完成之后，鼠标放在ss客户端上点击鼠标右键，启动系统代理：</h3><p><img src="http://ot4elod26.bkt.clouddn.com/12.png" alt="12"></p>
<h3 id="如果使用Google浏览器的话，还需要额外安装一个插件，名字叫SwitchySharp，在Chrome网上应用店进行下载安装，安装如下，选择第一个安装："><a href="#如果使用Google浏览器的话，还需要额外安装一个插件，名字叫SwitchySharp，在Chrome网上应用店进行下载安装，安装如下，选择第一个安装：" class="headerlink" title="如果使用Google浏览器的话，还需要额外安装一个插件，名字叫SwitchySharp，在Chrome网上应用店进行下载安装，安装如下，选择第一个安装："></a>如果使用Google浏览器的话，还需要额外安装一个插件，名字叫SwitchySharp，在Chrome网上应用店进行下载安装，安装如下，选择第一个安装：</h3><p><img src="http://ot4elod26.bkt.clouddn.com/9.PNG" alt="9"></p>
<h3 id="然后在Google浏览器右上角可以看到一个地球的图标，即使我们安装的插件点击它，再选择选项："><a href="#然后在Google浏览器右上角可以看到一个地球的图标，即使我们安装的插件点击它，再选择选项：" class="headerlink" title="然后在Google浏览器右上角可以看到一个地球的图标，即使我们安装的插件点击它，再选择选项："></a>然后在Google浏览器右上角可以看到一个地球的图标，即使我们安装的插件点击它，再选择选项：</h3><p><img src="http://ot4elod26.bkt.clouddn.com/10.png" alt="10"></p>
<h3 id="进行设置，只需要设置Socks代理：127-0-0-1，端口：1080-选择SOCKS-v5-情景模式名称随意设置。保存即可。"><a href="#进行设置，只需要设置Socks代理：127-0-0-1，端口：1080-选择SOCKS-v5-情景模式名称随意设置。保存即可。" class="headerlink" title="进行设置，只需要设置Socks代理：127.0.0.1，端口：1080 选择SOCKS v5 情景模式名称随意设置。保存即可。"></a>进行设置，只需要设置Socks代理：127.0.0.1，端口：1080 选择SOCKS v5 情景模式名称随意设置。保存即可。</h3><p><img src="http://ot4elod26.bkt.clouddn.com/11.png" alt="11"></p>
<h3 id="现在我们测试一下，Yutubee，Google，YaHoo都可以正常访问了，说明我们的梯子搭建成功了："><a href="#现在我们测试一下，Yutubee，Google，YaHoo都可以正常访问了，说明我们的梯子搭建成功了：" class="headerlink" title="现在我们测试一下，Yutubee，Google，YaHoo都可以正常访问了，说明我们的梯子搭建成功了："></a>现在我们测试一下，Yutubee，Google，YaHoo都可以正常访问了，说明我们的梯子搭建成功了：</h3><p><img src="http://ot4elod26.bkt.clouddn.com/13.PNG" alt="13"><br><img src="http://ot4elod26.bkt.clouddn.com/14.PNG" alt="14"><br><img src="http://ot4elod26.bkt.clouddn.com/15.PNG" alt="15"></p>
<blockquote>
<h2 id="答疑阶段"><a href="#答疑阶段" class="headerlink" title="答疑阶段"></a>答疑阶段</h2></blockquote>
<h3 id="1-为什么选择CentOS？"><a href="#1-为什么选择CentOS？" class="headerlink" title="1. 为什么选择CentOS？"></a>1. <strong>为什么选择CentOS？</strong></h3><blockquote>
<p><strong>作为服务器，永远都是稳定压倒一切。而CentOS简单易用，上手快速，业界公认的稳定，且易于维护，是服务器操作<br>系统首选。</strong></p>
</blockquote>
<h3 id="2-为什么是Python版本的Shadowsocks？"><a href="#2-为什么是Python版本的Shadowsocks？" class="headerlink" title="2. 为什么是Python版本的Shadowsocks？"></a>2. <strong>为什么是Python版本的Shadowsocks？</strong></h3><blockquote>
<p><strong>Python版的Shadowsocks易部署，后期升级维护都非常方便，相当适合新手，支持的特性也最多，稳定性好，运行效率高。</strong></p>
</blockquote>
<h3 id="3-为什么使用supervisord"><a href="#3-为什么使用supervisord" class="headerlink" title="3.为什么使用supervisord?"></a>3.<strong>为什么使用supervisord?</strong></h3><blockquote>
<p><strong>与繁琐的带参执行方式相比，service命令在CentOS系统里使用起来更加灵活方便，比如：<br>①启动Shadowsocks服务端：service supervisord start<br>②关闭Shadowsocks服务端：service supervisord stop<br>③重启shadowsocks服务端：service supervisord restart</strong></p>
</blockquote>
<h3 id="4-如何配置多账户？"><a href="#4-如何配置多账户？" class="headerlink" title="4. 如何配置多账户？"></a>4. <strong>如何配置多账户？</strong></h3><blockquote>
<p><strong>小提示：Shadowsocks支持一个账户在多个终端同时使用，一般人没有配置多账户的必要。所以如果你看不懂，那你还是别折腾了。</strong><br>——分割线——-<br><strong>{<br>    “server”:”0.0.0.0”,<br>    “port_password”:{<br>        “8388”:”password1”,<br>        “8389”:”password2”,<br>        “8390”:”password3”,<br>        “8391”:”password4”<br>    },<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”<br>} </strong><br>——-分割线———<br><strong>友情提醒：GFW目前是根据流量检测分析匹配统计学模型的方式来判断你是否在翻墙，换言之，你用什么方式翻墙并不重要，重要的是你和服务器之间的流量特征是否像是在翻墙。一旦匹配，既对你进行有罪推论，轻则限速，重则彻底封锁IP。在IPv4地址已经枯竭的今天，可用的美国IP地址会越来越少，所以不建议将自己的账号分享多人使用，以防被封</strong></p>
</blockquote>
<h3 id="5-为什么我的shadowsocks在刚搭建好的时候速度很快用了几天后速度就变慢了甚至网页都很难刷出来？"><a href="#5-为什么我的shadowsocks在刚搭建好的时候速度很快用了几天后速度就变慢了甚至网页都很难刷出来？" class="headerlink" title="5.为什么我的shadowsocks在刚搭建好的时候速度很快用了几天后速度就变慢了甚至网页都很难刷出来？"></a>5.<strong>为什么我的shadowsocks在刚搭建好的时候速度很快用了几天后速度就变慢了甚至网页都很难刷出来？</strong></h3><blockquote>
<h3 id="出现这种情况有多种可能性："><a href="#出现这种情况有多种可能性：" class="headerlink" title="出现这种情况有多种可能性："></a>出现这种情况有多种可能性：</h3></blockquote>
<p>①shadowsocks长时间保持不间断连接会被GFW根据流量模型分析判断出你可能在翻墙(原理见上面的友情提醒)，于是进行主动干扰，轻则限速，重则切断你和服务端的连接。解决方法：切换一下你的网络，比如从Wi-Fi切换到3G或者从3G切换到Wi-Fi或者直接断开网络连接，等待10分钟以后，一般即可恢复正常。PS：每天晚上睡觉前关闭手机的网络连接会大大减小此种情况发生的概率；而将自己的VPS分享给多人使用则可能大大增加此种情况发生的概率，请自行斟酌。值得说明的是，VPN最容易受到此类干扰，而shadowsocks作为可自定义端口的私有协议代理已经是最不容易被干扰的翻墙方式之一了。</p>
<p>②机房的QoS策略。解决方法：将shadowsocks服务端的server_port改为常见端口。</p>
<p>③本地线路抽风，你所使用宽带运营商的国际出口出现问题。比如最近南方电信部分地区国际出口严重不稳定(电信人为限制)。解决方法：<1>先尝试一下DigitalOcean的新加坡节点或者Linode的日本节点；<2>如果当地有“国际精品网”业务，开通后可立即完美解决这个问题；<3>如果不愿意给电信交保护费，那么就换家运营商吧，移动和联通都没问题。</3></2></1></p>
<p>④VPS间歇性抽风。无论你选择哪家供应商的VPS，都可能遇到有时候线路抽风、VPS速度慢或者不正常。不同的是，越是价位高的VPS出现抽风情况的可能性越低，越是价位高的VPS出现抽风情况时能保证的最低连接速度越高。出现这种情况的可能性比较低，我手头的无论是搬瓦工还是DigitalOcean以及Linode暂时未遇到线路抽风情况。</p>
<p>⑤搬瓦工的年付VPS为OpenVZ架构，同一母机下的VPS越多，同一时间段使用的人越多，速度就越慢。解决方法：一分价钱一分货，将VPS更换为DigitalOcean或者Linode。</p>
<p>⑥中国的国际出口带宽有限，晚高峰时段可能出现网络拥堵，速度多少会受影响，但这种情况起码白天的速度应该是没问题的。</p>
<p>⑦如果你在VPS上搭建了VPN并且经常使用，尤其是OpenVPN，请立即停止使用。VPN协议特征明显，GFW可以非常容易的检测到，从而盯上你的IP，轻则限速，重则彻底屏蔽。常见VPN协议根据易受干扰的程度从大到小依次为：OpenVPN &gt; PPTP &gt; L2TP &gt; IPSec，尤其是OpenVPN，GFW已经可以实现对其定点清除(同样遭此待遇的还有SSH翻墙)。如果你想让自己VPS的IP快速报废，那么就请尽情的使用搬瓦工的控制面板搭建OpenVPN吧。重要提醒：在不明所以的情况下尽量不要在自己的VPS上搭建其他杂七乱八的翻墙服务尤其是一些早已过时和落后的翻墙方式，翻墙手段宜新不宜旧，只搭一个Shadowsocks是最能保证你翻墙效果和服务器稳定的好策略。</p>
<p>⑧其他：偶尔的速度慢或者连不上都是正常的，但如果经常性的速度奇慢或者连不上那就不正常了。</p>
<blockquote>
<h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2></blockquote>
<h3 id="已经成功的小伙伴可以直接略过这部分了。"><a href="#已经成功的小伙伴可以直接略过这部分了。" class="headerlink" title="已经成功的小伙伴可以直接略过这部分了。"></a>已经成功的小伙伴可以直接略过这部分了。</h3><blockquote>
<h3 id="温馨提醒：在怀疑教程的任何一个地方之前，请先怀疑你自己。"><a href="#温馨提醒：在怀疑教程的任何一个地方之前，请先怀疑你自己。" class="headerlink" title="温馨提醒：在怀疑教程的任何一个地方之前，请先怀疑你自己。"></a>温馨提醒：在怀疑教程的任何一个地方之前，请先怀疑你自己。</h3></blockquote>
<h3 id="服务端搭建成功的唯一衡量标准是在手机或者电脑客户端正确配置后能否顺利的访问被屏蔽的网站，无论是电脑还是手机，只要有一个终端能够成功翻墙即视为服务端搭建成功，出现所谓的可以连接但无法上网其实还是服务端或者客户端的配置有问题，认真按照下面的步骤一步步排错吧。"><a href="#服务端搭建成功的唯一衡量标准是在手机或者电脑客户端正确配置后能否顺利的访问被屏蔽的网站，无论是电脑还是手机，只要有一个终端能够成功翻墙即视为服务端搭建成功，出现所谓的可以连接但无法上网其实还是服务端或者客户端的配置有问题，认真按照下面的步骤一步步排错吧。" class="headerlink" title="服务端搭建成功的唯一衡量标准是在手机或者电脑客户端正确配置后能否顺利的访问被屏蔽的网站，无论是电脑还是手机，只要有一个终端能够成功翻墙即视为服务端搭建成功，出现所谓的可以连接但无法上网其实还是服务端或者客户端的配置有问题，认真按照下面的步骤一步步排错吧。"></a>服务端搭建成功的唯一衡量标准是在手机或者电脑客户端正确配置后能否顺利的访问被屏蔽的网站，无论是电脑还是手机，只要有一个终端能够成功翻墙即视为服务端搭建成功，出现所谓的可以连接但无法上网其实还是服务端或者客户端的配置有问题，认真按照下面的步骤一步步排错吧。</h3><h3 id="遇到问题的小伙伴请先认真仔细阅读这两篇文章"><a href="#遇到问题的小伙伴请先认真仔细阅读这两篇文章" class="headerlink" title="遇到问题的小伙伴请先认真仔细阅读这两篇文章"></a>遇到问题的小伙伴请先认真仔细阅读这两篇文章</h3><p><a href="http://linux.chinaunix.net/doc/office/2005-01-24/898.shtml" target="_blank" rel="external">http://linux.chinaunix.net/doc/office/2005-01-24/898.shtml</a><br><a href="http://linux.vbird.org/linux_basic/0310vi.php" target="_blank" rel="external">http://linux.vbird.org/linux_basic/0310vi.php</a><br>上面的链接为vi编辑器基本用法扫盲（新手必读）</p>
<h3 id="最容易出现问题的地方，就是vi编辑器的使用，如果你在执行vi命令后没有按-i-键进入编辑模式就直接复制粘贴，会造成粘贴内容的首行被覆盖，从而导致错误；或者你在粘贴内容后，没有以正确的方式保存退出，同样会出现问题。"><a href="#最容易出现问题的地方，就是vi编辑器的使用，如果你在执行vi命令后没有按-i-键进入编辑模式就直接复制粘贴，会造成粘贴内容的首行被覆盖，从而导致错误；或者你在粘贴内容后，没有以正确的方式保存退出，同样会出现问题。" class="headerlink" title="最容易出现问题的地方，就是vi编辑器的使用，如果你在执行vi命令后没有按 i 键进入编辑模式就直接复制粘贴，会造成粘贴内容的首行被覆盖，从而导致错误；或者你在粘贴内容后，没有以正确的方式保存退出，同样会出现问题。"></a>最容易出现问题的地方，就是vi编辑器的使用，如果你在执行vi命令后没有按 i 键进入编辑模式就直接复制粘贴，会造成粘贴内容的首行被覆盖，从而导致错误；或者你在粘贴内容后，没有以正确的方式保存退出，同样会出现问题。</h3><h3 id="如果你在执行完reboot命令后，手机端无法连接，请先确保你的手机端配置正确，并且网络环境良好-参照上面的Android手机客户端配置示例-。然后用putty登入你的VPS后通过以下方式逐步排查："><a href="#如果你在执行完reboot命令后，手机端无法连接，请先确保你的手机端配置正确，并且网络环境良好-参照上面的Android手机客户端配置示例-。然后用putty登入你的VPS后通过以下方式逐步排查：" class="headerlink" title="如果你在执行完reboot命令后，手机端无法连接，请先确保你的手机端配置正确，并且网络环境良好(参照上面的Android手机客户端配置示例)。然后用putty登入你的VPS后通过以下方式逐步排查："></a>如果你在执行完reboot命令后，手机端无法连接，请先确保你的手机端配置正确，并且网络环境良好(参照上面的Android手机客户端配置示例)。然后用putty登入你的VPS后通过以下方式逐步排查：</h3><h3 id="1-执行命令service-supervisord-start，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi-etc-rc-local这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。"><a href="#1-执行命令service-supervisord-start，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi-etc-rc-local这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。" class="headerlink" title="1. 执行命令service supervisord start，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi /etc/rc.local这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。"></a><strong>1. 执行命令<font color="Lime">service supervisord start</font>，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi /etc/rc.local这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。</strong></h3><h3 id="2-执行命令ssserver-c-etc-shadowsocks-json，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi-etc-supervisord-conf这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。"><a href="#2-执行命令ssserver-c-etc-shadowsocks-json，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi-etc-supervisord-conf这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。" class="headerlink" title="2. 执行命令ssserver -c /etc/shadowsocks.json，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi /etc/supervisord.conf这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。"></a><strong>2. 执行命令<font color="Lime">ssserver -c /etc/shadowsocks.json</font>，执行完毕后如果没有报错，手机端也可以正常连接，那么问题出在vi /etc/supervisord.conf这个环节，请重新检查该文件配置；如果手机端依然无法连接，请继续往下看。</strong></h3><h3 id="3-如果依次进行完以上两步后，手机端依然无法连接，那么问题出在vi-etc-shadowsocks-json环节，请重新检查该文件配置。"><a href="#3-如果依次进行完以上两步后，手机端依然无法连接，那么问题出在vi-etc-shadowsocks-json环节，请重新检查该文件配置。" class="headerlink" title=" 3. 如果依次进行完以上两步后，手机端依然无法连接，那么问题出在vi /etc/shadowsocks.json环节，请重新检查该文件配置。"></a><strong> 3. 如果依次进行完以上两步后，手机端依然无法连接，那么问题出在<font color="Lime">vi /etc/shadowsocks.json</font>环节，请重新检查该文件配置。</strong></h3><h3 id="4-如果以上三个文件的配置问题都解决后，执行reboot命令后，手机端依然无法连接，那么说明你在教程最开始的5行命令没有正确执行，在搬瓦工和DigitalOcean以及Linode官网的控制面板里重装VPS系统后，按照教程认认真真仔仔细细的重新来过吧。"><a href="#4-如果以上三个文件的配置问题都解决后，执行reboot命令后，手机端依然无法连接，那么说明你在教程最开始的5行命令没有正确执行，在搬瓦工和DigitalOcean以及Linode官网的控制面板里重装VPS系统后，按照教程认认真真仔仔细细的重新来过吧。" class="headerlink" title="4.如果以上三个文件的配置问题都解决后，执行reboot命令后，手机端依然无法连接，那么说明你在教程最开始的5行命令没有正确执行，在搬瓦工和DigitalOcean以及Linode官网的控制面板里重装VPS系统后，按照教程认认真真仔仔细细的重新来过吧。"></a><strong>4.如果以上三个文件的配置问题都解决后，执行reboot命令后，手机端依然无法连接，那么说明你在教程最开始的5行命令没有正确执行，在搬瓦工和DigitalOcean以及Linode官网的控制面板里重装VPS系统后，按照教程认认真真仔仔细细的重新来过吧。</strong></h3><blockquote>
<h3 id="有问题可以留言，大家一起研究。"><a href="#有问题可以留言，大家一起研究。" class="headerlink" title="有问题可以留言，大家一起研究。"></a>有问题可以留言，大家一起研究。</h3><h2 id="如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"><a href="#如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。" class="headerlink" title="如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。"></a>如果你感觉文章对你有所帮助，文章下方有打赏按钮，您随意打赏。支持作者继续创作。</h2></blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ss </tag>
            
            <tag> 梯子 </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[digitalocean注册和虚拟主机的创建]]></title>
      <url>/2017/07/15/digitalocean%E6%B3%A8%E5%86%8C%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>首先，我们在digitalocean上注册一个账号，使用我推荐的<br><a href="https://m.do.co/c/073107976072" target="_blank" rel="external">注册链接</a>，可以获得10美元的额外奖励。<br><img src="http://ot44u2158.bkt.clouddn.com/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2.png" alt="注册页面"></p>
</blockquote>
<h3 id="输入用户名（填写自己的邮箱）和密码。点击Create-An-Account，然后会往你填写的邮箱内发送一封邮件如下，点击链接继续注册就可以了："><a href="#输入用户名（填写自己的邮箱）和密码。点击Create-An-Account，然后会往你填写的邮箱内发送一封邮件如下，点击链接继续注册就可以了：" class="headerlink" title="输入用户名（填写自己的邮箱）和密码。点击Create An Account，然后会往你填写的邮箱内发送一封邮件如下，点击链接继续注册就可以了："></a>输入用户名（填写自己的邮箱）和密码。点击Create An Account，然后会往你填写的邮箱内发送一封邮件如下，点击链接继续注册就可以了：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/%E9%82%AE%E7%AE%B1.png" alt="邮件注册"></p>
<h3 id="紧接着出现的画面是一个认证的界面，有两种认证的方法，方法一如下，添加一张自己的信用卡即可激活账户："><a href="#紧接着出现的画面是一个认证的界面，有两种认证的方法，方法一如下，添加一张自己的信用卡即可激活账户：" class="headerlink" title="紧接着出现的画面是一个认证的界面，有两种认证的方法，方法一如下，添加一张自己的信用卡即可激活账户："></a>紧接着出现的画面是一个认证的界面，有两种认证的方法，方法一如下，添加一张自己的信用卡即可激活账户：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/IDcard.png" alt="IDcard"></p>
<h3 id="我相信肯定有一部分小伙伴都跟我一样还处于改革开放初期，暂时还没有信用卡，不过没关系，digitalocean给我们提供了第二种激活的方法，就是通过PayPal充值5美元进行激活，当然充值的5美元还是在你的账户里面，没有PayPal的朋友可以自己去注册一个（注册买家）。"><a href="#我相信肯定有一部分小伙伴都跟我一样还处于改革开放初期，暂时还没有信用卡，不过没关系，digitalocean给我们提供了第二种激活的方法，就是通过PayPal充值5美元进行激活，当然充值的5美元还是在你的账户里面，没有PayPal的朋友可以自己去注册一个（注册买家）。" class="headerlink" title="我相信肯定有一部分小伙伴都跟我一样还处于改革开放初期，暂时还没有信用卡，不过没关系，digitalocean给我们提供了第二种激活的方法，就是通过PayPal充值5美元进行激活，当然充值的5美元还是在你的账户里面，没有PayPal的朋友可以自己去注册一个（注册买家）。"></a>我相信肯定有一部分小伙伴都跟我一样还处于改革开放初期，暂时还没有信用卡，不过没关系，digitalocean给我们提供了第二种激活的方法，就是通过PayPal充值5美元进行激活，当然充值的5美元还是在你的账户里面，没有PayPal的朋友可以自己去注册一个（注册买家）。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/PayPal.png" alt="PayPal"></p>
<h3 id="PayPal注册如下："><a href="#PayPal注册如下：" class="headerlink" title="PayPal注册如下："></a>PayPal注册如下：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/PayPal%E6%B3%A8%E5%86%8C.png" alt="PayPal注册"><br><img src="http://ot44u2158.bkt.clouddn.com/PayPal%E6%B3%A8%E5%86%8C%E8%AF%A6%E6%83%85.png" alt="注册详情"></p>
<h3 id="注册完成后就可以登录进入PayPal了，下一步就是绑定银行卡，这一步很简单，相信有过网购经历的朋友都可以轻松完成。这时候再返回到digitalocean上的激活页面，使用PayPal进行付款激活："><a href="#注册完成后就可以登录进入PayPal了，下一步就是绑定银行卡，这一步很简单，相信有过网购经历的朋友都可以轻松完成。这时候再返回到digitalocean上的激活页面，使用PayPal进行付款激活：" class="headerlink" title="注册完成后就可以登录进入PayPal了，下一步就是绑定银行卡，这一步很简单，相信有过网购经历的朋友都可以轻松完成。这时候再返回到digitalocean上的激活页面，使用PayPal进行付款激活："></a>注册完成后就可以登录进入PayPal了，下一步就是绑定银行卡，这一步很简单，相信有过网购经历的朋友都可以轻松完成。这时候再返回到digitalocean上的激活页面，使用PayPal进行付款激活：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/PayPal_continue.png" alt="continue"></p>
<h3 id="下面这一步有可能有，也可能没有，看情况吧。没有是因为你刚才注册过的时候已经登录过了，这次付款直接调用不需要再次登录，而我是之前已经注册过了，这次没有注册，时间长了，需要重新登录。"><a href="#下面这一步有可能有，也可能没有，看情况吧。没有是因为你刚才注册过的时候已经登录过了，这次付款直接调用不需要再次登录，而我是之前已经注册过了，这次没有注册，时间长了，需要重新登录。" class="headerlink" title="下面这一步有可能有，也可能没有，看情况吧。没有是因为你刚才注册过的时候已经登录过了，这次付款直接调用不需要再次登录，而我是之前已经注册过了，这次没有注册，时间长了，需要重新登录。"></a>下面这一步有可能有，也可能没有，看情况吧。没有是因为你刚才注册过的时候已经登录过了，这次付款直接调用不需要再次登录，而我是之前已经注册过了，这次没有注册，时间长了，需要重新登录。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/PayPal_logging.png" alt="logging"></p>
<h3 id="登陆完之后付款就可以激活账户了，这时候你的账户里面就有15美元（5美元重置的，10美元用我给的推荐链接额外赠送的）。另外如果你是高校学生的话，就可以再额外获得50美元的优惠。这个是digitalocean联手GitHub推出的学生优惠。关于这个优惠如何获取，网上已经有很多的文章了，这里推荐一个，自己去参考一下，另外如果有-edu-cn的校园邮箱，申请学生优惠是非常容易的，不再赘述。领完学生优惠之后，现在进入你的digitalocean账户，会发现里面有65美元（我的显示的是64-05美元，是因为我已经用了一段时间了，如果你是新注册的，当然就是65美元了）。"><a href="#登陆完之后付款就可以激活账户了，这时候你的账户里面就有15美元（5美元重置的，10美元用我给的推荐链接额外赠送的）。另外如果你是高校学生的话，就可以再额外获得50美元的优惠。这个是digitalocean联手GitHub推出的学生优惠。关于这个优惠如何获取，网上已经有很多的文章了，这里推荐一个，自己去参考一下，另外如果有-edu-cn的校园邮箱，申请学生优惠是非常容易的，不再赘述。领完学生优惠之后，现在进入你的digitalocean账户，会发现里面有65美元（我的显示的是64-05美元，是因为我已经用了一段时间了，如果你是新注册的，当然就是65美元了）。" class="headerlink" title="登陆完之后付款就可以激活账户了，这时候你的账户里面就有15美元（5美元重置的，10美元用我给的推荐链接额外赠送的）。另外如果你是高校学生的话，就可以再额外获得50美元的优惠。这个是digitalocean联手GitHub推出的学生优惠。关于这个优惠如何获取，网上已经有很多的文章了，这里推荐一个，自己去参考一下，另外如果有.edu.cn的校园邮箱，申请学生优惠是非常容易的，不再赘述。领完学生优惠之后，现在进入你的digitalocean账户，会发现里面有65美元（我的显示的是64.05美元，是因为我已经用了一段时间了，如果你是新注册的，当然就是65美元了）。"></a>登陆完之后付款就可以激活账户了，这时候你的账户里面就有15美元（5美元重置的，10美元用我给的推荐链接额外赠送的）。另外如果你是高校学生的话，就可以再额外获得50美元的优惠。这个是digitalocean联手GitHub推出的学生优惠。关于这个优惠如何获取，网上已经有很多的文章了，这里<a href="https://steinslab.xyz/archives/345" target="_blank" rel="external">推荐一个</a>，自己去参考一下，另外如果有.edu.cn的校园邮箱，申请学生优惠是非常容易的，不再赘述。领完学生优惠之后，现在进入你的digitalocean账户，会发现里面有65美元（我的显示的是64.05美元，是因为我已经用了一段时间了，如果你是新注册的，当然就是65美元了）。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/digital_maoey.png" alt="money"></p>
<p><strong></strong></p>
<h3 id="下面我们要进行的是digitalocean虚拟主机的创建。首先我们登录进入我们的digitalocean管理界面。"><a href="#下面我们要进行的是digitalocean虚拟主机的创建。首先我们登录进入我们的digitalocean管理界面。" class="headerlink" title="下面我们要进行的是digitalocean虚拟主机的创建。首先我们登录进入我们的digitalocean管理界面。"></a>下面我们要进行的是digitalocean虚拟主机的创建。首先我们登录进入我们的digitalocean管理界面。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_1.png" alt="wea"></p>
<h3 id="下一步是选择创建虚拟主机，点击create-droplets："><a href="#下一步是选择创建虚拟主机，点击create-droplets：" class="headerlink" title="下一步是选择创建虚拟主机，点击create droplets："></a>下一步是选择创建虚拟主机，点击create droplets：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_2.png" alt="create_droplets"></p>
<h3 id="有很多版本的linux发版行供我们选择，当然选择哪一个都是可以的，你对哪个发版行比较熟悉，就选择哪一个。一般比较常用的有Ubuntu和CentOS这两个，我也推荐使用这两个，因为作为服务器比较稳定，用的人多，遇到问题容易找到答案，关于虚拟主机的配置，如果你的站点访问量不大，或者就是用来记录一些个人经验啥的，我推荐最低配置就可以了，配置越高性能越好，价格越贵。如果你是土豪，当然选哪一个都无所谓啦。这里我选择的是centos7-5美元每月的配置。"><a href="#有很多版本的linux发版行供我们选择，当然选择哪一个都是可以的，你对哪个发版行比较熟悉，就选择哪一个。一般比较常用的有Ubuntu和CentOS这两个，我也推荐使用这两个，因为作为服务器比较稳定，用的人多，遇到问题容易找到答案，关于虚拟主机的配置，如果你的站点访问量不大，或者就是用来记录一些个人经验啥的，我推荐最低配置就可以了，配置越高性能越好，价格越贵。如果你是土豪，当然选哪一个都无所谓啦。这里我选择的是centos7-5美元每月的配置。" class="headerlink" title="有很多版本的linux发版行供我们选择，当然选择哪一个都是可以的，你对哪个发版行比较熟悉，就选择哪一个。一般比较常用的有Ubuntu和CentOS这两个，我也推荐使用这两个，因为作为服务器比较稳定，用的人多，遇到问题容易找到答案，关于虚拟主机的配置，如果你的站点访问量不大，或者就是用来记录一些个人经验啥的，我推荐最低配置就可以了，配置越高性能越好，价格越贵。如果你是土豪，当然选哪一个都无所谓啦。这里我选择的是centos7, 5美元每月的配置。"></a>有很多版本的linux发版行供我们选择，当然选择哪一个都是可以的，你对哪个发版行比较熟悉，就选择哪一个。一般比较常用的有Ubuntu和CentOS这两个，我也推荐使用这两个，因为作为服务器比较稳定，用的人多，遇到问题容易找到答案，关于虚拟主机的配置，如果你的站点访问量不大，或者就是用来记录一些个人经验啥的，我推荐最低配置就可以了，配置越高性能越好，价格越贵。如果你是土豪，当然选哪一个都无所谓啦。这里我选择的是centos7, 5美元每月的配置。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_3.png" alt="droplets"></p>
<h3 id="在Choose-an-image下方有一个one-clinlapps，这一个是可以在创建虚拟主机的时候顺便安装一些功能。比如说后面我们打算安装WordPress，做个人博客。在这里面就可以直接选择后面安装完成后，虚拟主机里面就安装好了WordPress，但是通过这种方式选择安装WordPress之后，下面的最低5美元的配置就不能再选择了，只能选择10美元每月及更贵的配置了。不喜欢折腾，又不差这点钱的朋友可以选择这种安装方式。我没有通过这种方式进行安装-。依旧采用的5美元每月的配置。"><a href="#在Choose-an-image下方有一个one-clinlapps，这一个是可以在创建虚拟主机的时候顺便安装一些功能。比如说后面我们打算安装WordPress，做个人博客。在这里面就可以直接选择后面安装完成后，虚拟主机里面就安装好了WordPress，但是通过这种方式选择安装WordPress之后，下面的最低5美元的配置就不能再选择了，只能选择10美元每月及更贵的配置了。不喜欢折腾，又不差这点钱的朋友可以选择这种安装方式。我没有通过这种方式进行安装-。依旧采用的5美元每月的配置。" class="headerlink" title="在Choose an image下方有一个one-clinlapps，这一个是可以在创建虚拟主机的时候顺便安装一些功能。比如说后面我们打算安装WordPress，做个人博客。在这里面就可以直接选择后面安装完成后，虚拟主机里面就安装好了WordPress，但是通过这种方式选择安装WordPress之后，下面的最低5美元的配置就不能再选择了，只能选择10美元每月及更贵的配置了。不喜欢折腾，又不差这点钱的朋友可以选择这种安装方式。我没有通过这种方式进行安装 。依旧采用的5美元每月的配置。"></a>在Choose an image下方有一个one-clinlapps，这一个是可以在创建虚拟主机的时候顺便安装一些功能。比如说后面我们打算安装WordPress，做个人博客。在这里面就可以直接选择后面安装完成后，虚拟主机里面就安装好了WordPress，但是通过这种方式选择安装WordPress之后，下面的最低5美元的配置就不能再选择了，只能选择10美元每月及更贵的配置了。不喜欢折腾，又不差这点钱的朋友可以选择这种安装方式。我没有通过这种方式进行安装 。依旧采用的5美元每月的配置。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_4.png" alt="apps"></p>
<h3 id="紧接着是Add-block-store，这个是增加物理空间的，这个看个人需要，如果仅仅用来学习，20G的空间足够了。再下面是选择机房位置，digitalocean目前有八个机房，我们选择Singapore这个机房，离我们国家较近，这样访问速度会快一点。再然后选择Private-networking和ipv6就可以了。如果你需要数据备份，你就再选择Backups（是另外加钱的）。刚开始创建的时候需要你添加一个ssh。"><a href="#紧接着是Add-block-store，这个是增加物理空间的，这个看个人需要，如果仅仅用来学习，20G的空间足够了。再下面是选择机房位置，digitalocean目前有八个机房，我们选择Singapore这个机房，离我们国家较近，这样访问速度会快一点。再然后选择Private-networking和ipv6就可以了。如果你需要数据备份，你就再选择Backups（是另外加钱的）。刚开始创建的时候需要你添加一个ssh。" class="headerlink" title="紧接着是Add block store，这个是增加物理空间的，这个看个人需要，如果仅仅用来学习，20G的空间足够了。再下面是选择机房位置，digitalocean目前有八个机房，我们选择Singapore这个机房，离我们国家较近，这样访问速度会快一点。再然后选择Private networking和ipv6就可以了。如果你需要数据备份，你就再选择Backups（是另外加钱的）。刚开始创建的时候需要你添加一个ssh。"></a>紧接着是Add block store，这个是增加物理空间的，这个看个人需要，如果仅仅用来学习，20G的空间足够了。再下面是选择机房位置，digitalocean目前有八个机房，我们选择Singapore这个机房，离我们国家较近，这样访问速度会快一点。再然后选择Private networking和ipv6就可以了。如果你需要数据备份，你就再选择Backups（是另外加钱的）。刚开始创建的时候需要你添加一个<a href="http://baike.baidu.com/link?url=5rYGPJ5xahk64ocEXCXMd5wpiRfHAj3PCQtpo2J7t0cm7DGUVbbN7Ub8PRBB1l32VVTRvtik4D23waz8-809Ba" target="_blank" rel="external">ssh</a>。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_4.png" alt="next"></p>
<h3 id="关于ssh-keys的添加，首先你需要下载一个ssh-key生成的软件puttygen在官网下载对于系统版本的puttygen，下面是软件安装好刚打开的样子："><a href="#关于ssh-keys的添加，首先你需要下载一个ssh-key生成的软件puttygen在官网下载对于系统版本的puttygen，下面是软件安装好刚打开的样子：" class="headerlink" title="关于ssh keys的添加，首先你需要下载一个ssh key生成的软件puttygen在官网下载对于系统版本的puttygen，下面是软件安装好刚打开的样子："></a>关于ssh keys的添加，首先你需要下载一个ssh key生成的软件<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">puttygen</a>在官网下载对于系统版本的puttygen，下面是软件安装好刚打开的样子：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_7.png" alt="puttygen"></p>
<h3 id="点击general，在指定范围内移动鼠标，生成ssh-key："><a href="#点击general，在指定范围内移动鼠标，生成ssh-key：" class="headerlink" title="点击general，在指定范围内移动鼠标，生成ssh key："></a>点击general，在指定范围内移动鼠标，生成ssh key：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_8.png" alt="ssh key"></p>
<h3 id="生成后的ssh-key如下所示，我们需要先保存公钥（public-key），再保存私钥-private-key"><a href="#生成后的ssh-key如下所示，我们需要先保存公钥（public-key），再保存私钥-private-key" class="headerlink" title="生成后的ssh key如下所示，我们需要先保存公钥（public key），再保存私钥(private key):"></a>生成后的ssh key如下所示，我们需要先保存公钥（public key），再保存私钥(private key):</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_10.png" alt="save key"></p>
<h3 id="公钥保存成-txt格式："><a href="#公钥保存成-txt格式：" class="headerlink" title="公钥保存成.txt格式："></a>公钥保存成.txt格式：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_11.png" alt="public key"></p>
<h3 id="私钥保存成-ppk的格式（前面的名字随意取），私钥的权利很大，可以直接使用私钥不使用密码登录你的虚拟主机，保存私钥存在一定的安全隐患，所以保存的时候，会出现警告，如果你想要绝对安全，就不保存，我选择保存。记住私钥一定要保存好。"><a href="#私钥保存成-ppk的格式（前面的名字随意取），私钥的权利很大，可以直接使用私钥不使用密码登录你的虚拟主机，保存私钥存在一定的安全隐患，所以保存的时候，会出现警告，如果你想要绝对安全，就不保存，我选择保存。记住私钥一定要保存好。" class="headerlink" title="私钥保存成.ppk的格式（前面的名字随意取），私钥的权利很大，可以直接使用私钥不使用密码登录你的虚拟主机，保存私钥存在一定的安全隐患，所以保存的时候，会出现警告，如果你想要绝对安全，就不保存，我选择保存。记住私钥一定要保存好。"></a>私钥保存成.ppk的格式（前面的名字随意取），私钥的权利很大，可以直接使用私钥不使用密码登录你的虚拟主机，保存私钥存在一定的安全隐患，所以保存的时候，会出现警告，如果你想要绝对安全，就不保存，我选择保存。记住私钥一定要保存好。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/puttygerrn.png" alt="warning"><br><img src="http://ot44u2158.bkt.clouddn.com/puttygreen_last.png" alt="last"></p>
<h3 id="下一步把我们的公钥复制粘贴到我们创建的虚拟主机的new-ssh里面保存就行了，然后就可以继续创建虚拟主机了："><a href="#下一步把我们的公钥复制粘贴到我们创建的虚拟主机的new-ssh里面保存就行了，然后就可以继续创建虚拟主机了：" class="headerlink" title="下一步把我们的公钥复制粘贴到我们创建的虚拟主机的new ssh里面保存就行了，然后就可以继续创建虚拟主机了："></a>下一步把我们的公钥复制粘贴到我们创建的虚拟主机的new ssh里面保存就行了，然后就可以继续创建虚拟主机了：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_12.png" alt="newssh"></p>
<h3 id="下面就是我们创建的虚拟主机名称（名称可以随意改），你可以添加虚拟主机创建的个数，一般可以创建五个，再多的话，客服就会联系你，问你原因了："><a href="#下面就是我们创建的虚拟主机名称（名称可以随意改），你可以添加虚拟主机创建的个数，一般可以创建五个，再多的话，客服就会联系你，问你原因了：" class="headerlink" title="下面就是我们创建的虚拟主机名称（名称可以随意改），你可以添加虚拟主机创建的个数，一般可以创建五个，再多的话，客服就会联系你，问你原因了："></a>下面就是我们创建的虚拟主机名称（名称可以随意改），你可以添加虚拟主机创建的个数，一般可以创建五个，再多的话，客服就会联系你，问你原因了：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/drop_6.png" alt="last"></p>
<h3 id="最后一步，点击Create，就成功创建了我们的虚拟主机："><a href="#最后一步，点击Create，就成功创建了我们的虚拟主机：" class="headerlink" title="最后一步，点击Create，就成功创建了我们的虚拟主机："></a>最后一步，点击Create，就成功创建了我们的虚拟主机：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/success.png" alt="success"></p>
<h3 id="点击我们创建的虚拟主机，就进入虚拟主机的管理界面了："><a href="#点击我们创建的虚拟主机，就进入虚拟主机的管理界面了：" class="headerlink" title="点击我们创建的虚拟主机，就进入虚拟主机的管理界面了："></a>点击我们创建的虚拟主机，就进入虚拟主机的管理界面了：</h3><p><img src="http://ot44u2158.bkt.clouddn.com/enter.pnge" alt="enter"></p>
<h3 id="对于新手来说，比较常用的就是Destroy了吧，无论你怎么折腾，都可以选择destroy然后重新再创建一个全新的虚拟主机，连IP都是新的了。通过这个管理界面，还可以对虚拟主机进行关机和重启操作。"><a href="#对于新手来说，比较常用的就是Destroy了吧，无论你怎么折腾，都可以选择destroy然后重新再创建一个全新的虚拟主机，连IP都是新的了。通过这个管理界面，还可以对虚拟主机进行关机和重启操作。" class="headerlink" title="对于新手来说，比较常用的就是Destroy了吧，无论你怎么折腾，都可以选择destroy然后重新再创建一个全新的虚拟主机，连IP都是新的了。通过这个管理界面，还可以对虚拟主机进行关机和重启操作。"></a>对于新手来说，比较常用的就是Destroy了吧，无论你怎么折腾，都可以选择destroy然后重新再创建一个全新的虚拟主机，连IP都是新的了。通过这个管理界面，还可以对虚拟主机进行关机和重启操作。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/destroy.png" alt="destory"><br><img src="http://ot44u2158.bkt.clouddn.com/power.png" alt="power"></p>
<h3 id="当然这不是我们要的管理界面。我们需要下载一个新的软件（PuTTY）-这里提供下载链接，对虚拟主机进行管理。"><a href="#当然这不是我们要的管理界面。我们需要下载一个新的软件（PuTTY）-这里提供下载链接，对虚拟主机进行管理。" class="headerlink" title="当然这不是我们要的管理界面。我们需要下载一个新的软件（PuTTY）,这里提供下载链接，对虚拟主机进行管理。"></a>当然这不是我们要的管理界面。我们需要下载一个新的软件（PuTTY）,<a href="https://putty.en.softonic.com/" target="_blank" rel="external">这里提供下载链接</a>，对虚拟主机进行管理。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/PuTTY.png" alt="PuTTY"></p>
<h3 id="打开PuTTY之后，首先需要登录远程的虚拟主机，在HostName的位置，输入你刚刚创建的虚拟主机的IP地址，进入Digitalocean管理页面可以找到（ipv4的地址）。"><a href="#打开PuTTY之后，首先需要登录远程的虚拟主机，在HostName的位置，输入你刚刚创建的虚拟主机的IP地址，进入Digitalocean管理页面可以找到（ipv4的地址）。" class="headerlink" title="打开PuTTY之后，首先需要登录远程的虚拟主机，在HostName的位置，输入你刚刚创建的虚拟主机的IP地址，进入Digitalocean管理页面可以找到（ipv4的地址）。"></a>打开PuTTY之后，首先需要登录远程的虚拟主机，在HostName的位置，输入你刚刚创建的虚拟主机的IP地址，进入Digitalocean管理页面可以找到（ipv4的地址）。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/IP.png" alt="IP地址"></p>
<h3 id="然后找到Data，在Auto-login-username那里输入root（以root用户登录）。"><a href="#然后找到Data，在Auto-login-username那里输入root（以root用户登录）。" class="headerlink" title="然后找到Data，在Auto-login username那里输入root（以root用户登录）。"></a>然后找到Data，在Auto-login username那里输入root（以root用户登录）。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/root.png" alt="root"></p>
<h3 id="再然后在SSH-gt-Auth中导入你之前保存的ssh私钥"><a href="#再然后在SSH-gt-Auth中导入你之前保存的ssh私钥" class="headerlink" title="再然后在SSH-&gt;Auth中导入你之前保存的ssh私钥"></a>再然后在SSH-&gt;Auth中导入你之前保存的ssh私钥</h3><p><img src="http://ot44u2158.bkt.clouddn.com/ssh_denglu.png" alt="ssh_import"></p>
<h3 id="最后再按照图片上的顺序分别是保存一个名称，以后就不需要再按照上面的步骤进行输入了，直接点击保存的名称，然后load就可以了。"><a href="#最后再按照图片上的顺序分别是保存一个名称，以后就不需要再按照上面的步骤进行输入了，直接点击保存的名称，然后load就可以了。" class="headerlink" title="最后再按照图片上的顺序分别是保存一个名称，以后就不需要再按照上面的步骤进行输入了，直接点击保存的名称，然后load就可以了。"></a>最后再按照图片上的顺序分别是保存一个名称，以后就不需要再按照上面的步骤进行输入了，直接点击保存的名称，然后load就可以了。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/save.png" alt="save"></p>
<h3 id="点击open之后，使用ssh-key第一次登录会弹出使用警告，之后就没有了，我们直接点击“是”就行了。"><a href="#点击open之后，使用ssh-key第一次登录会弹出使用警告，之后就没有了，我们直接点击“是”就行了。" class="headerlink" title="点击open之后，使用ssh key第一次登录会弹出使用警告，之后就没有了，我们直接点击“是”就行了。"></a>点击open之后，使用ssh key第一次登录会弹出使用警告，之后就没有了，我们直接点击“是”就行了。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/ssh_warning.png" alt="ssh_warning"></p>
<h3 id="最终，我们成功登录虚拟主机，这就是我们的远程管理界面，是不是很古老，没错就是这个样子，没有华丽的桌面，但是作为服务器端，这样就已经足够了。"><a href="#最终，我们成功登录虚拟主机，这就是我们的远程管理界面，是不是很古老，没错就是这个样子，没有华丽的桌面，但是作为服务器端，这样就已经足够了。" class="headerlink" title="最终，我们成功登录虚拟主机，这就是我们的远程管理界面，是不是很古老，没错就是这个样子，没有华丽的桌面，但是作为服务器端，这样就已经足够了。"></a>最终，我们成功登录虚拟主机，这就是我们的远程管理界面，是不是很古老，没错就是这个样子，没有华丽的桌面，但是作为服务器端，这样就已经足够了。</h3><p><img src="http://ot44u2158.bkt.clouddn.com/finish.png" alt="finish"></p>
<blockquote>
<h3 id="至此，这篇教程类的文章就到此结束了，码字不易，希望对你有所帮助。如果您心情好的话，下方有打赏按钮，您随意打赏，支持作者继续创作。"><a href="#至此，这篇教程类的文章就到此结束了，码字不易，希望对你有所帮助。如果您心情好的话，下方有打赏按钮，您随意打赏，支持作者继续创作。" class="headerlink" title="至此，这篇教程类的文章就到此结束了，码字不易，希望对你有所帮助。如果您心情好的话，下方有打赏按钮，您随意打赏，支持作者继续创作。"></a>至此，这篇教程类的文章就到此结束了，码字不易，希望对你有所帮助。如果您心情好的话，下方有打赏按钮，您随意打赏，支持作者继续创作。</h3></blockquote>
]]></content>
      
        
        <tags>
            
            <tag> vps </tag>
            
            <tag> 教程 </tag>
            
            <tag> 虚拟主机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开博总结]]></title>
      <url>/2017/07/14/%E5%BC%80%E5%8D%9A%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="来来回回折腾了将近有一个星期左右，博客终于能够上线了。搞这些东西真的需要能够折腾的人才能去搞。简单概括一下过程，后面再写文章细化总结。"><a href="#来来回回折腾了将近有一个星期左右，博客终于能够上线了。搞这些东西真的需要能够折腾的人才能去搞。简单概括一下过程，后面再写文章细化总结。" class="headerlink" title="来来回回折腾了将近有一个星期左右，博客终于能够上线了。搞这些东西真的需要能够折腾的人才能去搞。简单概括一下过程，后面再写文章细化总结。"></a>来来回回折腾了将近有一个星期左右，博客终于能够上线了。搞这些东西真的需要能够折腾的人才能去搞。简单概括一下过程，后面再写文章细化总结。</h4><h4 id="首先折腾域名，左挑右选，这家看看，那家查查。最终再Gogaddy上购买了bbiao-me这个域名，很多人可能会为买什么样后缀的域名而感到由于，作为新手我同样有相同的疑惑。但是这些天我在网上搜寻了很多相关的资料，得到了一点心得吧。首先购买域名要看自己的用途，如果你打算做一个网站（商业性质的），我建议你注册购买-com-的顶级域名，当然如果你做个人网站，当然也可以使用-com的顶级域名。我之所以选择-me的域名，是因为我打算做一个个人博客，没事的时候写写文章，写写经验，写写感悟什么的，这样网站更偏向于个人，而-me的域名正好与这个初衷相符。"><a href="#首先折腾域名，左挑右选，这家看看，那家查查。最终再Gogaddy上购买了bbiao-me这个域名，很多人可能会为买什么样后缀的域名而感到由于，作为新手我同样有相同的疑惑。但是这些天我在网上搜寻了很多相关的资料，得到了一点心得吧。首先购买域名要看自己的用途，如果你打算做一个网站（商业性质的），我建议你注册购买-com-的顶级域名，当然如果你做个人网站，当然也可以使用-com的顶级域名。我之所以选择-me的域名，是因为我打算做一个个人博客，没事的时候写写文章，写写经验，写写感悟什么的，这样网站更偏向于个人，而-me的域名正好与这个初衷相符。" class="headerlink" title="首先折腾域名，左挑右选，这家看看，那家查查。最终再Gogaddy上购买了bbiao.me这个域名，很多人可能会为买什么样后缀的域名而感到由于，作为新手我同样有相同的疑惑。但是这些天我在网上搜寻了很多相关的资料，得到了一点心得吧。首先购买域名要看自己的用途，如果你打算做一个网站（商业性质的），我建议你注册购买.com 的顶级域名，当然如果你做个人网站，当然也可以使用.com的顶级域名。我之所以选择.me的域名，是因为我打算做一个个人博客，没事的时候写写文章，写写经验，写写感悟什么的，这样网站更偏向于个人，而.me的域名正好与这个初衷相符。"></a>首先折腾域名，左挑右选，这家看看，那家查查。最终再Gogaddy上购买了bbiao.me这个域名，很多人可能会为买什么样后缀的域名而感到由于，作为新手我同样有相同的疑惑。但是这些天我在网上搜寻了很多相关的资料，得到了一点心得吧。首先购买域名要看自己的用途，如果你打算做一个网站（商业性质的），我建议你注册购买.com 的顶级域名，当然如果你做个人网站，当然也可以使用.com的顶级域名。我之所以选择.me的域名，是因为我打算做一个个人博客，没事的时候写写文章，写写经验，写写感悟什么的，这样网站更偏向于个人，而.me的域名正好与这个初衷相符。</h4><h4 id="其次是关于购买域名是在国外购买还是在国内购买的问题。域名在国内和国外都可以购买，国内比较大的两家域名出售商一家是阿里，另一家是腾讯。在国内购买的要稍微便宜一点点，但是国内购买的域名都要求备案，还要到指定的地方拍照。以前备案需要将近半个月才能审核下来，现在的话可能快一点，但是也要一个星期左右。所以我选择了国外购买域名。关于备案流程，网上有很多文章，这里就不再赘述，这里给出阿里的备案流程。"><a href="#其次是关于购买域名是在国外购买还是在国内购买的问题。域名在国内和国外都可以购买，国内比较大的两家域名出售商一家是阿里，另一家是腾讯。在国内购买的要稍微便宜一点点，但是国内购买的域名都要求备案，还要到指定的地方拍照。以前备案需要将近半个月才能审核下来，现在的话可能快一点，但是也要一个星期左右。所以我选择了国外购买域名。关于备案流程，网上有很多文章，这里就不再赘述，这里给出阿里的备案流程。" class="headerlink" title="其次是关于购买域名是在国外购买还是在国内购买的问题。域名在国内和国外都可以购买，国内比较大的两家域名出售商一家是阿里，另一家是腾讯。在国内购买的要稍微便宜一点点，但是国内购买的域名都要求备案，还要到指定的地方拍照。以前备案需要将近半个月才能审核下来，现在的话可能快一点，但是也要一个星期左右。所以我选择了国外购买域名。关于备案流程，网上有很多文章，这里就不再赘述，这里给出阿里的备案流程。"></a>其次是关于购买域名是在国外购买还是在国内购买的问题。域名在国内和国外都可以购买，国内比较大的两家域名出售商一家是阿里，另一家是腾讯。在国内购买的要稍微便宜一点点，但是国内购买的域名都要求备案，还要到指定的地方拍照。以前备案需要将近半个月才能审核下来，现在的话可能快一点，但是也要一个星期左右。所以我选择了国外购买域名。关于备案流程，网上有很多文章，这里就不再赘述，<a href="https://beian.aliyun.com/" target="_blank" rel="external">这里</a>给出阿里的备案流程。</h4><h4 id="域名购买好之后，其实就可以做个人博客了。可以使用GitHub给每个人提供的300M空间，使用Hexo-。当然我也有这种打算，并且已经做了一部分了，可能以后会转到上面。但是目前我选择了另外一种搭建博客的方法，就是购买虚拟服务器（vps），选择的是Digital-Ocean的虚拟服务器。首先Digital-Ocean在国内性价比比较高，关键是有学生优惠，我冲了5美元，账户收到了65美元，其中有50美元是学生身份赠送的，另外10美元是通过一个推广链接注册后的优惠。Digital-Ocean还有比较人性化的一点是，它是按照小时收费的，并且可以随时销毁当前的虚拟主机，重新创建一个，而且连IP地址都会改变。digitalocean最低配置是5美元一个月，512M内存，20SSD，1000G的流量。对小站点来说完全足够了。为了能够物尽其用，我又在虚拟服务器上搭建了一个vpn，网速还挺好的，在线看YutuBee-1080P，基本不卡。由于国内对网络监管力度越来越大了，所以为了学习，安全等等的考虑，自己搭建一个梯子，科学上网是十分必要的，而且这个梯子和博客在同一个虚拟服务器上，可以说一举两用。"><a href="#域名购买好之后，其实就可以做个人博客了。可以使用GitHub给每个人提供的300M空间，使用Hexo-。当然我也有这种打算，并且已经做了一部分了，可能以后会转到上面。但是目前我选择了另外一种搭建博客的方法，就是购买虚拟服务器（vps），选择的是Digital-Ocean的虚拟服务器。首先Digital-Ocean在国内性价比比较高，关键是有学生优惠，我冲了5美元，账户收到了65美元，其中有50美元是学生身份赠送的，另外10美元是通过一个推广链接注册后的优惠。Digital-Ocean还有比较人性化的一点是，它是按照小时收费的，并且可以随时销毁当前的虚拟主机，重新创建一个，而且连IP地址都会改变。digitalocean最低配置是5美元一个月，512M内存，20SSD，1000G的流量。对小站点来说完全足够了。为了能够物尽其用，我又在虚拟服务器上搭建了一个vpn，网速还挺好的，在线看YutuBee-1080P，基本不卡。由于国内对网络监管力度越来越大了，所以为了学习，安全等等的考虑，自己搭建一个梯子，科学上网是十分必要的，而且这个梯子和博客在同一个虚拟服务器上，可以说一举两用。" class="headerlink" title="域名购买好之后，其实就可以做个人博客了。可以使用GitHub给每个人提供的300M空间，使用Hexo 。当然我也有这种打算，并且已经做了一部分了，可能以后会转到上面。但是目前我选择了另外一种搭建博客的方法，就是购买虚拟服务器（vps），选择的是Digital Ocean的虚拟服务器。首先Digital Ocean在国内性价比比较高，关键是有学生优惠，我冲了5美元，账户收到了65美元，其中有50美元是学生身份赠送的，另外10美元是通过一个推广链接注册后的优惠。Digital Ocean还有比较人性化的一点是，它是按照小时收费的，并且可以随时销毁当前的虚拟主机，重新创建一个，而且连IP地址都会改变。digitalocean最低配置是5美元一个月，512M内存，20SSD，1000G的流量。对小站点来说完全足够了。为了能够物尽其用，我又在虚拟服务器上搭建了一个vpn，网速还挺好的，在线看YutuBee 1080P，基本不卡。由于国内对网络监管力度越来越大了，所以为了学习，安全等等的考虑，自己搭建一个梯子，科学上网是十分必要的，而且这个梯子和博客在同一个虚拟服务器上，可以说一举两用。"></a>域名购买好之后，其实就可以做个人博客了。可以使用GitHub给每个人提供的300M空间，使用Hexo 。当然我也有这种打算，并且已经做了一部分了，可能以后会转到上面。但是目前我选择了另外一种搭建博客的方法，就是购买虚拟服务器（<a href="http://baike.baidu.com/link?url=ikeKoD0MSdr69mfyfNvy0vDAK2Vg6d-KFELd2JbEum8XzX9ZKECz9WvXv-6FGruIJXr13Dj0-kkG9qOIe8hT-_" target="_blank" rel="external">vps</a>），选择的是Digital Ocean的虚拟服务器。首先Digital Ocean在国内性价比比较高，关键是有学生优惠，我冲了5美元，账户收到了65美元，其中有50美元是学生身份赠送的，另外10美元是通过一个推广链接注册后的优惠。Digital Ocean还有比较人性化的一点是，它是按照小时收费的，并且可以随时销毁当前的虚拟主机，重新创建一个，而且连IP地址都会改变。digitalocean最低配置是5美元一个月，512M内存，20SSD，1000G的流量。对小站点来说完全足够了。为了能够物尽其用，我又在虚拟服务器上搭建了一个vpn，网速还挺好的，在线看YutuBee 1080P，基本不卡。由于国内对网络监管力度越来越大了，所以为了学习，安全等等的考虑，自己搭建一个梯子，科学上网是十分必要的，而且这个梯子和博客在同一个虚拟服务器上，可以说一举两用。</h4><h4 id="域名有了，vps也有了，下面开始搭建博客，WordPress用的人最多，页面也比较友好，于是我就选择搭建一个基于WordPress的个人博客，在digitalocean虚拟主机选择创建的时候，就可以选择自带WordPress安装选项的，但是选择之后，主机就只能选择10美元一个月的了，对于处于探索阶段的我来说，10美元一个月花费太大了，等以后能够创建收入之后，再提高配置吧。于是我选择自己折腾安装。"><a href="#域名有了，vps也有了，下面开始搭建博客，WordPress用的人最多，页面也比较友好，于是我就选择搭建一个基于WordPress的个人博客，在digitalocean虚拟主机选择创建的时候，就可以选择自带WordPress安装选项的，但是选择之后，主机就只能选择10美元一个月的了，对于处于探索阶段的我来说，10美元一个月花费太大了，等以后能够创建收入之后，再提高配置吧。于是我选择自己折腾安装。" class="headerlink" title="域名有了，vps也有了，下面开始搭建博客，WordPress用的人最多，页面也比较友好，于是我就选择搭建一个基于WordPress的个人博客，在digitalocean虚拟主机选择创建的时候，就可以选择自带WordPress安装选项的，但是选择之后，主机就只能选择10美元一个月的了，对于处于探索阶段的我来说，10美元一个月花费太大了，等以后能够创建收入之后，再提高配置吧。于是我选择自己折腾安装。"></a>域名有了，vps也有了，下面开始搭建博客，WordPress用的人最多，页面也比较友好，于是我就选择搭建一个基于WordPress的个人博客，在digitalocean虚拟主机选择创建的时候，就可以选择自带WordPress安装选项的，但是选择之后，主机就只能选择10美元一个月的了，对于处于探索阶段的我来说，10美元一个月花费太大了，等以后能够创建收入之后，再提高配置吧。于是我选择自己折腾安装。</h4><h4 id="终于在经过几天的折腾之后，WordPress搭建完成，就跟盖房子一样，现在我们把框架搭建好了，下一步就是装修，又折腾了一天的主题，配色等等。终于写下了这来之不易的第一篇文章。"><a href="#终于在经过几天的折腾之后，WordPress搭建完成，就跟盖房子一样，现在我们把框架搭建好了，下一步就是装修，又折腾了一天的主题，配色等等。终于写下了这来之不易的第一篇文章。" class="headerlink" title="终于在经过几天的折腾之后，WordPress搭建完成，就跟盖房子一样，现在我们把框架搭建好了，下一步就是装修，又折腾了一天的主题，配色等等。终于写下了这来之不易的第一篇文章。"></a>终于在经过几天的折腾之后，WordPress搭建完成，就跟盖房子一样，现在我们把框架搭建好了，下一步就是装修，又折腾了一天的主题，配色等等。终于写下了这来之不易的第一篇文章。</h4><h4 id="关于域名购买，虚拟空间的创建，博客的搭建后面我会写文章专门介绍。好了，第一篇文章就到这里结束吧。"><a href="#关于域名购买，虚拟空间的创建，博客的搭建后面我会写文章专门介绍。好了，第一篇文章就到这里结束吧。" class="headerlink" title="关于域名购买，虚拟空间的创建，博客的搭建后面我会写文章专门介绍。好了，第一篇文章就到这里结束吧。"></a>关于域名购买，虚拟空间的创建，博客的搭建后面我会写文章专门介绍。好了，第一篇文章就到这里结束吧。</h4></blockquote>
]]></content>
      
        <categories>
            
            <category> 感悟 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超详细！linux-nginx-mysql-php（lemp）环境搭建wordpress]]></title>
      <url>/2017/07/09/%E8%B6%85%E8%AF%A6%E7%BB%86%EF%BC%81linux-nginx-mysql-php%EF%BC%88lemp%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAwordpress/</url>
      <content type="html"><![CDATA[<p>之前写过《<a href="http://bbiao.me/2017/07/16/%E4%BD%BF%E7%94%A8linux-apache-mysql-php-lamp%E6%90%AD%E5%BB%BAwordpress/" target="_blank" rel="external">如何在LAMP环境下搭建WordPress</a>》，这里介绍一下用LEMP搭建，选择用什么环境搭建，请参考我的这篇文章《<a href="http://bbiao.me/2017/07/18/WordPress%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%9A%84%E9%80%89%E6%8B%A9/" target="_blank" rel="external">WordPress安装环境与配置的选择</a>》。</p>
<p>废话不多说，我们开始进入正题。<br>使用LEMP安装WordPress，首先需要搭建LEMP环境。需要安装Nginx和MySQL以及PHP。Linux环境我们选择的是使用Ubuntu 14.04作为我们的操作系统。</p>
<blockquote>
<p>先登录上你的vps服务器：</p>
</blockquote>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/1_1.PNG" alt="3"></p>
<blockquote>
<h2 id="第一步：-安装Nginx"><a href="#第一步：-安装Nginx" class="headerlink" title="第一步： 安装Nginx"></a>第一步： 安装Nginx</h2></blockquote>
<p>需要使用以下命令进行安装：</p>
<font color="Lime">apt-get install nginx</font><br>重启nginx服务：<br><font color="Lime">service nginx start</font><br>然后你可以在浏览器中通过你vps的IP地址如果你有域名并且把域名解析到你的vps上了，你也可以在浏览器输入你的域名进行查看，如果出现以下画面，则安装成功：<br><font color="Lime"><a href="http://server_domain_name_or_IP/" target="_blank" rel="external">http://server_domain_name_or_IP/</a></font>

<p><img src="http://otc4m8ch2.bkt.clouddn.com/2.PNG" alt="4"></p>
<blockquote>
<h2 id="第二步：安装PHP"><a href="#第二步：安装PHP" class="headerlink" title="第二步：安装PHP"></a>第二步：安装PHP</h2></blockquote>
<p>通过以下命令安装：</p>
<font color="Lime">apt-get install php5-common php5-mysqlnd php5-xmlrpc php5-curl php5-gd php5-cli php5-fpm php-pear php5-dev php5-imap php5-mcrypt</font><br>你可以检查你的PHP版本：<br><font color="Lime">php -v</font><br>你可以看到以下内容：<br>&gt; PHP 5.5.9-1ubuntu4.21 (cli) (built: Feb 9 2017 20:54:58)<br>Copyright (c) 1997-2014 The PHP Group<br>Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies<br>with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies<br><br>现在，我们将进行一些小小的改动，使我们的设置更加安全。<br><font color="Lime">nano /etc/php5/fpm/php.ini</font><br>按Ctrl + W并搜索cgi.fix_pathinfo=取消注释（delete;）并将1更改为0.更改后，该行应如下所示：<br><font color="Lime">cgi.fix_pathinfo=0</font><br>保存（Ctrl + O）并关闭文件（Ctrl + X）。<br>现在，我们只需要重新启动PHP处理器即可：<br><font color="Lime">service php5-fpm restart</font>

<blockquote>
<h2 id="第三步：-安装MySql"><a href="#第三步：-安装MySql" class="headerlink" title="第三步： 安装MySql"></a>第三步： 安装MySql</h2></blockquote>
<p>要存储和管理数据库，我们需要安装MySQL。您可以通过在控制台中键入以下内容来轻松安装它：</p>
<font color="Lime">apt-get install mysql-server</font><br>在安装过程中，将要求您为MySQL设置root密码。到目前为止，安装的MySQ还不完整，我们需要使用如下命令，进行完整安装：<br><font color="Lime">mysql_install_db</font><br>最后一步，通过运行一个安全脚本来修改一些默认的设置。<br><font color="Lime">mysql_secure_installation</font><br>首先会让你输入MySQL的密码，这个密码是刚刚你安装的时候设置的那个密码，然后会问你是否更改当前密码，如果你不打算更改现在的密码，就输入n，如果需要更改就输入y，然后输入新密码。这一步之后，后面的直接一路输入y就行了。<br>你还可以通过如下操作设置时区（可以不设置）：<br><font color="Lime">dpkg-reconfigure tzdata</font><br>点击OK，然后选择UTC-8就行了。<br><br><img src="http://otc4m8ch2.bkt.clouddn.com/3.PNG" alt="5"><br><br>到这里，LEMP环境就已经搭建完成了。<br><br>&gt; ## 第四步：配置Nginx服务<br><br>首先，开始安装WordPress，先给我们的网站建立一个Nginx服务块。<br><font color="Lime">nano /etc/nginx/sites-available/wordpress</font><br>粘贴一下代码：<br>———–以下为复制部分————–<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line"><span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line"><span class="attribute">root</span> /var/www/wordpress;</div><div class="line"><span class="attribute">index</span> index.php index.html index.htm;</div><div class="line"></div><div class="line"><span class="attribute">server_name</span> domain.com;</div><div class="line"></div><div class="line"><span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</div><div class="line"></div><div class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</div><div class="line"><span class="attribute">location</span> = /50x.html &#123;</div><div class="line"><span class="attribute">root</span> /usr/share/nginx/html;</div><div class="line">&#125;</div><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line"><span class="comment"># try_files $uri $uri/ =404;</span></div><div class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?q=<span class="variable">$uri</span>&amp;<span class="variable">$args</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</div><div class="line"><span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</div><div class="line"><span class="attribute">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;</div><div class="line"><span class="attribute">fastcgi_index</span> index.php;</div><div class="line"><span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line"><span class="attribute">include</span> fastcgi_params;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> = /favicon.ico &#123;</div><div class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">log_not_found</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">expires</span> max;</div><div class="line">&#125;</div><div class="line"><span class="attribute">location</span> = /robots.txt &#123;</div><div class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">log_not_found</span> <span class="literal">off</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Cache Static Files For As Long As Possible</span></div><div class="line"><span class="attribute">location</span> ~*</div><div class="line">\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$</div><div class="line">&#123;</div><div class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">log_not_found</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">expires</span> max;</div><div class="line">&#125;</div><div class="line"><span class="comment"># Security Settings For Better Privacy Deny Hidden Files</span></div><div class="line"><span class="attribute">location</span> <span class="regexp">~ /\.</span> &#123;</div><div class="line"><span class="attribute">deny</span> all;</div><div class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">log_not_found</span> <span class="literal">off</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment"># Return 403 Forbidden For readme.(txt|html) or license.(txt|html)</span></div><div class="line"><span class="attribute">if</span> (<span class="variable">$request_uri</span> <span class="regexp">~* “^.+(readme|license)\.(txt|html)$”)</span> &#123;</div><div class="line"><span class="attribute">return</span> <span class="number">403</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment"># Disallow PHP In Upload Folder</span></div><div class="line"><span class="attribute">location</span> /wp-content/uploads/ &#123;</div><div class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line"><span class="attribute">deny</span> all;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>—————-以上为复制部分————————–<br>保存（Ctrl + O）并关闭文件（Ctrl + X）。让我们通过符号链接（相当于Windows的快捷方式）启用服务器块：<br><font color="Lime">ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/wordpress</font>

<p><img src="http://otc4m8ch2.bkt.clouddn.com/4.PNG" alt="6"></p>
<p>然后，我们删除Nginx默认的服务块</p>
<font color="Lime">rm /etc/nginx/sites-enabled/default</font><br>下面将对Nginx的配置文件进行设置：<br><font color="Lime">nano /etc/nginx/nginx.conf</font><br>修改以下内容：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user www-data<span class="comment">;</span></div><div class="line">worker_processes <span class="number">1</span><span class="comment">;</span></div><div class="line">pid /run/nginx.pid<span class="comment">;</span></div></pre></td></tr></table></figure><br><br>添加一个用户epoll到event中：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">events</span> &#123;</div><div class="line"><span class="attribute">worker_connections</span> <span class="number">4096</span>;</div><div class="line"><span class="attribute">multi_accept</span> <span class="literal">on</span>;</div><div class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>添加client_max_body_size（WordPress上传文件大小设置）和server_tokens off。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">server_tokens</span> <span class="literal">off</span>;</div><div class="line"><span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</div></pre></td></tr></table></figure><br><br><img src="http://otc4m8ch2.bkt.clouddn.com/5.png" alt="7"><br><br>然后再把下面以下内容的注释（前面的#）去掉：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># Gzip Settings</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line">gzip <span class="keyword">on</span>;</div><div class="line">gzip_disable “msie6”;</div><div class="line"></div><div class="line">gzip_vary <span class="keyword">on</span>;</div><div class="line">gzip_proxied any;</div><div class="line">gzip_comp_level <span class="number">6</span>;</div><div class="line">gzip_buffers <span class="number">16</span> <span class="number">8</span>k;</div><div class="line">gzip_http_version <span class="number">1.1</span>;</div><div class="line">gzip_types <span class="built_in">text</span>/plain <span class="built_in">text</span>/css <span class="built_in">application</span>/json <span class="built_in">application</span>/x-javascript <span class="built_in">text</span>/xml <span class="built_in">application</span>/xml <span class="built_in">application</span>/xml+rss <span class="built_in">text</span>/javascript;</div></pre></td></tr></table></figure><br><br><img src="http://otc4m8ch2.bkt.clouddn.com/6.png" alt="8"><br><br>保存（Ctrl + O）并关闭文件（Ctrl + X）。然后重新启动服务器：<br><font color="Lime">service nginx restart</font>

<blockquote>
<h2 id="第五步：配置PHP"><a href="#第五步：配置PHP" class="headerlink" title="第五步：配置PHP"></a>第五步：配置PHP</h2></blockquote>
<p>如果你上传到WordPress网站的文件大于2MB，您必须增加php.ini中的 PHP上传大小变量：</p>
<font color="Lime">nano /etc/php5/fpm/php.ini<br>按Ctrl + W并搜索“ upload_max_filesize ”并将其设置为100m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![9][9]</div><div class="line"></div><div class="line">对post_max_size执行相同操作。post_max_size需要与upload_max_filesize大小相同。</div><div class="line">```post_max_size=100M</div></pre></td></tr></table></figure><br><br><img src="http://otc4m8ch2.bkt.clouddn.com/8.png" alt="10"><br><br>重新启动PHP。<br><font color="Lime">service php5-fpm restart</font>

<blockquote>
<h2 id="第六步：设置MySql数据库"><a href="#第六步：设置MySql数据库" class="headerlink" title="第六步：设置MySql数据库"></a>第六步：设置MySql数据库</h2></blockquote>
<p>在这一步中，我们将创建数据库用户和表，首先登陆MySQL（密码是之前安装的时候设置的那么密码）：</p>
<font color="Lime">mysql -u root -p</font><br>我们创建一个名为wordpress的数据库（当然你也可以设置成你自己喜欢的名称，MySQL命令以分号结束，不要忘记分号）：<br><font color="Lime">CREATE DATABASE wordpress;</font><br>Query OK, 1 row affected (0.00 sec)<br>之后，我们需要创建一个新用户。用户和密码也可以根据自己的习惯进行设置：<br><font color="Lime">CREATE USER wordpressuser@localhost;</font><br>Query OK, 0 rows affected (0.00 sec)<br>为新用户设置密码：<br><font color="Lime">SET PASSWORD FOR wordpressuser@localhost= PASSWORD(“password”);</font><br>Query OK, 0 rows affected (0.00 sec<br>通过向新用户授予所有权限来完成。没有这个命令，WordPress安装程序将无法启动（重要）：<br><font color="Lime">GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY ‘password’;</font><br>Query OK, 0 rows affected (0.00 sec)<br>然后刷新MySQL：<br><font color="Lime">FLUSH PRIVILEGES;</font><br>Query OK, 0 rows affected (0.00 sec)<br>退出MySQL：<br><font color="Lime">exit</font>

<blockquote>
<h2 id="第七步：安装WordPress"><a href="#第七步：安装WordPress" class="headerlink" title="第七步：安装WordPress"></a>第七步：安装WordPress</h2></blockquote>
<p>首先创建网站的根目录：</p>
<p><font color="Lime">mkdir /var/www/</font></p>
<p><font color="Lime">cd /var/www/</font><br>下载最新版的WordPress：</p>
<p><font color="Lime">wget <a href="http://wordpress.org/latest.tar.gz" target="_blank" rel="external">http://wordpress.org/latest.tar.gz</a></font><br>对压缩包进行解压归档：</p>
<p><font color="Lime">tar -xzvf latest.tar.gz</font><br>修改/var/www/wordpress文件的用户权限，修改为www-data，如果不设置安装完WordPress之后，你会发现自己没有操作的权限，就很烦：</p>
<p><font color="Lime">chown -R www-data:www-data wordpress/</font></p>
<p><font color="Lime">usermod -a -G www-data www-data</font><br>修改完即可看到wordpress目录的用户和所属组都变成www-data了：</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/9.png" alt="11"></p>
<p>到下载，我们服务器端的命令行操作就结束了，剩下的只需要在浏览器输入你的IP地址或者域名进行浏览器端图形化界面安装就行了：</p>
<p><strong><a href="http://server_domain_name_or_IP" target="_blank" rel="external">http://server_domain_name_or_IP</a></strong></p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/10.PNG" alt="12"></p>
<p>下面会让你对数据库进行链接，首先我们刚刚已经创建了给wordpress的数据库，但是我们没有把数据库对wordpress进行链接，有两种方法进行链接，第一种是通过命令行，修改网站根目录下的wp-config.php文件进行链接。<br>第二种方法就是我们接下来要用的方法，如果你完成安装上面的方法进行安装的，当你上一步选择好语言点击下一步之后，会出现如下界面：</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/11.PNG" alt="13"></p>
<p>只需要点击 现在就开始就可以进行图形化的设置，十分简单</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/12.png" alt="14"></p>
<p>然后，选择进行安装就可以了：</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/13.PNG" alt="15"></p>
<p>然后对wordpress进行简单的设置，比如站点标题，用户名密码之类的东西进行设置，设置好之后，点击安装WordPress就行了。</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/14.PNG" alt="16"></p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/15.PNG" alt="17"></p>
<p>登录你之前设置的用户名或者邮箱，输入密码（即可进入WordPress后台管理界面）：</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/16.PNG" alt="18"></p>
<p>进入后台之后，你就可以安装主题，发表文章等等一系列操作。</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/17.PNG" alt="19"></p>
<p>这是刚搭建完成通过IP地址访问看到的界面：</p>
<p><img src="http://otc4m8ch2.bkt.clouddn.com/18.PNG" alt="20"></p>
<p>至此，我们使用LEMP搭建WordPress就全部完成了。码字不易，请多多支持。</p>
<blockquote>
<p>如果你感觉文章对你有所帮助，文章下方有打赏按钮，请您随意打赏，以支持作者继续创作。</p>
</blockquote>
</font>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LEMP </tag>
            
            <tag> WordPress </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
